"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.reset = exports.set = void 0;
var RealDate = Date;
var now = null;
var MockDate = /** @class */ (function (_super) {
    __extends(MockDate, _super);
    function MockDate(y, m, d, h, M, s, ms) {
        var _this = _super.call(this) || this;
        var date;
        switch (arguments.length) {
            case 0:
                if (now !== null) {
                    date = new RealDate(now.valueOf());
                }
                else {
                    date = new RealDate();
                }
                break;
            case 1:
                date = new RealDate(y);
                break;
            default:
                d = typeof d === 'undefined' ? 1 : d;
                h = h || 0;
                M = M || 0;
                s = s || 0;
                ms = ms || 0;
                date = new RealDate(y, m, d, h, M, s, ms);
                break;
        }
        return date;
    }
    return MockDate;
}(Date));
MockDate.prototype = RealDate.prototype;
MockDate.UTC = RealDate.UTC;
MockDate.now = function () {
    return new MockDate().valueOf();
};
MockDate.parse = function (dateString) {
    return RealDate.parse(dateString);
};
MockDate.toString = function () {
    return RealDate.toString();
};
function set(date) {
    var dateObj = new Date(date.valueOf());
    if (isNaN(dateObj.getTime())) {
        throw new TypeError('mockdate: The time set is an invalid date: ' + date);
    }
    // @ts-ignore
    Date = MockDate;
    if (date.valueOf) {
        date = date.valueOf();
    }
    now = dateObj.valueOf();
}
exports.set = set;
function reset() {
    Date = RealDate;
}
exports.reset = reset;
exports.default = {
    set: set,
    reset: reset,
};
//# sourceMappingURL=mockdate.js.map
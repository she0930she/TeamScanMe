{"version":3,"sources":["../src/log.ts"],"names":["isProfiling","consoleTime","console","time","consoleTimeEnd","timeEnd","Log","log","args","respectProgressBars","consoleLog","withPrefix","nested","message","newLine","addNewLineIfNone","_isLastLineNewLine","_printNewLineBeforeNextLog","printNewLineBeforeNextLog","setBundleProgressBar","bar","_bundleProgressBar","setSpinner","oraSpinner","_oraSpinner","originalStart","start","bind","text","originalStop","stop","error","consoleError","withPrefixAndTextColor","chalk","red","nestedError","warn","consoleWarn","yellow","debug","isDebug","consoleDebug","info","consoleInfo","nestedWarn","gray","clear","process","stdout","write","platform","_updateIsLastLineNewLine","length","lastArg","match","_maybePrintNewLine","commitLogs","terminate","lastDraw","render","getPrefix","chalkColor","Date","toTimeString","slice","program","nonInteractive","map","arg","terminalLink"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport { boolish } from 'getenv';\nimport { Ora } from 'ora';\nimport terminalLink from 'terminal-link';\n\ntype Color = (...text: string[]) => string;\n\nconst isProfiling = boolish('EXPO_PROFILE', false);\n\n// eslint-disable-next-line no-console\nconst consoleTime: (label?: string) => void = isProfiling ? console.time : () => {};\n// eslint-disable-next-line no-console\nconst consoleTimeEnd: (label?: string) => void = isProfiling ? console.timeEnd : () => {};\n\nexport default class Log {\n  public static readonly chalk = chalk;\n  public static readonly terminalLink = terminalLink;\n  public static readonly isDebug = boolish('EXPO_DEBUG', false);\n  public static readonly isProfiling = isProfiling;\n\n  public static log(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleLog(...Log.withPrefix(args));\n    });\n  }\n\n  public static nested(message: any) {\n    Log.respectProgressBars(() => {\n      Log.consoleLog(message);\n    });\n  }\n\n  public static time = consoleTime;\n\n  public static timeEnd = consoleTimeEnd;\n\n  public static newLine() {\n    Log.respectProgressBars(() => {\n      Log.consoleLog();\n    });\n  }\n\n  public static addNewLineIfNone() {\n    if (!Log._isLastLineNewLine && !Log._printNewLineBeforeNextLog) {\n      Log.newLine();\n    }\n  }\n\n  public static printNewLineBeforeNextLog() {\n    Log._printNewLineBeforeNextLog = true;\n  }\n\n  public static setBundleProgressBar(bar: any) {\n    Log._bundleProgressBar = bar;\n  }\n\n  public static setSpinner(oraSpinner: Ora | null) {\n    Log._oraSpinner = oraSpinner;\n    if (Log._oraSpinner) {\n      const originalStart = Log._oraSpinner.start.bind(Log._oraSpinner);\n      Log._oraSpinner.start = (text: any) => {\n        // Reset the new line tracker\n        Log._isLastLineNewLine = false;\n        return originalStart(text);\n      };\n      // All other methods of stopping will invoke the stop method.\n      const originalStop = Log._oraSpinner.stop.bind(Log._oraSpinner);\n      Log._oraSpinner.stop = () => {\n        // Reset the target spinner\n        Log.setSpinner(null);\n        return originalStop();\n      };\n    }\n  }\n\n  public static error(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleError(...Log.withPrefixAndTextColor(args, chalk.red));\n    });\n  }\n\n  public static nestedError(message: string) {\n    Log.respectProgressBars(() => {\n      Log.consoleError(chalk.red(message));\n    });\n  }\n\n  public static warn(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleWarn(...Log.withPrefixAndTextColor(args, chalk.yellow));\n    });\n  }\n\n  // Only show these logs when EXPO_DEBUG is active\n  public static debug(...args: any[]) {\n    if (!Log.isDebug) {\n      return;\n    }\n    Log.respectProgressBars(() => {\n      Log.consoleDebug(...Log.withPrefixAndTextColor(args));\n    });\n  }\n\n  public static info(...args: any[]) {\n    if (!Log.isDebug) {\n      return;\n    }\n    Log.respectProgressBars(() => {\n      Log.consoleInfo(...args);\n    });\n  }\n\n  public static nestedWarn(message: string) {\n    Log.respectProgressBars(() => {\n      Log.consoleWarn(chalk.yellow(message));\n    });\n  }\n\n  public static gray(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleLog(...Log.withPrefixAndTextColor(args));\n    });\n  }\n\n  public static clear() {\n    process.stdout.write(process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H');\n  }\n\n  private static _bundleProgressBar: any;\n  private static _oraSpinner: any;\n\n  private static _printNewLineBeforeNextLog = false;\n  private static _isLastLineNewLine = false;\n  private static _updateIsLastLineNewLine(args: any[]) {\n    if (args.length === 0) {\n      Log._isLastLineNewLine = true;\n    } else {\n      const lastArg = args[args.length - 1];\n      if (typeof lastArg === 'string' && (lastArg === '' || lastArg.match(/[\\r\\n]$/))) {\n        Log._isLastLineNewLine = true;\n      } else {\n        Log._isLastLineNewLine = false;\n      }\n    }\n  }\n\n  private static _maybePrintNewLine() {\n    if (Log._printNewLineBeforeNextLog) {\n      Log._printNewLineBeforeNextLog = false;\n      console.log(); // eslint-disable-line no-console\n    }\n  }\n\n  private static consoleDebug(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.debug(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleInfo(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.info(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleLog(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.log(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleWarn(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.warn(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleError(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.error(...args); // eslint-disable-line no-console\n  }\n\n  private static respectProgressBars(commitLogs: () => void) {\n    if (Log._bundleProgressBar) {\n      Log._bundleProgressBar.terminate();\n      Log._bundleProgressBar.lastDraw = '';\n    }\n    if (Log._oraSpinner) {\n      Log._oraSpinner.stop();\n    }\n    commitLogs();\n\n    if (Log._bundleProgressBar) {\n      Log._bundleProgressBar.render();\n    }\n    if (Log._oraSpinner) {\n      Log._oraSpinner.start();\n    }\n  }\n\n  private static getPrefix(chalkColor: Color) {\n    return chalkColor(`[${new Date().toTimeString().slice(0, 8)}]`);\n  }\n\n  private static withPrefixAndTextColor(args: any[], chalkColor: Color = chalk.gray) {\n    if (program.nonInteractive) {\n      return [Log.getPrefix(chalkColor), ...args.map(arg => chalkColor(arg))];\n    } else {\n      return args.map(arg => chalkColor(arg));\n    }\n  }\n\n  private static withPrefix(args: any[], chalkColor = chalk.gray) {\n    if (program.nonInteractive) {\n      return [Log.getPrefix(chalkColor), ...args];\n    } else {\n      return args;\n    }\n  }\n}\n"],"file":"log.js"}
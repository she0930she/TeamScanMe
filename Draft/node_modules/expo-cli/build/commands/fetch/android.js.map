{"version":3,"sources":["../../../src/commands/fetch/android.ts"],"names":["assertSlug","slug","chalk","bold","maybeRenameExistingFileAsync","projectRoot","filename","desiredFilePath","path","resolve","fs","pathExists","num","Log","log","rename","fetchAndroidKeystoreAsync","options","ctx","Context","init","nonInteractive","parent","keystoreFilename","manifest","backupKeystoreOutputPath","experienceName","projectOwner","DownloadKeystore","outputPath","displayCredentials","fetchAndroidHashesAsync","view","quiet","keystore","android","fetchKeystore","AndroidCredentials","logKeystoreHashes","keystorePath","keystorePassword","keyAlias","keyPassword","warn","remove","fetchAndroidUploadCertAsync","uploadKeyFilename","uploadKeyPath","exportCertBase64"],"mappings":"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","sourcesContent":["import { AndroidCredentials } from '@expo/xdl';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport Log from '../../log';\n\ntype Options = {\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nfunction assertSlug(slug: any): asserts slug {\n  assert(slug, `${chalk.bold(slug)} field must be set in your app.json or app.config.js`);\n}\n\nasync function maybeRenameExistingFileAsync(projectRoot: string, filename: string) {\n  const desiredFilePath = path.resolve(projectRoot, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectRoot, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    Log.log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectRoot, `OLD_${num}_${filename}`));\n  }\n}\n\nexport async function fetchAndroidKeystoreAsync(\n  projectRoot: string,\n  options: Options\n): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n\n  const keystoreFilename = `${ctx.manifest.slug}.jks`;\n  await maybeRenameExistingFileAsync(projectRoot, keystoreFilename);\n  const backupKeystoreOutputPath = path.resolve(projectRoot, keystoreFilename);\n  const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n\n  assertSlug(ctx.manifest.slug);\n  await runCredentialsManager(\n    ctx,\n    new DownloadKeystore(experienceName, {\n      outputPath: backupKeystoreOutputPath,\n      displayCredentials: true,\n    })\n  );\n}\n\nexport async function fetchAndroidHashesAsync(\n  projectRoot: string,\n  options: Options\n): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n  const outputPath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      await AndroidCredentials.logKeystoreHashes({\n        keystorePath: outputPath,\n        keystorePassword: keystore.keystorePassword,\n        keyAlias: keystore.keyAlias,\n        keyPassword: keystore.keyPassword,\n      });\n      Log.log(\n        `\\nNote: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.`\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(outputPath);\n  }\n}\n\nexport async function fetchAndroidUploadCertAsync(\n  projectRoot: string,\n  options: Options\n): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n\n  const keystorePath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n\n  const uploadKeyFilename = `${ctx.manifest.slug}_upload_cert.pem`;\n  await maybeRenameExistingFileAsync(projectRoot, uploadKeyFilename);\n  const uploadKeyPath = path.resolve(projectRoot, uploadKeyFilename);\n\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath: keystorePath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      Log.log(`Writing upload key to ${uploadKeyPath}`);\n      await AndroidCredentials.exportCertBase64(\n        {\n          keystorePath,\n          keystorePassword: keystore.keystorePassword,\n          keyAlias: keystore.keyAlias,\n        },\n        uploadKeyPath\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(keystorePath);\n  }\n}\n"],"file":"android.js"}
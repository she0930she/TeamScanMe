{"version":3,"sources":["../../../../../src/commands/upload/submission-service/archive-source/ArchiveFileSource.ts"],"names":["ArchiveFileSourceType","getArchiveFileLocationAsync","source","sourceType","prompt","handlePromptSourceAsync","url","handleUrlSourceAsync","getArchiveLocationForUrlAsync","latest","handleLatestSourceAsync","path","handlePathSourceAsync","getArchiveLocationForPathAsync","buildId","handleBuildIdSourceAsync","Log","log","resolvedPath","owner","slug","projectDir","builds","StandaloneBuild","getStandaloneBuilds","platform","length","error","chalk","bold","artifacts","build","getStandaloneBuildById","id","err","sourceTypeRaw","name","type","message","choices","title","value","askForArchiveUrlAsync","askForArchivePathAsync","askForBuildIdAsync","Error","defaultArchiveUrl","initial","validate","validateUrl","defaultArchivePath","val","UrlUtils","isURL","protocols"],"mappings":"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","sourcesContent":["import { Platform } from '@expo/config';\nimport { StandaloneBuild, UrlUtils } from '@expo/xdl';\n\nimport Log from '../../../../log';\nimport prompt from '../../../../prompts';\nimport { existingFile } from '../../../../validators';\nimport { isUUID } from '../../../utils/isUUID';\nimport { getAppConfig } from '../utils/config';\nimport {\n  downloadAppArchiveAsync,\n  extractLocalArchiveAsync,\n  pathIsTar,\n  uploadAppArchiveAsync,\n} from '../utils/files';\n\nenum ArchiveFileSourceType {\n  url,\n  latest,\n  path,\n  buildId,\n  prompt,\n}\n\ninterface ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType;\n  projectDir: string;\n  platform: Platform;\n}\n\ninterface ArchiveFileUrlSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.url;\n  url: string;\n}\n\ninterface ArchiveFileLatestSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.latest;\n}\n\ninterface ArchiveFilePathSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.path;\n  path: string;\n}\n\ninterface ArchiveFileBuildIdSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.buildId;\n  id: string;\n}\n\ninterface ArchiveFilePromptSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.prompt;\n  projectDir: string;\n}\n\nexport type ArchiveFileSource =\n  | ArchiveFileUrlSource\n  | ArchiveFileLatestSource\n  | ArchiveFilePathSource\n  | ArchiveFileBuildIdSource\n  | ArchiveFilePromptSource;\n\nasync function getArchiveFileLocationAsync(source: ArchiveFileSource): Promise<string> {\n  switch (source.sourceType) {\n    case ArchiveFileSourceType.prompt:\n      return await handlePromptSourceAsync(source);\n    case ArchiveFileSourceType.url: {\n      const url = await handleUrlSourceAsync(source);\n      return await getArchiveLocationForUrlAsync(url);\n    }\n    case ArchiveFileSourceType.latest: {\n      const url = await handleLatestSourceAsync(source);\n      return await getArchiveLocationForUrlAsync(url);\n    }\n    case ArchiveFileSourceType.path: {\n      const path = await handlePathSourceAsync(source);\n      return getArchiveLocationForPathAsync(path);\n    }\n    case ArchiveFileSourceType.buildId: {\n      const url = await handleBuildIdSourceAsync(source);\n      return await getArchiveLocationForUrlAsync(url);\n    }\n  }\n}\n\nasync function getArchiveLocationForUrlAsync(url: string): Promise<string> {\n  // When a URL points to a tar file, download it and extract using unified logic.\n  // Otherwise send it directly to the server in online mode.\n  if (!pathIsTar(url)) {\n    return url;\n  } else {\n    Log.log('Downloading your app archive');\n    return downloadAppArchiveAsync(url);\n  }\n}\n\nasync function getArchiveLocationForPathAsync(path: string): Promise<string> {\n  const resolvedPath = await extractLocalArchiveAsync(path);\n\n  Log.log('Uploading your app archive to the Expo Submission Service');\n  return await uploadAppArchiveAsync(resolvedPath);\n}\n\nasync function handleUrlSourceAsync(source: ArchiveFileUrlSource): Promise<string> {\n  return source.url;\n}\n\nasync function handleLatestSourceAsync(source: ArchiveFileLatestSource): Promise<string> {\n  const { owner, slug } = getAppConfig(source.projectDir);\n  const builds = await StandaloneBuild.getStandaloneBuilds(\n    {\n      platform: source.platform,\n      owner,\n      slug,\n    },\n    1\n  );\n  if (builds.length === 0) {\n    Log.error(\n      Log.chalk.bold(\n        \"Couldn't find any builds for this project on Expo servers. It looks like you haven't run expo build:android yet.\"\n      )\n    );\n    return getArchiveFileLocationAsync({\n      sourceType: ArchiveFileSourceType.prompt,\n      platform: source.platform,\n      projectDir: source.projectDir,\n    });\n  }\n  return builds[0].artifacts.url;\n}\n\nasync function handlePathSourceAsync(source: ArchiveFilePathSource): Promise<string> {\n  if (!(await existingFile(source.path))) {\n    Log.error(Log.chalk.bold(`${source.path} doesn't exist`));\n    return getArchiveFileLocationAsync({\n      sourceType: ArchiveFileSourceType.prompt,\n      platform: source.platform,\n      projectDir: source.projectDir,\n    });\n  }\n  return source.path;\n}\n\nasync function handleBuildIdSourceAsync(source: ArchiveFileBuildIdSource): Promise<string> {\n  const { owner, slug } = getAppConfig(source.projectDir);\n  let build: any;\n  try {\n    build = await StandaloneBuild.getStandaloneBuildById({\n      platform: source.platform,\n      id: source.id,\n      owner,\n      slug,\n    });\n  } catch (err) {\n    Log.error(err);\n    throw err;\n  }\n\n  if (!build) {\n    Log.error(Log.chalk.bold(`Couldn't find build for id ${source.id}`));\n    return getArchiveFileLocationAsync({\n      sourceType: ArchiveFileSourceType.prompt,\n      platform: source.platform,\n      projectDir: source.projectDir,\n    });\n  } else {\n    return build.artifacts.url;\n  }\n}\n\nasync function handlePromptSourceAsync(source: ArchiveFilePromptSource): Promise<string> {\n  const { sourceType: sourceTypeRaw } = await prompt({\n    name: 'sourceType',\n    type: 'select',\n    message: 'What would you like to submit?',\n    choices: [\n      { title: 'I have a url to the app archive', value: ArchiveFileSourceType.url },\n      {\n        title: \"I'd like to upload the app archive from my computer\",\n        value: ArchiveFileSourceType.path,\n      },\n      {\n        title: 'The latest build from Expo servers',\n        value: ArchiveFileSourceType.latest,\n      },\n      {\n        title: 'A build identified by a build id',\n        value: ArchiveFileSourceType.buildId,\n      },\n    ],\n  });\n  const sourceType = sourceTypeRaw as ArchiveFileSourceType;\n  switch (sourceType) {\n    case ArchiveFileSourceType.url: {\n      const url = await askForArchiveUrlAsync();\n      return getArchiveFileLocationAsync({\n        sourceType: ArchiveFileSourceType.url,\n        url,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.path: {\n      const path = await askForArchivePathAsync();\n      return getArchiveFileLocationAsync({\n        sourceType: ArchiveFileSourceType.path,\n        path,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.latest: {\n      return getArchiveFileLocationAsync({\n        sourceType: ArchiveFileSourceType.latest,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.buildId: {\n      const id = await askForBuildIdAsync();\n      return getArchiveFileLocationAsync({\n        sourceType: ArchiveFileSourceType.buildId,\n        id,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.prompt:\n      throw new Error('This should never happen');\n  }\n}\n\nasync function askForArchiveUrlAsync(): Promise<string> {\n  const defaultArchiveUrl = 'https://url.to/your/archive.aab';\n  const { url } = await prompt({\n    name: 'url',\n    message: 'URL:',\n    initial: defaultArchiveUrl,\n    type: 'text',\n    validate: (url: string): string | boolean => {\n      if (url === defaultArchiveUrl) {\n        return 'That was just an example URL, meant to show you the format that we expect for the response.';\n      } else if (!validateUrl(url)) {\n        return `${url} does not conform to HTTP format`;\n      } else {\n        return true;\n      }\n    },\n  });\n  return url;\n}\n\nasync function askForArchivePathAsync(): Promise<string> {\n  const defaultArchivePath = '/path/to/your/archive.aab';\n  const { path } = await prompt({\n    name: 'path',\n    message: 'Path to the app archive file (aab or apk):',\n    initial: defaultArchivePath,\n    type: 'text',\n    validate: async (path: string): Promise<boolean | string> => {\n      if (path === defaultArchivePath) {\n        return 'That was just an example path, meant to show you the format that we expect for the response.';\n      } else if (!(await existingFile(path, false))) {\n        return `File ${path} doesn't exist.`;\n      } else {\n        return true;\n      }\n    },\n  });\n  return path;\n}\n\nasync function askForBuildIdAsync(): Promise<string> {\n  const { id } = await prompt({\n    name: 'id',\n    message: 'Build ID:',\n    type: 'text',\n    validate: (val: string): string | boolean => {\n      if (!isUUID(val)) {\n        return `${val} is not a valid id`;\n      } else {\n        return true;\n      }\n    },\n  });\n  return id;\n}\n\nfunction validateUrl(url: string): boolean {\n  return UrlUtils.isURL(url, {\n    protocols: ['http', 'https'],\n  });\n}\n\nexport { ArchiveFileSourceType, getArchiveFileLocationAsync };\n"],"file":"ArchiveFileSource.js"}
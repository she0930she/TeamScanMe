{"version":3,"sources":["../../../src/commands/build/BaseBuilder.ts"],"names":["secondsToMilliseconds","seconds","BaseBuilder","getUserAsync","UserManager","ensureLoggedInAsync","constructor","projectDir","options","projectConfig","manifest","exp","updateProjectConfig","command","prepareProjectInfo","run","e","BuildError","Log","error","message","process","exit","Error","commandCheckStatus","checkStatus","checkProjectConfig","isDetached","platform","oldestSupportedMajorVersion","Versions","oldestSupportedMajorVersionAsync","semver","major","sdkVersion","version","newestReleasedSdkVersionAsync","warn","chalk","bold","checkForBuildInProgress","log","buildStatus","current","releaseChannel","publicUrl","jobs","length","err","logBuildStatuses","canPurchasePriorityBuilds","numberOfRemainingPriorityBuilds","hasUnlimitedPriorityBuilds","checkStatusBeforeBuild","reuseStatus","slug","owner","canReuse","underline","downloadUrl","newLine","username","getCurrentUsernameAsync","forEach","job","i","packageExtension","UrlUtils","constructBuildLogsUrl","buildId","id","undefined","hasPriorityBuilds","shouldShowUpgradeInfo","priority","status","constructTurtleStatusUrl","artifacts","url","ensureReleaseExists","publish","ids","duringBuild","release","channel","publicationId","publishedTime","wait","interval","spinner","start","result","filter","succeed","text","fail","build","expIds","bundleIdentifier","ios","opts","PLATFORMS","IOS","type","ANDROID","user","getCurrentUserAsync","kind","waitOpts","completedJob","artifactUrl","artifactId","constructArtifactUrl","addNewLineIfNone","green","ALL"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport { RobotUser, User, UserManager, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport semver from 'semver';\n\nimport Log from '../../log';\nimport { getProjectOwner } from '../../projects';\nimport { action as publishAction } from '../publish';\nimport { sleep } from '../utils/promise';\nimport * as UrlUtils from '../utils/url';\nimport { BuilderOptions } from './BaseBuilder.types';\nimport BuildError from './BuildError';\nimport { Platform, PLATFORMS } from './constants';\nimport { findReusableBuildAsync } from './findReusableBuildAsync';\nimport { BuildJobFields, getBuildStatusAsync } from './getBuildStatusAsync';\nimport { getLatestReleaseAsync } from './getLatestReleaseAsync';\nimport { startBuildAsync } from './startBuildAsync';\n\nconst secondsToMilliseconds = (seconds: number): number => seconds * 1000;\nexport default class BaseBuilder {\n  protected projectConfig: ProjectConfig;\n  manifest: ExpoConfig;\n\n  async getUserAsync(): Promise<User | RobotUser> {\n    return await UserManager.ensureLoggedInAsync();\n  }\n\n  constructor(public projectDir: string, public options: BuilderOptions = {}) {\n    this.projectConfig = getConfig(this.projectDir);\n    this.manifest = this.projectConfig.exp;\n  }\n\n  protected updateProjectConfig() {\n    // Update the project config\n    this.projectConfig = getConfig(this.projectDir);\n    this.manifest = this.projectConfig.exp;\n  }\n\n  async command() {\n    try {\n      await this.prepareProjectInfo();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        Log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    throw new Error('`run()` should be overridden');\n  }\n\n  async commandCheckStatus() {\n    try {\n      await this.prepareProjectInfo();\n      await this.checkStatus();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        Log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async prepareProjectInfo(): Promise<void> {\n    await this.checkProjectConfig();\n    // note: this validates if a robot user is used without \"owner\" in the manifest\n    // without this check, build/status returns \"robots not allowed\".\n    getProjectOwner(\n      // TODO: Move this since it can add delay\n      await this.getUserAsync(),\n      this.projectConfig.exp\n    );\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    if (this.manifest.isDetached) {\n      Log.error(`'expo build:${this.platform()}' is not supported for detached projects.`);\n      process.exit(1);\n    }\n\n    // Warn user if building a project using the next deprecated SDK version\n    const oldestSupportedMajorVersion = await Versions.oldestSupportedMajorVersionAsync();\n    if (semver.major(this.manifest.sdkVersion!) === oldestSupportedMajorVersion) {\n      const { version } = await Versions.newestReleasedSdkVersionAsync();\n      Log.warn(\n        `\\nSDK${oldestSupportedMajorVersion} will be ${chalk.bold(\n          'deprecated'\n        )} next! We recommend upgrading versions, ideally to the latest (SDK${semver.major(\n          version\n        )}), so you can continue to build new binaries of your app and develop in Expo Go.\\n`\n      );\n    }\n  }\n\n  async checkForBuildInProgress() {\n    Log.log('Checking if there is a build in progress...\\n');\n    const buildStatus = await getBuildStatusAsync(this.projectDir, {\n      platform: this.platform(),\n      current: true,\n      releaseChannel: this.options.releaseChannel,\n      publicUrl: this.options.publicUrl,\n      sdkVersion: this.manifest.sdkVersion,\n    } as any);\n\n    if (buildStatus.jobs && buildStatus.jobs.length > 0) {\n      throw new BuildError('Cannot start a new build, as there is already an in-progress build.');\n    }\n  }\n\n  async checkStatus(platform: 'all' | 'ios' | 'android' = 'all'): Promise<void> {\n    Log.log('Fetching build history...\\n');\n\n    const buildStatus = await getBuildStatusAsync(this.projectDir, {\n      platform,\n      current: false,\n      releaseChannel: this.options.releaseChannel,\n    });\n\n    if ('err' in buildStatus && buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (!(buildStatus.jobs && buildStatus.jobs.length)) {\n      Log.log('No currently active or previous builds for this project.');\n      return;\n    }\n\n    await this.logBuildStatuses({\n      jobs: buildStatus.jobs,\n      canPurchasePriorityBuilds: buildStatus.canPurchasePriorityBuilds,\n      numberOfRemainingPriorityBuilds: buildStatus.numberOfRemainingPriorityBuilds,\n      hasUnlimitedPriorityBuilds: buildStatus.hasUnlimitedPriorityBuilds,\n    });\n  }\n\n  async checkStatusBeforeBuild(): Promise<void> {\n    Log.log('Checking if this build already exists...\\n');\n\n    const reuseStatus = await findReusableBuildAsync(\n      this.options.releaseChannel!,\n      this.platform(),\n      this.manifest.sdkVersion!,\n      this.manifest.slug!,\n      this.manifest.owner\n    );\n    if (reuseStatus.canReuse) {\n      Log.warn(`Did you know that Expo provides over-the-air updates?\nPlease see the docs (${chalk.underline(\n        'https://docs.expo.io/guides/configuring-ota-updates/'\n      )}) and check if you can use them instead of building your app binaries again.`);\n\n      Log.warn(\n        `There were no new changes from the last build, you can download that build from here: ${chalk.underline(\n          reuseStatus.downloadUrl!\n        )}`\n      );\n      Log.newLine();\n    }\n  }\n\n  async logBuildStatuses(buildStatus: {\n    jobs: BuildJobFields[];\n    canPurchasePriorityBuilds?: boolean;\n    numberOfRemainingPriorityBuilds?: number;\n    hasUnlimitedPriorityBuilds?: boolean;\n  }) {\n    Log.log('=================');\n    Log.log(' Builds Statuses ');\n    Log.log('=================\\n');\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    buildStatus.jobs.forEach((job, i) => {\n      let platform, packageExtension;\n      if (job.platform === 'ios') {\n        platform = 'iOS';\n        packageExtension = 'IPA';\n      } else {\n        platform = 'Android';\n        packageExtension = 'APK';\n      }\n\n      Log.log(\n        `### ${i} | ${platform} | ${UrlUtils.constructBuildLogsUrl({\n          buildId: job.id,\n          username: username ?? undefined,\n        })} ###`\n      );\n\n      const hasPriorityBuilds =\n        (buildStatus.numberOfRemainingPriorityBuilds ?? 0) > 0 ||\n        buildStatus.hasUnlimitedPriorityBuilds;\n      const shouldShowUpgradeInfo =\n        !hasPriorityBuilds &&\n        i === 0 &&\n        job.priority === 'normal' &&\n        buildStatus.canPurchasePriorityBuilds;\n      let status;\n      switch (job.status) {\n        case 'pending':\n        case 'sent-to-queue':\n          status = `Build waiting in queue...\\nQueue length: ${chalk.underline(\n            UrlUtils.constructTurtleStatusUrl()\n          )}`;\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'started':\n          status = 'Build started...';\n          break;\n        case 'in-progress':\n          status = 'Build in progress...';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'finished':\n          status = 'Build finished.';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nLooks like this build could have been faster.\\nRead more about priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'errored':\n          status = 'There was an error with this build.';\n          if (job.id) {\n            status += `\n\nWhen requesting support, please provide this build ID:\n\n${job.id}\n`;\n          }\n          break;\n        default:\n          status = '';\n          break;\n      }\n\n      Log.log(status);\n      if (job.status === 'finished') {\n        if (job.artifacts) {\n          Log.log(`${packageExtension}: ${job.artifacts.url}`);\n        } else {\n          Log.log(`Problem getting ${packageExtension} URL. Please try to build again.`);\n        }\n      }\n      Log.log();\n    });\n  }\n\n  async ensureReleaseExists() {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        duringBuild: true,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      Log.log('Looking for releases...');\n      const release = await getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel!,\n        platform: this.platform(),\n        owner: this.manifest.owner,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `expo publish` first.');\n      }\n      Log.log(\n        `Using existing release on channel \"${release.channel}\":\\n` +\n          `publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(\n    buildId: string,\n    { interval = 30, publicUrl }: { interval?: number; publicUrl?: string } = {}\n  ): Promise<any> {\n    Log.log(\n      `Waiting for build to complete.\\nYou can press Ctrl+C to exit. It won't cancel the build, you'll be able to monitor it at the printed URL.`\n    );\n    const spinner = ora().start();\n    let i = 0;\n    while (true) {\n      i++;\n      const result = await getBuildStatusAsync(this.projectDir, {\n        current: false,\n        ...(publicUrl ? { publicUrl } : {}),\n      });\n\n      const jobs = result.jobs?.filter((job: BuildJobFields) => job.id === buildId);\n      const job = jobs ? jobs[0] : null;\n      if (job) {\n        switch (job.status) {\n          case 'finished':\n            spinner.succeed('Build finished.');\n            return job;\n          case 'pending':\n          case 'sent-to-queue':\n            spinner.text = 'Build queued...';\n            break;\n          case 'started':\n          case 'in-progress':\n            spinner.text = 'Build in progress...';\n            break;\n          case 'errored':\n            spinner.fail('Build failed.');\n            throw new BuildError(`Standalone build failed!`);\n          default:\n            spinner.warn('Unknown status.');\n            throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n        }\n      } else if (i > 5) {\n        spinner.warn('Unknown status.');\n        throw new BuildError(`Failed to locate build job for id \"${buildId}\"`);\n      }\n      await sleep(secondsToMilliseconds(interval));\n    }\n  }\n\n  async build(expIds?: string[]) {\n    const { publicUrl } = this.options;\n    const platform = this.platform();\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n\n    let opts: Record<string, any> = {\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n      ...(publicUrl ? { publicUrl } : {}),\n    };\n\n    if (platform === PLATFORMS.IOS) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n        bundleIdentifier,\n      };\n    } else if (platform === PLATFORMS.ANDROID) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n      };\n    }\n\n    // call out to build api here with url\n    const result = await startBuildAsync(this.projectDir, opts);\n\n    const { id: buildId, priority, canPurchasePriorityBuilds } = result;\n\n    Log.log('Build started, it may take a few minutes to complete.');\n    Log.log(\n      `You can check the queue length at ${chalk.underline(UrlUtils.constructTurtleStatusUrl())}\\n`\n    );\n    if (priority === 'normal' && canPurchasePriorityBuilds) {\n      Log.log(\n        'You can make this faster. 🐢\\nGet priority builds at: https://expo.io/settings/billing\\n'\n      );\n    }\n\n    const user = await UserManager.getCurrentUserAsync();\n\n    if (buildId) {\n      const url = UrlUtils.constructBuildLogsUrl({\n        buildId,\n        username: this.manifest.owner || (user?.kind === 'user' ? user.username : undefined),\n      });\n\n      Log.log(`You can monitor the build at\\n\\n ${chalk.underline(url)}\\n`);\n    }\n\n    if (this.options.wait) {\n      const waitOpts = publicUrl ? { publicUrl } : {};\n      const completedJob = await this.wait(buildId, waitOpts);\n      const artifactUrl = completedJob.artifactId\n        ? UrlUtils.constructArtifactUrl(completedJob.artifactId)\n        : completedJob.artifacts.url;\n      Log.addNewLineIfNone();\n      Log.log(\n        `${chalk.green('Successfully built standalone app:')} ${chalk.underline(artifactUrl)}`\n      );\n    } else {\n      Log.log('Alternatively, run `expo build:status` to monitor it from the command line.');\n    }\n  }\n\n  platform(): Platform {\n    return PLATFORMS.ALL;\n  }\n}\n"],"file":"BaseBuilder.js"}
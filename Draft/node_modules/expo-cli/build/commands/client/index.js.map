{"version":3,"sources":["../../../src/commands/client/index.ts"],"names":["program","command","helpGroup","description","longDescription","option","asyncActionProjectDir","projectDir","options","disabledServices","pushNotifications","name","reason","spinner","start","config","exp","skipSDKVersionRequirement","succeed","warn","ios","facebookAppId","facebookScheme","disabledReason","facebookLogin","googleMapsApiKey","googleMaps","googleServicesFile","contents","fs","readFile","path","resolve","user","UserManager","getCurrentUserAsync","context","Context","init","allowAnonymous","nonInteractive","parent","ensureAppleCtx","appleContext","appleCtx","getAllCredentials","projectOwner","isAllowed","errorMessage","appleTeamId","team","id","CommandError","bundleIdentifier","experienceName","appLookupParams","appleApi","ensureBundleIdExistsAsync","enablePushNotifications","requestContext","devices","Device","getAllIOSProfileDevicesAsync","udids","map","device","attributes","udid","distributionCert","SetupIosDist","getDistCert","CreateIosDist","accountName","provideOrGenerate","pushKey","SetupIosPush","getPushKey","provisioningProfile","createOrReuseProfile","CreateOrReuseProvisioningProfileAdhoc","distCertSerialNumber","getProvisioningProfile","createOrReuse","Object","keys","length","Log","newLine","table","CliTable","head","style","push","serviceKey","service","log","toString","email","kind","message","initial","addUdid","udidPrompt","result","customAppConfig","urlOpts","printQRCode","registrationUrl","chalk","green","statusUrl","asyncAction","forceLatest","latest","currentSdkConfig","ClientUpgradeUtils","getExpoSdkConfig","process","cwd","currentSdkVersion","sdkVersion","undefined","sdkVersions","Versions","sdkVersionsAsync","latestSdk","newestReleasedSdkVersionAsync","currentSdk","recommendedClient","getClient","latestClient","data","url","error","bold","Simulator","upgradeExpoAsync","version","recommendedClientVersion","answer","availableClients","getAvailableClients","project","platform","targetClient","askClientToInstall","latestSdkVersion","clients","clientUrl","Android"],"mappings":"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","sourcesContent":["import { Device } from '@expo/apple-utils';\nimport { getConfig, setCustomConfigPath } from '@expo/config';\nimport { Android, Simulator, User, UserManager, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport CliTable from 'cli-table3';\nimport { Command } from 'commander';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport path from 'path';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport { getRequestContext } from '../../appleApi';\nimport { getAppLookupParams } from '../../credentials/api/IosApi';\nimport { Context } from '../../credentials/context';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { CreateIosDist } from '../../credentials/views/IosDistCert';\nimport { CreateOrReuseProvisioningProfileAdhoc } from '../../credentials/views/IosProvisioningProfileAdhoc';\nimport { SetupIosDist } from '../../credentials/views/SetupIosDist';\nimport { SetupIosPush } from '../../credentials/views/SetupIosPush';\nimport Log from '../../log';\nimport { confirmAsync, promptEmailAsync } from '../../prompts';\nimport urlOpts from '../../urlOpts';\nimport * as ClientUpgradeUtils from '../utils/ClientUpgradeUtils';\nimport { createClientBuildRequest, getExperienceName, isAllowedToBuild } from './clientBuildApi';\nimport generateBundleIdentifier from './generateBundleIdentifier';\n\nexport default function (program: Command) {\n  program\n    .command('client:ios [path]')\n    .helpGroup('experimental')\n    .description(\n      'Experimental: build a custom version of Expo Go for iOS using your own Apple credentials'\n    )\n    .longDescription(\n      'Build a custom version of Expo Go for iOS using your own Apple credentials and install it on your mobile device using Safari.'\n    )\n    .option(\n      '--apple-id <login>',\n      'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).'\n    )\n    .asyncActionProjectDir(\n      async (\n        projectDir: string,\n        options: {\n          appleId?: string;\n          config?: string;\n          parent?: {\n            nonInteractive: boolean;\n          };\n        }\n      ) => {\n        const disabledServices: { [key: string]: { name: string; reason: string } } = {\n          pushNotifications: {\n            name: 'Push Notifications',\n            reason:\n              'not yet available until API tokens are supported for the Push Notification system',\n          },\n        };\n\n        // get custom project manifest if it exists\n        // Note: this is the current developer's project, NOT Expo Go's manifest\n        const spinner = ora(`Finding custom configuration for Expo Go...`).start();\n        if (options.config) {\n          setCustomConfigPath(projectDir, options.config);\n        }\n        const { exp } = getConfig(projectDir, {\n          skipSDKVersionRequirement: true,\n        });\n\n        if (exp) {\n          spinner.succeed(`Found custom configuration for Expo Go`);\n        } else {\n          spinner.warn(`Unable to find custom configuration for Expo Go`);\n        }\n        if (!exp.ios) exp.ios = {};\n\n        if (!exp.facebookAppId || !exp.facebookScheme) {\n          const disabledReason = exp\n            ? `facebookAppId or facebookScheme are missing from app configuration. `\n            : 'No custom configuration file could be found. You will need to provide a json file with valid facebookAppId and facebookScheme fields.';\n          disabledServices.facebookLogin = { name: 'Facebook Login', reason: disabledReason };\n        }\n        if (!exp.ios.config?.googleMapsApiKey) {\n          const disabledReason = exp\n            ? `ios.config.googleMapsApiKey does not exist in the app configuration.`\n            : 'No custom configuration file could be found. You will need to provide a json file with a valid ios.config.googleMapsApiKey field.';\n          disabledServices.googleMaps = { name: 'Google Maps', reason: disabledReason };\n        }\n        if (exp.ios.googleServicesFile) {\n          const contents = await fs.readFile(\n            path.resolve(projectDir, exp.ios.googleServicesFile!),\n            'base64'\n          );\n          exp.ios.googleServicesFile = contents;\n        }\n\n        const user = await UserManager.getCurrentUserAsync();\n        const context = new Context();\n        await context.init(projectDir, {\n          ...options,\n          allowAnonymous: true,\n          nonInteractive: options.parent?.nonInteractive,\n        });\n        await context.ensureAppleCtx();\n        const appleContext = context.appleCtx;\n        if (user) {\n          await context.ios.getAllCredentials(context.projectOwner); // initialize credentials\n        }\n\n        // check if any builds are in flight\n        const { isAllowed, errorMessage } = await isAllowedToBuild({\n          user,\n          appleTeamId: appleContext.team.id,\n        });\n\n        if (!isAllowed) {\n          throw new CommandError(\n            'CLIENT_BUILD_REQUEST_NOT_ALLOWED',\n            `New Expo client build request disallowed. Reason: ${errorMessage}`\n          );\n        }\n\n        const bundleIdentifier = generateBundleIdentifier(appleContext.team.id);\n        const experienceName = await getExperienceName({ user, appleTeamId: appleContext.team.id });\n        const appLookupParams = getAppLookupParams(experienceName, bundleIdentifier);\n\n        await appleApi.ensureBundleIdExistsAsync(appleContext, appLookupParams, {\n          enablePushNotifications: true,\n        });\n\n        const requestContext = getRequestContext(appleContext);\n        const devices = await Device.getAllIOSProfileDevicesAsync(requestContext);\n        const udids = devices.map(device => device.attributes.udid);\n\n        let distributionCert;\n        if (user) {\n          await runCredentialsManager(context, new SetupIosDist(appLookupParams));\n          distributionCert = await context.ios.getDistCert(appLookupParams);\n        } else {\n          distributionCert = await new CreateIosDist(appLookupParams.accountName).provideOrGenerate(\n            context\n          );\n        }\n        if (!distributionCert) {\n          throw new CommandError(\n            'INSUFFICIENT_CREDENTIALS',\n            `This build request requires a valid distribution certificate.`\n          );\n        }\n\n        let pushKey;\n        if (user) {\n          await runCredentialsManager(context, new SetupIosPush(appLookupParams));\n          pushKey = await context.ios.getPushKey(appLookupParams);\n        }\n\n        let provisioningProfile;\n        const createOrReuseProfile = new CreateOrReuseProvisioningProfileAdhoc(appLookupParams, {\n          distCertSerialNumber: distributionCert.distCertSerialNumber!,\n          udids,\n        });\n        if (user) {\n          await runCredentialsManager(context, createOrReuseProfile);\n          provisioningProfile = await context.ios.getProvisioningProfile(appLookupParams);\n        } else {\n          provisioningProfile = await createOrReuseProfile.createOrReuse(context);\n        }\n        if (!provisioningProfile) {\n          throw new CommandError(\n            'INSUFFICIENT_CREDENTIALS',\n            `This build request requires a valid provisioning profile.`\n          );\n        }\n\n        // push notifications won't work if we dont have any push creds\n        // we also dont store anonymous creds, so user needs to be logged in\n        if (pushKey === null || !user) {\n          const disabledReason =\n            pushKey === null\n              ? 'you did not upload your push credentials'\n              : 'we require you to be logged in to store push credentials';\n          // TODO(quin): remove this when we fix push notifications\n          // keep the default push notification reason if we haven't implemented API tokens\n          disabledServices.pushNotifications.reason =\n            disabledServices.pushNotifications.reason || disabledReason;\n        }\n\n        if (Object.keys(disabledServices).length > 0) {\n          Log.newLine();\n          Log.warn('These services will be disabled in your custom Expo client:');\n          const table = new CliTable({ head: ['Service', 'Reason'], style: { head: ['cyan'] } });\n          table.push(\n            ...Object.keys(disabledServices).map(serviceKey => {\n              const service = disabledServices[serviceKey];\n              return [service.name, service.reason];\n            })\n          );\n          Log.log(table.toString());\n          Log.log(\n            'See https://docs.expo.io/guides/adhoc-builds/#optional-additional-configuration-steps for more details.'\n          );\n        }\n\n        let email;\n        if (user && user.kind === 'user') {\n          email = user.email;\n        } else {\n          email = await promptEmailAsync({\n            message: 'Please enter an email address to notify, when the build is completed:',\n            initial: (context?.user as User)?.email,\n          });\n        }\n        Log.newLine();\n\n        let addUdid;\n        if (udids.length === 0) {\n          Log.log(\n            'There are no devices registered to your Apple Developer account. Please follow the instructions below to register an iOS device.'\n          );\n          addUdid = true;\n        } else {\n          Log.log(\n            'Custom builds of Expo Go can only be installed on devices which have been registered with Apple at build-time.'\n          );\n          Log.log('These devices are currently registered on your Apple Developer account:');\n          const table = new CliTable({ head: ['Name', 'Identifier'], style: { head: ['cyan'] } });\n          table.push(...devices.map(device => [device.attributes.name, device.attributes.udid]));\n          Log.log(table.toString());\n\n          const udidPrompt = await confirmAsync({\n            message: 'Would you like to register a new device to use Expo Go with?',\n          });\n          addUdid = udidPrompt;\n        }\n\n        const result = await createClientBuildRequest({\n          user,\n          appleContext,\n          distributionCert,\n          provisioningProfile,\n          pushKey,\n          udids,\n          addUdid,\n          email,\n          bundleIdentifier,\n          customAppConfig: exp,\n        });\n\n        Log.newLine();\n        if (addUdid) {\n          urlOpts.printQRCode(result.registrationUrl);\n          Log.log(\n            'Open the following link on your iOS device (or scan the QR code) and follow the instructions to install the development profile:'\n          );\n          Log.newLine();\n          Log.log(chalk.green(`${result.registrationUrl}`));\n          Log.newLine();\n          Log.log('Please note that you can only register one iOS device per request.');\n          Log.log(\n            \"After you register your device, we'll start building your client, and you'll receive an email when it's ready to install.\"\n          );\n        } else {\n          urlOpts.printQRCode(result.statusUrl);\n          Log.log('Your custom Expo client is being built! 🛠');\n          Log.log(\n            'Open this link on your iOS device (or scan the QR code) to view build logs and install the client:'\n          );\n          Log.newLine();\n          Log.log(chalk.green(`${result.statusUrl}`));\n        }\n        Log.newLine();\n      }\n    );\n\n  program\n    .command('client:install:ios')\n    .description('Install Expo Go for iOS on the simulator')\n    .option(\n      '--latest',\n      `Install the latest version of Expo client, ignoring the current project version.`\n    )\n    .helpGroup('client')\n    .asyncAction(async (command: Command) => {\n      const forceLatest = !!command.latest;\n      const currentSdkConfig = await ClientUpgradeUtils.getExpoSdkConfig(process.cwd());\n      const currentSdkVersion = currentSdkConfig ? currentSdkConfig.sdkVersion : undefined;\n      const sdkVersions = await Versions.sdkVersionsAsync();\n      const latestSdk = await Versions.newestReleasedSdkVersionAsync();\n      const currentSdk = sdkVersions[currentSdkVersion!];\n      const recommendedClient = ClientUpgradeUtils.getClient('ios', currentSdk);\n      const latestClient = ClientUpgradeUtils.getClient('ios', latestSdk.data);\n\n      if (forceLatest) {\n        if (!latestClient?.url) {\n          Log.error(\n            `Unable to find latest client version. Check your internet connection or run this command again without the ${chalk.bold(\n              '--latest'\n            )} flag.`\n          );\n          return;\n        }\n\n        if (\n          await Simulator.upgradeExpoAsync({ url: latestClient.url, version: latestClient.version })\n        ) {\n          Log.log('Done!');\n        } else {\n          Log.error(`Unable to install Expo client ${latestClient.version} for iOS.`);\n        }\n        return;\n      }\n\n      if (!currentSdkVersion) {\n        Log.log(\n          'Could not find your Expo project. If you run this from a project, we can help pick the right Expo client version!'\n        );\n      }\n\n      if (currentSdk && !recommendedClient) {\n        Log.log(\n          `You are currently using SDK ${currentSdkVersion}. Unfortunately, we couldn't detect the proper client version for this SDK.`\n        );\n      }\n\n      if (currentSdk && recommendedClient) {\n        const recommendedClientVersion = recommendedClient.version || 'version unknown';\n        const answer = await confirmAsync({\n          message: `You are currently using SDK ${currentSdkVersion}. Would you like to install client ${recommendedClientVersion} released for this SDK?`,\n        });\n        if (answer) {\n          await Simulator.upgradeExpoAsync({\n            url: recommendedClient.url,\n            version: recommendedClient.version,\n          });\n          Log.log('Done!');\n          return;\n        }\n      } else {\n        const answer = await confirmAsync({\n          message: latestClient?.version\n            ? chalk`Do you want to install the latest client? {dim (${latestClient.version})}`\n            : 'Do you want to install the latest client?',\n        });\n        if (answer) {\n          await Simulator.upgradeExpoAsync({\n            url: latestClient?.url,\n            version: latestClient?.version,\n          });\n          Log.log('Done!');\n          return;\n        }\n      }\n\n      const availableClients = ClientUpgradeUtils.getAvailableClients({\n        sdkVersions,\n        project: currentSdkConfig,\n        platform: 'ios',\n      });\n\n      if (availableClients.length === 0) {\n        const answer = await confirmAsync({\n          message: currentSdk\n            ? `We don't have a compatible client for SDK ${currentSdkVersion}. Do you want to try the latest client?`\n            : \"It looks like we don't have a compatible client. Do you want to try the latest client?\",\n        });\n        if (answer) {\n          await Simulator.upgradeExpoAsync({\n            url: latestClient?.url,\n            version: latestClient?.version,\n          });\n          Log.log('Done!');\n        } else {\n          Log.log('No client to install');\n        }\n        return;\n      }\n\n      const targetClient = await ClientUpgradeUtils.askClientToInstall({\n        currentSdkVersion,\n        latestSdkVersion: latestSdk.version,\n        clients: availableClients,\n      });\n\n      if (await Simulator.upgradeExpoAsync({ url: targetClient.clientUrl })) {\n        Log.log('Done!');\n      }\n    });\n\n  program\n    .command('client:install:android')\n    .description('Install Expo Go for Android on a connected device or emulator')\n    .option(\n      '--latest',\n      `Install the latest version of Expo client, ignore the current project version.`\n    )\n    .helpGroup('client')\n    .asyncAction(async (command: Command) => {\n      const forceLatest = !!command.latest;\n      const currentSdkConfig = await ClientUpgradeUtils.getExpoSdkConfig(process.cwd());\n      const currentSdkVersion = currentSdkConfig ? currentSdkConfig.sdkVersion : undefined;\n      const sdkVersions = await Versions.sdkVersionsAsync();\n      const latestSdk = await Versions.newestReleasedSdkVersionAsync();\n      const currentSdk = sdkVersions[currentSdkVersion!];\n      const recommendedClient = ClientUpgradeUtils.getClient('android', currentSdk);\n      const latestClient = ClientUpgradeUtils.getClient('android', latestSdk.data);\n\n      if (forceLatest) {\n        if (!latestClient?.url) {\n          Log.error(\n            `Unable to find latest client version. Check your internet connection or run this command again without the ${chalk.bold(\n              '--latest'\n            )} flag.`\n          );\n          return;\n        }\n\n        if (\n          await Android.upgradeExpoAsync({ url: latestClient.url, version: latestClient.version })\n        ) {\n          Log.log('Done!');\n        } else {\n          Log.error(`Unable to install Expo client ${latestClient.version} for Android.`);\n        }\n\n        return;\n      }\n\n      if (!currentSdkVersion) {\n        Log.log(\n          'Could not find your Expo project. If you run this from a project, we can help pick the right Expo client version!'\n        );\n      }\n\n      if (currentSdk && !recommendedClient) {\n        Log.log(\n          `You are currently using SDK ${currentSdkVersion}. Unfortunately, we couldn't detect the proper client version for this SDK.`\n        );\n      }\n\n      if (currentSdk && recommendedClient) {\n        const recommendedClientVersion = recommendedClient.version || 'version unknown';\n        const answer = await confirmAsync({\n          message: `You are currently using SDK ${currentSdkVersion}. Would you like to install client ${recommendedClientVersion} released for this SDK?`,\n        });\n        if (answer) {\n          await Android.upgradeExpoAsync({\n            url: recommendedClient.url,\n            version: recommendedClient.version,\n          });\n          Log.log('Done!');\n          return;\n        }\n      } else {\n        const answer = await confirmAsync({\n          message: latestClient?.version\n            ? chalk`Do you want to install the latest client? {dim (${latestClient.version})}`\n            : 'Do you want to install the latest client?',\n        });\n        if (answer) {\n          await Android.upgradeExpoAsync({\n            url: latestClient?.url,\n            version: latestClient?.version,\n          });\n          Log.log('Done!');\n          return;\n        }\n      }\n\n      const availableClients = ClientUpgradeUtils.getAvailableClients({\n        sdkVersions,\n        project: currentSdkConfig,\n        platform: 'android',\n      });\n\n      if (availableClients.length === 0) {\n        const answer = await confirmAsync({\n          message: currentSdk\n            ? `We don't have a compatible client for SDK ${currentSdkVersion}. Do you want to try the latest client?`\n            : \"It looks like we don't have a compatible client. Do you want to try the latest client?\",\n        });\n        if (answer) {\n          await Android.upgradeExpoAsync({\n            url: latestClient?.url,\n            version: latestClient?.version,\n          });\n          Log.log('Done!');\n        } else {\n          Log.log('No client to install');\n        }\n        return;\n      }\n\n      const targetClient = await ClientUpgradeUtils.askClientToInstall({\n        currentSdkVersion,\n        latestSdkVersion: latestSdk.version,\n        clients: availableClients,\n      });\n\n      if (await Android.upgradeExpoAsync({ url: targetClient.clientUrl })) {\n        Log.log('Done!');\n      }\n    });\n}\n"],"file":"index.js"}
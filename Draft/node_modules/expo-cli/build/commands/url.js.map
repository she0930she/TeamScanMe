{"version":3,"sources":["../../src/commands/url.ts"],"names":["assertHTTPS","url","UrlUtils","isHttps","CommandError","assertProjectRunningAsync","projectRoot","ProjectSettings","getCurrentStatusAsync","logArtifactUrl","platform","options","publicUrl","result","current","jobs","filter","job","artifacts","Log","nested","getWebAppUrlAsync","constructWebAppUrlAsync","logUrl","newLine","urlOpts","printQRCode","log","chalk","underline","action","optsAsync","web","constructDeepLinkAsync","handleMobileOptsAsync","program","command","alias","helpGroup","option","description","allowOffline","asyncActionProjectDir"],"mappings":"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","sourcesContent":["import { ProjectSettings, UrlUtils } from '@expo/xdl';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport CommandError from '../CommandError';\nimport Log from '../log';\nimport printRunInstructionsAsync from '../printRunInstructionsAsync';\nimport urlOpts, { URLOptions } from '../urlOpts';\nimport { BuildJobFields, getBuildStatusAsync } from './build/getBuildStatusAsync';\n\ntype ProjectUrlOptions = Command & {\n  web?: boolean;\n};\n\ntype ArtifactUrlOptions = {\n  publicUrl?: string;\n};\n\nfunction assertHTTPS(url?: string) {\n  if (url && !UrlUtils.isHttps(url)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  }\n}\n\nasync function assertProjectRunningAsync(projectRoot: string) {\n  if ((await ProjectSettings.getCurrentStatusAsync(projectRoot)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`expo start\\`.`\n    );\n  }\n}\n\nconst logArtifactUrl = (platform: 'ios' | 'android') => async (\n  projectRoot: string,\n  options: ArtifactUrlOptions\n) => {\n  assertHTTPS(options.publicUrl);\n\n  const result = await getBuildStatusAsync(projectRoot, {\n    current: false,\n    ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n  });\n\n  const url = result.jobs?.filter((job: BuildJobFields) => job.platform === platform)[0]?.artifacts\n    ?.url;\n\n  if (!url) {\n    throw new CommandError(\n      `No ${platform} binary file found. Use \"expo build:${platform}\" to create one.`\n    );\n  }\n\n  Log.nested(url);\n};\n\nasync function getWebAppUrlAsync(projectRoot: string): Promise<string> {\n  const url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n  if (!url) {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Webpack dev server is not running. Please start it with \\`expo start:web\\`.`\n    );\n  }\n  return url;\n}\n\nfunction logUrl(url: string) {\n  Log.newLine();\n\n  urlOpts.printQRCode(url);\n\n  Log.log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n}\n\nasync function action(projectRoot: string, options: ProjectUrlOptions & URLOptions) {\n  await urlOpts.optsAsync(projectRoot, options);\n\n  await assertProjectRunningAsync(projectRoot);\n\n  const url = options.web\n    ? await getWebAppUrlAsync(projectRoot)\n    : await UrlUtils.constructDeepLinkAsync(projectRoot);\n\n  logUrl(url);\n\n  if (!options.web) {\n    await printRunInstructionsAsync();\n    await urlOpts.handleMobileOptsAsync(projectRoot, options);\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('url [path]')\n    .alias('u')\n    .helpGroup('url')\n\n    .option('-w, --web', 'Return the URL of the web app')\n    .description('Log a URL for opening the project in Expo Go')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action);\n\n  program\n    .command('url:ipa [path]')\n    .helpGroup('url')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description('Log the download URL for the standalone iOS binary')\n    .asyncActionProjectDir(logArtifactUrl('ios'));\n\n  program\n    .command('url:apk [path]')\n    .helpGroup('url')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description('Log the download URL for the standalone Android binary')\n    .asyncActionProjectDir(logArtifactUrl('android'));\n}\n"],"file":"url.js"}
{"version":3,"sources":["../../../src/commands/utils/deprecatedExtensionWarnings.ts"],"names":["queryExpoExtensionFilesAsync","projectRoot","ignore","Promise","resolve","reject","absolute","cwd","error","matches","assertProjectHasExpoExtensionFilesAsync","checkNodeModules","assertModulesHasExpoExtensionFilesAsync","Log","time","catch","timeEnd","length","promptMatchesAsync","spinner","start","root","filter","value","includes","match","succeed","fail","logMatchedFiles","hasNodeModules","find","chalk","red","bold","reset","map","join","dim","program","nonInteractive","message","initial","SilentError"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport glob from 'glob';\nimport ora from 'ora';\n\nimport { SilentError } from '../../CommandError';\nimport Log from '../../log';\nimport { confirmAsync } from '../../prompts';\n\nfunction queryExpoExtensionFilesAsync(projectRoot: string, ignore: string[]): Promise<string[]> {\n  return new Promise((resolve, reject) => {\n    glob(\n      '**/*.expo.@(js|jsx|ts|tsx)',\n      {\n        absolute: true,\n        ignore,\n        cwd: projectRoot,\n      },\n      (error, matches) => {\n        if (error) reject(error);\n        else resolve(matches);\n      }\n    );\n  });\n}\n\nexport async function assertProjectHasExpoExtensionFilesAsync(\n  projectRoot: string,\n  checkNodeModules: boolean = false\n) {\n  if (checkNodeModules) {\n    await assertModulesHasExpoExtensionFilesAsync(projectRoot);\n  } else {\n    Log.time('assertProjectHasExpoExtensionFilesAsync');\n    const matches = await queryExpoExtensionFilesAsync(projectRoot, [\n      `**/@(Carthage|Pods|node_modules|ts-declarations|.expo)/**`,\n      '@(ios|android|web)/**',\n    ]).catch(() => [] as string[]);\n    Log.timeEnd('assertProjectHasExpoExtensionFilesAsync');\n    if (matches.length) {\n      await promptMatchesAsync(matches);\n    }\n  }\n}\n\nasync function assertModulesHasExpoExtensionFilesAsync(projectRoot: string) {\n  const spinner = ora('Checking project for deprecated features, this may take a moment.').start();\n  const root = findWorkspaceRoot(projectRoot) || projectRoot;\n\n  Log.time('assertModulesHasExpoExtensionFilesAsync');\n  let matches = await queryExpoExtensionFilesAsync(root, [\n    `**/@(Carthage|Pods|ts-declarations|.expo)/**`,\n    '@(ios|android|web)/**',\n  ]).catch(() => [] as string[]);\n  Log.timeEnd('assertModulesHasExpoExtensionFilesAsync');\n  matches = matches.filter(value => {\n    if (value.includes('node_modules')) {\n      // Remove duplicate files from packages compiled with bob\n      return !value.match(/node_modules\\/.*\\/lib\\/commonjs/g);\n    }\n    return true;\n  });\n\n  if (!matches.length) {\n    spinner.succeed('Validated project');\n    return;\n  } else {\n    spinner.fail('Found project files with deprecated features');\n  }\n\n  logMatchedFiles(matches);\n}\n\nfunction logMatchedFiles(matches: string[]) {\n  const hasNodeModules = matches.find(match => match.includes('node_modules/'));\n  Log.error(\n    chalk.red(\n      `Project is using deprecated ${chalk.bold`.expo.*`} file extensions.\\nPlease refactor the following files${\n        hasNodeModules ? ' and upgrade modules' : ''\n      } accordingly:\\n\\n`\n    ) +\n      chalk.reset(\n        matches.map(match => `- ${match}`).join('\\n') +\n          chalk.dim(\n            `\\n\\nDangerously disable this check with ${chalk.bold(\n              `EXPO_LEGACY_IMPORTS=1`\n            )}\\nLearn more: http://expo.fyi/expo-extension-migration\\n`\n          )\n      )\n  );\n}\n\nasync function promptMatchesAsync(matches: string[]) {\n  logMatchedFiles(matches);\n\n  // Skip in nonInteractive to give users a bypass\n  if (\n    program.nonInteractive ||\n    (await confirmAsync({ message: 'Would you like to continue anyways?', initial: true }))\n  ) {\n    return;\n  }\n\n  throw new SilentError();\n}\n"],"file":"deprecatedExtensionWarnings.js"}
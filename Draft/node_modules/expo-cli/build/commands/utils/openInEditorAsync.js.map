{"version":3,"sources":["../../../src/commands/utils/openInEditorAsync.ts"],"names":["guessEditor","process","env","EXPO_EDITOR","editors","getEditor","defaultEditor","openInEditorAsync","path","options","editor","platform","osascript","name","Log","error","stdio","isTerminalEditor","editorProcess","binary","detached","child","unref"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,SAASA,WAAT,GAAuB;AACrB,MAAIC,OAAO,CAACC,GAAR,CAAYC,WAAhB,EAA6B;AAC3B,WAAOC,qBAAQC,SAAR,CAAkBJ,OAAO,CAACC,GAAR,CAAYC,WAA9B,CAAP;AACD;;AAED,MAAI;AACF,WAAOC,qBAAQE,aAAR,EAAP;AACD,GAFD,CAEE,gBAAM;AACN,WAAOF,qBAAQC,SAAR,CAAkB,QAAlB,CAAP;AACD;AACF;;AAEM,eAAeE,iBAAf,CAAiCC,IAAjC,EAA+CC,OAA4B,GAAG,EAA9E,EAAkF;AACvF,QAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,GAAiBN,qBAAQC,SAAR,CAAkBI,OAAO,CAACC,MAA1B,CAAjB,GAAqDV,WAAW,EAA/E;;AAEA,MAAIC,OAAO,CAACU,QAAR,KAAqB,QAAzB,EAAmC;AACjC;AACA;AACA,UAAMC,SAAS,GAACL,iBAAV,CAA4BC,IAA5B,EAAkCE,MAAM,CAACG,IAAzC,CAAN;AACD;;AAED,MAAI,CAACH,MAAL,EAAa;AACXI,mBAAIC,KAAJ,CACE,kHADF;;AAGA;AACD;;AAED,QAAMC,KAAK,GAAGN,MAAM,CAACO,gBAAP,GAA0B,SAA1B,GAAsC,QAApD;AACA,QAAMC,aAAa,GAAG,2BAAWR,MAAM,CAACS,MAAlB,EAA0B,CAACX,IAAD,CAA1B,EAAkC;AAAEQ,IAAAA,KAAF;AAASI,IAAAA,QAAQ,EAAE;AAAnB,GAAlC,CAAtB;AACAF,EAAAA,aAAa,CAACG,KAAd,CAAoBC,KAApB;AACA,SAAOJ,aAAP;AACD","sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport editors from 'env-editor';\n\nimport Log from '../../log';\n\nfunction guessEditor() {\n  if (process.env.EXPO_EDITOR) {\n    return editors.getEditor(process.env.EXPO_EDITOR);\n  }\n\n  try {\n    return editors.defaultEditor();\n  } catch {\n    return editors.getEditor('vscode');\n  }\n}\n\nexport async function openInEditorAsync(path: string, options: { editor?: string } = {}) {\n  const editor = options.editor ? editors.getEditor(options.editor) : guessEditor();\n\n  if (process.platform === 'darwin') {\n    // This will use the ENV var $EXPO_EDITOR if set, or else will try various\n    // popular editors, looking for one that is open, or if none are, one that is installed\n    await osascript.openInEditorAsync(path, editor.name);\n  }\n\n  if (!editor) {\n    Log.error(\n      'Could not find your editor, you can set it by defining $EXPO_EDITOR environment variable (e.g. \"code\" or \"atom\")'\n    );\n    return;\n  }\n\n  const stdio = editor.isTerminalEditor ? 'inherit' : 'ignore';\n  const editorProcess = spawnAsync(editor.binary, [path], { stdio, detached: true });\n  editorProcess.child.unref();\n  return editorProcess;\n}\n"],"file":"openInEditorAsync.js"}
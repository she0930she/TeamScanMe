{"version":3,"sources":["../../../../src/commands/utils/typescript/resolveModules.ts"],"names":["fileExistsAsync","file","catch","isFile","requiredPackages","pkg","baseTSConfigName","queryFirstProjectTypeScriptFileAsync","projectRoot","Promise","resolve","reject","mg","Glob","cwd","ignore","error","matches","once","matched","abort","resolveBaseTSConfig","resolveFrom","silent","hasTSConfig","tsConfigPath","path","join","collectMissingPackages","resolutions","missingPackages","filter","p","missing"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,eAAeA,eAAf,CAA+BC,IAA/B,EAA+D;AAAA;;AAC7D,uDAAQ,MAAM,qBAAKA,IAAL,EAAWC,KAAX,CAAiB,MAAM,IAAvB,CAAd,sDAAO,kBAAsCC,MAAtC,EAAP,yEAAyD,KAAzD;AACD;;AAED,MAAMC,gBAAgB,GAAG,CACvB;AACA;AACA;AAAEH,EAAAA,IAAI,EAAE,yBAAR;AAAmCI,EAAAA,GAAG,EAAE;AAAxC,CAHuB,EAIvB;AAAEJ,EAAAA,IAAI,EAAE,yBAAR;AAAmCI,EAAAA,GAAG,EAAE;AAAxC,CAJuB,EAKvB;AAAEJ,EAAAA,IAAI,EAAE,gCAAR;AAA0CI,EAAAA,GAAG,EAAE;AAA/C,CALuB,CAAzB;AAQO,MAAMC,gBAAgB,GAAG,oBAAzB;;;AAEA,eAAeC,oCAAf,CACLC,WADK,EAEmB;AACxB,SAAO,IAAIC,OAAJ,CAA2B,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrD,UAAMC,EAAE,GAAG,KAAIC,YAAJ,EACT,gBADS,EAET;AACEC,MAAAA,GAAG,EAAEN,WADP;AAEEO,MAAAA,MAAM,EAAE,CACN,qCADM,EAEN,WAFM,EAGN,sCAHM;AAFV,KAFS,EAUT,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAClB,UAAID,KAAJ,EAAW;AACTL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACD,OAFD,MAEO;AAAA;;AACLN,QAAAA,OAAO,cAACO,OAAO,CAAC,CAAD,CAAR,iDAAe,IAAf,CAAP;AACD;AACF,KAhBQ,CAAX;AAkBAL,IAAAA,EAAE,CAACM,IAAH,CAAQ,OAAR,EAAiBC,OAAO,IAAI;AAC1BP,MAAAA,EAAE,CAACQ,KAAH;AACAV,MAAAA,OAAO,CAACS,OAAD,CAAP;AACD,KAHD;AAID,GAvBM,CAAP;AAwBD;;AAEM,SAASE,mBAAT,CAA6Bb,WAA7B,EAAiE;AAAA;;AACtE,gCAAOc,uBAAYC,MAAZ,CAAmBf,WAAnB,EAAgC,yBAAhC,CAAP,qEAAqE,IAArE;AACD;;AAEM,eAAegB,WAAf,CAA2BhB,WAA3B,EAAwE;AAC7E,QAAMiB,YAAY,GAAGC,IAAI,GAACC,IAAL,CAAUnB,WAAV,EAAuB,eAAvB,CAArB;;AACA,MAAI,MAAMR,eAAe,CAACyB,YAAD,CAAzB,EAAyC;AACvC,WAAOA,YAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAEM,SAASG,sBAAT,CACLpB,WADK,EASL;AACA,QAAMqB,WAAmC,GAAG,EAA5C;AAEA,QAAMC,eAAe,GAAG1B,gBAAgB,CAAC2B,MAAjB,CAAwBC,CAAC,IAAI;AACnD,QAAI;AACFH,MAAAA,WAAW,CAACG,CAAC,CAAC3B,GAAH,CAAX,GAAqB,4BAAYG,WAAZ,EAAyBwB,CAAC,CAAC/B,IAA3B,CAArB;AACA,aAAO,KAAP;AACD,KAHD,CAGE,gBAAM;AACN,aAAO,IAAP;AACD;AACF,GAPuB,CAAxB;AASA,SAAO;AAAEgC,IAAAA,OAAO,EAAEH,eAAX;AAA4BD,IAAAA;AAA5B,GAAP;AACD","sourcesContent":["import { stat } from 'fs-extra';\nimport { Glob } from 'glob';\nimport * as path from 'path';\nimport resolveFrom from 'resolve-from';\n\nasync function fileExistsAsync(file: string): Promise<boolean> {\n  return (await stat(file).catch(() => null))?.isFile() ?? false;\n}\n\nconst requiredPackages = [\n  // use typescript/package.json to skip node module cache issues when the user installs\n  // the package and attempts to resolve the module in the same process.\n  { file: 'typescript/package.json', pkg: 'typescript' },\n  { file: '@types/react/index.d.ts', pkg: '@types/react' },\n  { file: '@types/react-native/index.d.ts', pkg: '@types/react-native' },\n];\n\nexport const baseTSConfigName = 'expo/tsconfig.base';\n\nexport async function queryFirstProjectTypeScriptFileAsync(\n  projectRoot: string\n): Promise<null | string> {\n  return new Promise<null | string>((resolve, reject) => {\n    const mg = new Glob(\n      '**/*.@(ts|tsx)',\n      {\n        cwd: projectRoot,\n        ignore: [\n          '**/@(Carthage|Pods|node_modules)/**',\n          '**/*.d.ts',\n          '@(ios|android|web|web-build|dist)/**',\n        ],\n      },\n      (error, matches) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(matches[0] ?? null);\n        }\n      }\n    );\n    mg.once('match', matched => {\n      mg.abort();\n      resolve(matched);\n    });\n  });\n}\n\nexport function resolveBaseTSConfig(projectRoot: string): string | null {\n  return resolveFrom.silent(projectRoot, 'expo/tsconfig.base.json') ?? null;\n}\n\nexport async function hasTSConfig(projectRoot: string): Promise<string | null> {\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n  if (await fileExistsAsync(tsConfigPath)) {\n    return tsConfigPath;\n  }\n  return null;\n}\n\nexport function collectMissingPackages(\n  projectRoot: string\n): {\n  missing: {\n    file: string;\n    pkg: string;\n    version?: string;\n  }[];\n  resolutions: Record<string, string>;\n} {\n  const resolutions: Record<string, string> = {};\n\n  const missingPackages = requiredPackages.filter(p => {\n    try {\n      resolutions[p.pkg] = resolveFrom(projectRoot, p.file);\n      return false;\n    } catch {\n      return true;\n    }\n  });\n\n  return { missing: missingPackages, resolutions };\n}\n"],"file":"resolveModules.js"}
{"version":3,"sources":["../../../src/commands/eject/platformOptions.ts"],"names":["getDefaultPlatforms","platforms","process","platform","push","platformsFromPlatform","Log","warn","CommandError","ensureValidPlatforms","isWindows","includes","chalk","bold","newLine","filter","assertPlatforms","length"],"mappings":";;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,SAASA,mBAAT,GAA8C;AAC5C,QAAMC,SAAwB,GAAG,CAAC,SAAD,CAAjC;;AACA,MAAIC,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AAChCF,IAAAA,SAAS,CAACG,IAAV,CAAe,KAAf;AACD;;AACD,SAAOH,SAAP;AACD;;AAEM,SAASI,qBAAT,CAA+BF,QAA/B,EAAiE;AACtE,MAAI,CAACA,QAAL,EAAe;AACb,WAAOH,mBAAmB,EAA1B;AACD;;AACD,UAAQG,QAAR;AACE,SAAK,KAAL;AACE,UAAID,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AAChCG,uBAAIC,IAAJ,CAAS,mEAAT,EADgC,CAEhC;;AACD;;AACD,aAAO,CAAC,KAAD,CAAP;;AACF,SAAK,SAAL;AACE,aAAO,CAAC,SAAD,CAAP;;AACF,SAAK,KAAL;AACE,aAAOP,mBAAmB,EAA1B;;AACF;AACE,YAAM,KAAIQ,uBAAJ,EAAkB,yBAAwBL,QAAS,mCAAnD,CAAN;AAZJ;AAcD;;AAEM,SAASM,oBAAT,CAA8BR,SAA9B,EAAuE;AAC5E,QAAMS,SAAS,GAAGR,OAAO,CAACC,QAAR,KAAqB,OAAvC,CAD4E,CAE5E;;AACA,MAAIO,SAAS,IAAIT,SAAS,CAACU,QAAV,CAAmB,KAAnB,CAAjB,EAA4C;AAC1CL,mBAAIC,IAAJ,CACG,6DAA4DK,iBAAMC,IAAN,CAC3D,YAD2D,CAE3D,yDAHJ;;AAKAP,mBAAIQ,OAAJ;;AACA,WAAOb,SAAS,CAACc,MAAV,CAAiBZ,QAAQ,IAAIA,QAAQ,KAAK,KAA1C,CAAP;AACD;;AACD,SAAOF,SAAP;AACD;;AAEM,SAASe,eAAT,CAAyBf,SAAzB,EAAmD;AACxD,MAAI,EAACA,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEgB,MAAZ,CAAJ,EAAwB;AACtB,UAAM,KAAIT,uBAAJ,EAAiB,oDAAjB,CAAN;AACD;AACF","sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\n\nfunction getDefaultPlatforms(): ModPlatform[] {\n  const platforms: ModPlatform[] = ['android'];\n  if (process.platform !== 'win32') {\n    platforms.push('ios');\n  }\n  return platforms;\n}\n\nexport function platformsFromPlatform(platform?: string): ModPlatform[] {\n  if (!platform) {\n    return getDefaultPlatforms();\n  }\n  switch (platform) {\n    case 'ios':\n      if (process.platform === 'win32') {\n        Log.warn('Ejecting is unsupported locally on windows, use eas build instead');\n        // continue anyways :shrug:\n      }\n      return ['ios'];\n    case 'android':\n      return ['android'];\n    case 'all':\n      return getDefaultPlatforms();\n    default:\n      throw new CommandError(`Unsupported platform \"${platform}\". Options are: ios, android, all`);\n  }\n}\n\nexport function ensureValidPlatforms(platforms: ModPlatform[]): ModPlatform[] {\n  const isWindows = process.platform === 'win32';\n  // Skip ejecting for iOS on Windows\n  if (isWindows && platforms.includes('ios')) {\n    Log.warn(\n      `⚠️  Skipping generating the iOS native project files. Run ${chalk.bold(\n        'expo eject'\n      )} again from macOS or Linux to generate the iOS project.`\n    );\n    Log.newLine();\n    return platforms.filter(platform => platform !== 'ios');\n  }\n  return platforms;\n}\n\nexport function assertPlatforms(platforms: ModPlatform[]) {\n  if (!platforms?.length) {\n    throw new CommandError('At least one platform must be enabled when syncing');\n  }\n}\n"],"file":"platformOptions.js"}
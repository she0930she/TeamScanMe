{"version":3,"sources":["../../../src/commands/eject/updatePackageJson.ts"],"names":["updatePackageJSONAsync","projectRoot","tempDir","pkg","updatingPackageJsonStep","CreateApp","logNewSection","updatePackageJSONScripts","results","updatePackageJSONDependencies","removedPkgMain","updatePackageJSONEntryPoint","fs","writeFile","path","resolve","JSON","stringify","succeed","Log","log","chalk","bold","newLine","devDependencies","dependencies","defaultDependencies","createDependenciesMap","defaultDevDependencies","combinedDependencies","requiredDependencies","symlinkedPackages","dependenciesKey","moduleId","isSilent","push","length","map","join","combinedDevDependencies","hasNewDependencies","hashForDependencyMap","hasNewDevDependencies","Object","assign","Error","outputMap","key","keys","value","scripts","start","ios","android","shouldDeleteMainField","main","isPkgMainExpoAppEntry","input","startsWith","includes","normalizeDependencyMap","deps","dependency","sort","depsList","depsString","createFileHash","contents","crypto","createHash","update","digest"],"mappings":"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","sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport Log from '../../log';\nimport * as CreateApp from '../utils/CreateApp';\nimport { isModuleSymlinked } from '../utils/isModuleSymlinked';\n\ntype DependenciesMap = { [key: string]: string | number };\n\nexport type DependenciesModificationResults = {\n  hasNewDependencies: boolean;\n  hasNewDevDependencies: boolean;\n};\n\nexport async function updatePackageJSONAsync({\n  projectRoot,\n  tempDir,\n  pkg,\n}: {\n  projectRoot: string;\n  tempDir: string;\n  pkg: PackageJSONConfig;\n}): Promise<DependenciesModificationResults> {\n  // NOTE(brentvatne): Removing spaces between steps for now, add back when\n  // there is some additional context for steps\n  const updatingPackageJsonStep = CreateApp.logNewSection(\n    'Updating your package.json scripts, dependencies, and main file'\n  );\n\n  updatePackageJSONScripts({ pkg });\n\n  const results = updatePackageJSONDependencies({ projectRoot, pkg, tempDir });\n\n  const removedPkgMain = updatePackageJSONEntryPoint({ pkg });\n  await fs.writeFile(\n    path.resolve(projectRoot, 'package.json'),\n    // Add new line to match the format of running yarn.\n    // This prevents the `package.json` from changing when running `prebuild --no-install` multiple times.\n    JSON.stringify(pkg, null, 2) + '\\n'\n  );\n\n  updatingPackageJsonStep.succeed(\n    'Updated package.json and added index.js entry point for iOS and Android.'\n  );\n  if (removedPkgMain) {\n    Log.log(\n      `\\u203A Removed ${chalk.bold(\n        `\"main\": \"${removedPkgMain}\"`\n      )} from package.json because we recommend using index.js as main instead.`\n    );\n    Log.newLine();\n  }\n\n  return results;\n}\n\n/**\n * Update package.json dependencies by combining the dependencies in the project we are ejecting\n * with the dependencies in the template project. Does the same for devDependencies.\n *\n * - The template may have some dependencies beyond react/react-native/react-native-unimodules,\n *   for example RNGH and Reanimated. We should prefer the version that is already being used\n *   in the project for those, but swap the react/react-native/react-native-unimodules versions\n *   with the ones in the template.\n * - The same applies to expo-updates -- since some native project configuration may depend on the\n *   version, we should always use the version of expo-updates in the template.\n */\nfunction updatePackageJSONDependencies({\n  projectRoot,\n  tempDir,\n  pkg,\n}: {\n  projectRoot: string;\n  tempDir: string;\n  pkg: PackageJSONConfig;\n}): DependenciesModificationResults {\n  if (!pkg.devDependencies) {\n    pkg.devDependencies = {};\n  }\n  const { dependencies, devDependencies } = getPackageJson(tempDir);\n  const defaultDependencies = createDependenciesMap(dependencies);\n  const defaultDevDependencies = createDependenciesMap(devDependencies);\n\n  const combinedDependencies: DependenciesMap = createDependenciesMap({\n    ...defaultDependencies,\n    ...pkg.dependencies,\n  });\n\n  const requiredDependencies = ['react', 'react-native-unimodules', 'react-native', 'expo-updates'];\n\n  const symlinkedPackages: string[] = [];\n\n  for (const dependenciesKey of requiredDependencies) {\n    if (\n      // If the local package.json defined the dependency that we want to overwrite...\n      pkg.dependencies?.[dependenciesKey] &&\n      // Then ensure it isn't symlinked (i.e. the user has a custom version in their yarn workspace).\n      isModuleSymlinked({ projectRoot, moduleId: dependenciesKey, isSilent: true })\n    ) {\n      // If the package is in the project's package.json and it's symlinked, then skip overwriting it.\n      symlinkedPackages.push(dependenciesKey);\n      continue;\n    }\n    combinedDependencies[dependenciesKey] = defaultDependencies[dependenciesKey];\n  }\n\n  if (symlinkedPackages.length) {\n    Log.log(\n      `\\u203A Using symlinked ${symlinkedPackages\n        .map(pkg => chalk.bold(pkg))\n        .join(', ')} instead of recommended version(s).`\n    );\n  }\n\n  const combinedDevDependencies: DependenciesMap = createDependenciesMap({\n    ...defaultDevDependencies,\n    ...pkg.devDependencies,\n  });\n\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies =\n    hashForDependencyMap(pkg.dependencies) !== hashForDependencyMap(combinedDependencies);\n  const hasNewDevDependencies =\n    hashForDependencyMap(pkg.devDependencies) !== hashForDependencyMap(combinedDevDependencies);\n  // Save the dependencies\n  if (hasNewDependencies) {\n    // Use Object.assign to preserve the original order of dependencies, this makes it easier to see what changed in the git diff.\n    pkg.dependencies = Object.assign(pkg.dependencies, combinedDependencies);\n  }\n  if (hasNewDevDependencies) {\n    // Same as with dependencies\n    pkg.devDependencies = Object.assign(pkg.devDependencies, combinedDevDependencies);\n  }\n\n  return {\n    hasNewDependencies,\n    hasNewDevDependencies,\n  };\n}\n\n/**\n * Create an object of type DependenciesMap a dependencies object or throw if not valid.\n *\n * @param dependencies - ideally an object of type {[key]: string} - if not then this will error.\n */\nfunction createDependenciesMap(dependencies: any): DependenciesMap {\n  if (typeof dependencies !== 'object') {\n    throw new Error(`Dependency map is invalid, expected object but got ${typeof dependencies}`);\n  } else if (!dependencies) {\n    return {};\n  }\n\n  const outputMap: DependenciesMap = {};\n\n  for (const key of Object.keys(dependencies)) {\n    const value = dependencies[key];\n    if (typeof value === 'string') {\n      outputMap[key] = value;\n    } else {\n      throw new Error(\n        `Dependency for key \\`${key}\\` should be a \\`string\\`, instead got: \\`{ ${key}: ${JSON.stringify(\n          value\n        )} }\\``\n      );\n    }\n  }\n  return outputMap;\n}\n\n/**\n * Update package.json scripts - `npm start` should default to `react-native\n * start` rather than `expo start` after ejecting, for example.\n */\nfunction updatePackageJSONScripts({ pkg }: { pkg: PackageJSONConfig }) {\n  if (!pkg.scripts) {\n    pkg.scripts = {};\n  }\n  pkg.scripts.start = 'react-native start';\n  pkg.scripts.ios = 'react-native run-ios';\n  pkg.scripts.android = 'react-native run-android';\n}\n\n/**\n * Add new app entry points\n */\nfunction updatePackageJSONEntryPoint({ pkg }: { pkg: PackageJSONConfig }): boolean {\n  let removedPkgMain = false;\n  // Check that the pkg.main doesn't match:\n  // - ./node_modules/expo/AppEntry\n  // - ./node_modules/expo/AppEntry.js\n  // - node_modules/expo/AppEntry.js\n  // - expo/AppEntry.js\n  // - expo/AppEntry\n  if (shouldDeleteMainField(pkg.main)) {\n    // Save the custom\n    removedPkgMain = pkg.main;\n    delete pkg.main;\n  }\n\n  return removedPkgMain;\n}\n\n/**\n * Returns true if the input string matches the default expo main field.\n *\n * - ./node_modules/expo/AppEntry\n * - ./node_modules/expo/AppEntry.js\n * - node_modules/expo/AppEntry.js\n * - expo/AppEntry.js\n * - expo/AppEntry\n *\n * @param input package.json main field\n */\nexport function isPkgMainExpoAppEntry(input?: string): boolean {\n  const main = input || '';\n  if (main.startsWith('./')) {\n    return main.includes('node_modules/expo/AppEntry');\n  }\n  return main.includes('expo/AppEntry');\n}\n\nfunction normalizeDependencyMap(deps: DependenciesMap): string[] {\n  return Object.keys(deps)\n    .map(dependency => `${dependency}@${deps[dependency]}`)\n    .sort();\n}\n\nexport function hashForDependencyMap(deps: DependenciesMap): string {\n  const depsList = normalizeDependencyMap(deps);\n  const depsString = depsList.join('\\n');\n  return createFileHash(depsString);\n}\n\nexport function createFileHash(contents: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  return crypto.createHash('sha1').update(contents).digest('hex');\n}\n\nexport function shouldDeleteMainField(main?: any): boolean {\n  if (!main || !isPkgMainExpoAppEntry(main)) {\n    return false;\n  }\n\n  return !main?.startsWith('index.');\n}\n"],"file":"updatePackageJson.js"}
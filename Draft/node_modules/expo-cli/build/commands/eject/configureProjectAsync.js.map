{"version":3,"sources":["../../../src/commands/eject/configureProjectAsync.ts"],"names":["expoManagedPlugins","expoManagedVersionedPlugins","withOptionalPlugins","config","plugins","reduce","prev","plugin","_isLegacyPlugin","fallback","withManagedPlugins","Set","concat","configureManagedProjectAsync","projectRoot","platforms","exp","skipSDKVersionRequirement","isModdedConfig","expoUsername","process","env","EAS_BUILD_USERNAME","UserManager","getCurrentUsernameAsync","includes","bundleIdentifier","ios","packageName","android","package","Log","isDebug","debug","mods","rest","info","JSON","stringify"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;AACA;AACO,MAAMA,kBAAkB,GAAG,CAChC,eADgC,EAEhC,SAFgC,EAGhC,uBAHgC,EAIhC,sBAJgC,EAKhC,iBALgC,EAMhC,eANgC,EAOhC,aAPgC,EAQhC,eARgC,EAShC,mBATgC,EAUhC,kBAVgC,EAWhC,eAXgC,EAYhC,oBAZgC,EAahC;AACA,yBAdgC,EAehC,cAfgC,EAgBhC,mBAhBgC,EAiBhC,2BAjBgC,CAA3B,C,CAoBP;AACA;;;AACA,MAAMC,2BAA2B,GAAG,CAClC;AACA;AACA;AACA;AACA;AACA,2BANkC,EAOlC,sBAPkC,EAQlC,yBARkC,EASlC,oBATkC,EAUlC,qBAVkC,CAWlC;AACA;AAZkC,CAApC;;AAeA,MAAMC,mBAA4D,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACxF,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACtC,WAAO,uCAAiBD,IAAjB,EAAuB;AAC5B;AACAE,MAAAA,eAAe,EAAE,IAFW;AAG5BD,MAAAA,MAH4B;AAI5B;AACAE,MAAAA,QAAQ,EAAEN,MAAM,IAAIA;AALQ,KAAvB,CAAP;AAOD,GARM,EAQJA,MARI,CAAP;AASD,CAVD;;AAYA,SAASO,kBAAT,CAA4BP,MAA5B,EAAgD;AAC9C,SAAOD,mBAAmB,CAACC,MAAD,EAAS,CACjC,GAAG,IAAIQ,GAAJ,CAAQV,2BAA2B,CAACW,MAA5B,CAAmCZ,kBAAnC,CAAR,CAD8B,CAAT,CAA1B;AAGD;;AAEc,eAAea,4BAAf,CAA4C;AACzDC,EAAAA,WADyD;AAEzDC,EAAAA;AAFyD,CAA5C,EAMZ;AACD;AACA,MAAI;AAAEC,IAAAA,GAAG,EAAEb;AAAP,MAAkB,yBAAUW,WAAV,EAAuB;AAC3CG,IAAAA,yBAAyB,EAAE,IADgB;AAE3CC,IAAAA,cAAc,EAAE;AAF2B,GAAvB,CAAtB;AAKA,QAAMC,YAAY,GAChBC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,KAAmC,MAAMC,mBAAYC,uBAAZ,EAAzC,CADF,CAPC,CASD;AACA;;AACArB,EAAAA,MAAM,GAAG,kDAA4BA,MAA5B,EAAoC;AAAEgB,IAAAA;AAAF,GAApC,CAAT;AACAhB,EAAAA,MAAM,GAAGO,kBAAkB,CAACP,MAAD,CAA3B;;AAEA,MAAIY,SAAS,CAACU,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC7B;AACA,UAAMC,gBAAgB,GAAG,MAAM,wDAA+BZ,WAA/B,CAA/B;AACAX,IAAAA,MAAM,CAACwB,GAAP,CAAYD,gBAAZ,GAA+BA,gBAA/B,CAH6B,CAK7B;;AACAvB,IAAAA,MAAM,GAAG,yCAAmBA,MAAnB,EAA2B;AAClCuB,MAAAA;AADkC,KAA3B,CAAT;AAGD;;AAED,MAAIX,SAAS,CAACU,QAAV,CAAmB,SAAnB,CAAJ,EAAmC;AACjC;AACA,UAAMG,WAAW,GAAG,MAAM,+CAAsBd,WAAtB,CAA1B;AACAX,IAAAA,MAAM,CAAC0B,OAAP,CAAgBC,OAAhB,GAA0BF,WAA1B,CAHiC,CAKjC;;AACAzB,IAAAA,MAAM,GAAG,6CAAuBA,MAAvB,EAA+B;AACtC2B,MAAAA,OAAO,EAAEF;AAD6B,KAA/B,CAAT;AAGD,GAlCA,CAoCD;;;AACAzB,EAAAA,MAAM,GAAG,MAAM,uCAAiBA,MAAjB,EAAyB;AAAEW,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAzB,CAAf;;AAEA,MAAIgB,eAAIC,OAAR,EAAiB;AACfD,mBAAIE,KAAJ;;AACAF,mBAAIE,KAAJ,CAAU,mBAAV,EAFe,CAGf;;;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQ,SAAGC;AAAX,QAAoBhC,MAA1B;;AACA4B,mBAAIK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAT;;AACAJ,mBAAIK,IAAJ,CAASF,IAAT;;AACAH,mBAAIE,KAAJ;AACD;;AAED,SAAO9B,MAAP;AACD","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport {\n  compileModsAsync,\n  ConfigPlugin,\n  ModPlatform,\n  StaticPlugin,\n  withExpoAndroidPlugins,\n  withExpoIOSPlugins,\n  withExpoVersionedSDKPlugins,\n  withStaticPlugin,\n} from '@expo/config-plugins';\nimport { UserManager } from '@expo/xdl';\n\nimport Log from '../../log';\nimport { getOrPromptForBundleIdentifier, getOrPromptForPackage } from './ConfigValidation';\n\n// Expo managed packages that require extra update.\n// These get applied automatically to create parity with expo build in eas build.\nexport const expoManagedPlugins = [\n  'expo-app-auth',\n  'expo-av',\n  'expo-background-fetch',\n  'expo-barcode-scanner',\n  'expo-brightness',\n  'expo-calendar',\n  'expo-camera',\n  'expo-contacts',\n  'expo-image-picker',\n  'expo-file-system',\n  'expo-location',\n  'expo-media-library',\n  // 'expo-notifications',\n  'expo-screen-orientation',\n  'expo-sensors',\n  'expo-task-manager',\n  'expo-local-authentication',\n];\n\n// Plugins that need to be automatically applied, but also get applied by expo-cli if the versioned plugin isn't available.\n// These are split up because the user doesn't need to be prompted to setup these packages.\nconst expoManagedVersionedPlugins = [\n  // 'expo-splash-screen',\n  // 'expo-facebook',\n  // 'expo-branch',\n  // 'expo-updates',\n  // 'expo-ads-admob',\n  'expo-apple-authentication',\n  'expo-document-picker',\n  'expo-firebase-analytics',\n  'expo-firebase-core',\n  'expo-google-sign-in',\n  // 'expo-dev-menu',\n  // 'expo-dev-launcher',\n];\n\nconst withOptionalPlugins: ConfigPlugin<(StaticPlugin | string)[]> = (config, plugins) => {\n  return plugins.reduce((prev, plugin) => {\n    return withStaticPlugin(prev, {\n      // hide errors\n      _isLegacyPlugin: true,\n      plugin,\n      // If a plugin doesn't exist, do nothing.\n      fallback: config => config,\n    });\n  }, config);\n};\n\nfunction withManagedPlugins(config: ExpoConfig) {\n  return withOptionalPlugins(config, [\n    ...new Set(expoManagedVersionedPlugins.concat(expoManagedPlugins)),\n  ]);\n}\n\nexport default async function configureManagedProjectAsync({\n  projectRoot,\n  platforms,\n}: {\n  projectRoot: string;\n  platforms: ModPlatform[];\n}) {\n  // let config: ExpoConfig;\n  let { exp: config } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  const expoUsername =\n    process.env.EAS_BUILD_USERNAME || (await UserManager.getCurrentUsernameAsync());\n  // Add all built-in plugins first because they should take\n  // priority over the unversioned plugins.\n  config = withExpoVersionedSDKPlugins(config, { expoUsername });\n  config = withManagedPlugins(config);\n\n  if (platforms.includes('ios')) {\n    // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.\n    const bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n    config.ios!.bundleIdentifier = bundleIdentifier;\n\n    // Add all built-in plugins\n    config = withExpoIOSPlugins(config, {\n      bundleIdentifier,\n    });\n  }\n\n  if (platforms.includes('android')) {\n    // Check package before reading the config because it may mutate the config if the user is prompted to define it.\n    const packageName = await getOrPromptForPackage(projectRoot);\n    config.android!.package = packageName;\n\n    // Add all built-in plugins\n    config = withExpoAndroidPlugins(config, {\n      package: packageName,\n    });\n  }\n\n  // compile all plugins and mods\n  config = await compileModsAsync(config, { projectRoot, platforms });\n\n  if (Log.isDebug) {\n    Log.debug();\n    Log.debug('Evaluated config:');\n    // @ts-ignore: mods not on config type\n    const { mods, ...rest } = config;\n    Log.info(JSON.stringify(rest, null, 2));\n    Log.info(mods);\n    Log.debug();\n  }\n\n  return config;\n}\n"],"file":"configureProjectAsync.js"}
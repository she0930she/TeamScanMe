{"version":3,"sources":["../../src/commands/install.ts"],"names":["resolveExpoProjectRootAsync","info","process","cwd","projectRoot","error","code","Log","addNewLineIfNone","message","newLine","log","chalk","cyan","bold","SilentError","installAsync","packages","options","packageManager","PackageManager","createForProject","npm","yarn","exp","pkg","skipSDKVersionRequirement","dependencies","addAsync","sdkVersion","CommandError","name","toLowerCase","Versions","gteSdkVersion","resolveFrom","silent","bundledNativeModulesPath","bundledNativeModules","JsonFile","readAsync","nativeModules","others","versionedPackages","map","arg","spec","includes","type","version","modifiedSpec","push","raw","messages","length","join","install","program","command","alias","helpGroup","option","description","asyncAction"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport * as PackageManager from '@expo/package-manager';\nimport { Versions } from '@expo/xdl';\nimport { Command } from 'commander';\nimport npmPackageArg from 'npm-package-arg';\nimport resolveFrom from 'resolve-from';\n\nimport CommandError, { SilentError } from '../CommandError';\nimport Log from '../log';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\n\nasync function resolveExpoProjectRootAsync() {\n  try {\n    const info = await findProjectRootAsync(process.cwd());\n    return info.projectRoot;\n  } catch (error) {\n    if (error.code !== 'NO_PROJECT') {\n      // An unknown error occurred.\n      throw error;\n    }\n    // This happens when an app.config exists but a package.json is not present.\n    Log.addNewLineIfNone();\n    Log.error(error.message);\n    Log.newLine();\n    Log.log(Log.chalk.cyan(`You can create a new project with ${Log.chalk.bold(`expo init`)}`));\n    Log.newLine();\n    throw new SilentError(error);\n  }\n}\n\nasync function installAsync(packages: string[], options: PackageManager.CreateForProjectOptions) {\n  const projectRoot = await resolveExpoProjectRootAsync();\n\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log: Log.log,\n  });\n\n  const { exp, pkg } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // If using `expo install` in a project without the expo package even listed\n  // in package.json, just fall through to npm/yarn.\n  //\n  if (!pkg.dependencies['expo']) {\n    return await packageManager.addAsync(...packages);\n  }\n\n  if (!exp.sdkVersion) {\n    Log.addNewLineIfNone();\n    throw new CommandError(\n      `The ${Log.chalk.bold(`expo`)} package was found in your ${Log.chalk.bold(\n        `package.json`\n      )} but we couldn't resolve the Expo SDK version. Run ${Log.chalk.bold(\n        `${packageManager.name.toLowerCase()} install`\n      )} and then try this command again.\\n`\n    );\n  }\n\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    const message = `${Log.chalk.bold(\n      `expo install`\n    )} is only available for Expo SDK version 33 or higher.`;\n    Log.addNewLineIfNone();\n    Log.error(message);\n    Log.newLine();\n    Log.log(Log.chalk.cyan(`Current version: ${Log.chalk.bold(exp.sdkVersion)}`));\n    Log.newLine();\n    throw new SilentError(message);\n  }\n\n  // This shouldn't be invoked because `findProjectRootAsync` will throw if node_modules are missing.\n  // Every React project should have react installed...\n  if (!resolveFrom.silent(projectRoot, 'react')) {\n    Log.addNewLineIfNone();\n    Log.log(\n      Log.chalk.cyan(`node_modules not found, running ${packageManager.name} install command.`)\n    );\n    Log.newLine();\n    await packageManager.installAsync();\n  }\n\n  const bundledNativeModulesPath = resolveFrom.silent(\n    projectRoot,\n    'expo/bundledNativeModules.json'\n  );\n\n  if (!bundledNativeModulesPath) {\n    Log.addNewLineIfNone();\n    throw new CommandError(\n      `The dependency map ${Log.chalk.bold(\n        `expo/bundledNativeModules.json`\n      )} cannot be found, please ensure you have the package \"${Log.chalk\n        .bold`expo`}\" installed in your project.\\n`\n    );\n  }\n\n  const bundledNativeModules = await JsonFile.readAsync(bundledNativeModulesPath);\n\n  const nativeModules = [];\n  const others = [];\n  const versionedPackages = packages.map(arg => {\n    const spec = npmPackageArg(arg);\n    const { name } = spec;\n    if (['tag', 'version', 'range'].includes(spec.type) && name && bundledNativeModules[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      const version = bundledNativeModules[name];\n      const modifiedSpec = `${name}@${version}`;\n      nativeModules.push(modifiedSpec);\n      return modifiedSpec;\n    } else {\n      // Other packages are passed through unmodified.\n      others.push(spec.raw);\n      return spec.raw;\n    }\n  });\n  const messages = [];\n  if (nativeModules.length > 0) {\n    messages.push(\n      `${nativeModules.length} SDK ${exp.sdkVersion} compatible native ${\n        nativeModules.length === 1 ? 'module' : 'modules'\n      }`\n    );\n  }\n  if (others.length > 0) {\n    messages.push(`${others.length} other ${others.length === 1 ? 'package' : 'packages'}`);\n  }\n  Log.log(`Installing ${messages.join(' and ')} using ${packageManager.name}.`);\n  await packageManager.addAsync(...versionedPackages);\n}\n\nexport default function install(program: Command) {\n  program\n    .command('install [packages...]')\n    .alias('add')\n    .helpGroup('core')\n    .option('--npm', 'Use npm to install dependencies. (default when package-lock.json exists)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when yarn.lock exists)')\n    .description('Install a unimodule or other package to a project')\n    .asyncAction(installAsync);\n}\n"],"file":"install.js"}
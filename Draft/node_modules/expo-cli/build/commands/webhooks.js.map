{"version":3,"sources":["../../src/commands/webhooks.ts"],"names":["SECRET_MIN_LENGTH","SECRET_MAX_LENGTH","program","command","helpGroup","description","asyncActionProjectDir","listAsync","option","addAsync","removeAsync","updateAsync","projectRoot","experienceName","project","client","setupAsync","webhooks","getAsync","id","length","table","CliTable","head","push","map","hook","url","event","Log","log","toString","chalk","bold","options","test","secret","validateSecret","generateSecret","spinner","start","postAsync","succeed","webhook","patchAsync","deleteAsync","randomSecret","crypto","randomBytes","underline","exp","skipSDKVersionRequirement","slug","CommandError","ErrorCodes","MISSING_SLUG","configName","user","UserManager","ensureLoggedInAsync","ApiV2","clientForUser","owner","username","projects","projectNotFoundError","error","code","PROJECT_NOT_FOUND"],"mappings":"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","sourcesContent":["import { findConfigFile, getConfig } from '@expo/config';\nimport { ApiV2, UserManager } from '@expo/xdl';\nimport chalk from 'chalk';\nimport CliTable from 'cli-table3';\nimport { Command } from 'commander';\nimport crypto from 'crypto';\nimport ora from 'ora';\n\nimport CommandError, { ErrorCodes } from '../CommandError';\nimport { assert } from '../assert';\nimport Log from '../log';\n\nconst SECRET_MIN_LENGTH = 16;\nconst SECRET_MAX_LENGTH = 1000;\n\ntype WebhookEvent = 'build';\ntype Webhook = {\n  id: string;\n  url: string;\n  event: WebhookEvent;\n  secret?: string;\n};\n\nexport default function (program: Command) {\n  program\n    .command('webhooks [path]')\n    .helpGroup('webhooks')\n    .description('List all webhooks for a project')\n    .asyncActionProjectDir(listAsync);\n  program\n    .command('webhooks:add [path]')\n    .helpGroup('webhooks')\n    .description('Add a webhook to a project')\n    .option('--url <url>', 'URL to request. (Required)')\n    .option('--event <event-type>', 'Event type that triggers the webhook. [build] (Required)')\n    .option(\n      '--secret <secret>',\n      \"Secret used to create a hash signature of the request payload, provided in the 'Expo-Signature' header.\"\n    )\n    .asyncActionProjectDir(addAsync);\n  program\n    .command('webhooks:remove [path]')\n    .helpGroup('webhooks')\n    .option('--id <id>', 'ID of the webhook to remove.')\n    .description('Delete a webhook')\n    .asyncActionProjectDir(removeAsync);\n  program\n    .command('webhooks:update [path]')\n    .helpGroup('webhooks')\n    .description('Update an existing webhook')\n    .option('--id <id>', 'ID of the webhook to update.')\n    .option('--url [url]', 'URL the webhook will request.')\n    .option('--event [event-type]', 'Event type that triggers the webhook. [build]')\n    .option(\n      '--secret [secret]',\n      \"Secret used to create a hash signature of the request payload, provided in the 'Expo-Signature' header.\"\n    )\n    .asyncActionProjectDir(updateAsync);\n}\n\nasync function listAsync(projectRoot: string) {\n  const { experienceName, project, client } = await setupAsync(projectRoot);\n\n  const webhooks = await client.getAsync(`projects/${project.id}/webhooks`);\n  if (webhooks.length) {\n    const table = new CliTable({ head: ['Webhook ID', 'URL', 'Event'] });\n    table.push(...webhooks.map((hook: Webhook) => [hook.id, hook.url, hook.event]));\n    Log.log(table.toString());\n  } else {\n    Log.log(`${chalk.bold(experienceName)} has no webhooks.`);\n    Log.log('Use `expo webhooks:add` to add one.');\n  }\n}\n\nasync function addAsync(\n  projectRoot: string,\n  { url, event, ...options }: { url?: string; event?: WebhookEvent; secret?: string }\n) {\n  assert(typeof url === 'string' && /^https?/.test(url), '--url: a HTTP URL is required');\n  assert(typeof event === 'string', '--event: string is required');\n  const secret = validateSecret(options) || generateSecret();\n\n  const { experienceName, project, client } = await setupAsync(projectRoot);\n\n  const spinner = ora(`Adding webhook to ${experienceName}`).start();\n  await client.postAsync(`projects/${project.id}/webhooks`, { url, event, secret });\n  spinner.succeed();\n}\n\nexport async function updateAsync(\n  projectRoot: string,\n  {\n    id,\n    url,\n    event,\n    ...options\n  }: { id?: string; url?: string; event?: WebhookEvent; secret?: string }\n) {\n  assert(typeof id === 'string', '--id must be a webhook ID');\n  assert(event == null || typeof event === 'string', '--event: string is required');\n  let secret = validateSecret(options);\n\n  const { project, client } = await setupAsync(projectRoot);\n\n  const webhook = await client.getAsync(`projects/${project.id}/webhooks/${id}`);\n  event = event ?? webhook.event;\n  secret = secret ?? webhook.secret;\n\n  const spinner = ora(`Updating webhook ${id}`).start();\n  await client.patchAsync(`projects/${project.id}/webhooks/${id}`, { url, event, secret });\n  spinner.succeed();\n}\n\nasync function removeAsync(projectRoot: string, { id }: { id?: string }) {\n  assert(typeof id === 'string', '--id must be a webhook ID');\n  const { project, client } = await setupAsync(projectRoot);\n\n  await client.deleteAsync(`projects/${project.id}/webhooks/${id}`);\n}\n\nfunction validateSecret({ secret }: { secret?: string }): string | null {\n  if (secret) {\n    assert(\n      secret.length >= SECRET_MIN_LENGTH && secret.length < SECRET_MAX_LENGTH,\n      `--secret: should be ${SECRET_MIN_LENGTH}-${SECRET_MAX_LENGTH} characters long`\n    );\n    return secret;\n  }\n  return null;\n}\n\nfunction generateSecret() {\n  // Create a 60 characters long secret from 30 random bytes.\n  const randomSecret = crypto.randomBytes(30).toString('hex');\n  Log.log(chalk.underline('Webhook signing secret:'));\n  Log.log(randomSecret);\n  return randomSecret;\n}\n\nexport async function setupAsync(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const { slug } = exp;\n  if (!slug) {\n    throw new CommandError(\n      ErrorCodes.MISSING_SLUG,\n      `expo.slug is not defined in ${findConfigFile(projectRoot).configName}`\n    );\n  }\n  const user = await UserManager.ensureLoggedInAsync();\n  const client = ApiV2.clientForUser(user);\n  const experienceName = `@${exp.owner ?? user.username}/${exp.slug}`;\n  try {\n    const projects = await client.getAsync('projects', {\n      experienceName,\n    });\n    if (projects.length === 0) {\n      throw projectNotFoundError(experienceName);\n    }\n    const project = projects[0];\n    return { experienceName, project, client };\n  } catch (error) {\n    if (error.code === 'EXPERIENCE_NOT_FOUND') {\n      throw projectNotFoundError(experienceName);\n    } else {\n      throw error;\n    }\n  }\n}\nfunction projectNotFoundError(experienceName: string) {\n  return new CommandError(\n    ErrorCodes.PROJECT_NOT_FOUND,\n    `Project ${experienceName} not found. The project is created the first time you run \\`expo publish\\` or build the project (https://docs.expo.io/distribution/building-standalone-apps/).`\n  );\n}\n"],"file":"webhooks.js"}
{"version":3,"sources":["../../../src/commands/start/TerminalUI.ts"],"names":["CTRL_C","CTRL_D","CTRL_L","BLT","bold","b","italic","i","underline","u","chalk","printHelp","logCommandsTable","div","dim","shouldOpenDevToolsOnStartupAsync","UserSettings","getAsync","printUsageAsync","projectRoot","options","dev","ProjectSettings","readAsync","openDevToolsAtStartup","devMode","currentToggle","isMac","process","platform","webOnly","printBasicUsageAsync","ui","Log","nested","filter","Boolean","map","key","message","status","view","length","join","printServerInfo","Webpack","printConnectionInstructions","newLine","url","UrlUtils","constructDeepLinkAsync","urlOpts","printQRCode","wrapLength","stdout","columns","item","text","trimStart","openDeveloperTools","log","warn","startAsync","stdin","startWaitingForCommand","setRawMode","resume","setEncoding","on","handleKeypress","stopWaitingForCommand","removeListener","Prompts","addInteractionListener","pause","UserManager","setInteractiveAuthenticationCallback","clear","Android","openWebProjectAsync","shouldPrompt","nonInteractive","Simulator","red","openProjectAsync","devClient","sendEmailAsync","emit","openAsync","devToolsPort","readPackagerInfoAsync","enabled","setAsync","projectSettings","minify","reset","Project","lanAddress","hostType","defaultRecipient","addNewLineIfNone","pauseInteractions","recipient","initial","undefined","resumeInteractions","sent","Exp","sendAsync","err"],"mappings":"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","sourcesContent":["import {\n  Android,\n  Exp,\n  Project,\n  ProjectSettings,\n  Prompts,\n  Simulator,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Webpack,\n} from '@expo/xdl';\nimport chalk from 'chalk';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport wrapAnsi from 'wrap-ansi';\n\nimport { loginOrRegisterIfLoggedOutAsync } from '../../accounts';\nimport Log from '../../log';\nimport { promptEmailAsync } from '../../prompts';\nimport urlOpts from '../../urlOpts';\nimport { openInEditorAsync } from '../utils/openInEditorAsync';\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst BLT = `\\u203A`;\nconst { bold: b, italic: i, underline: u } = chalk;\n\ntype StartOptions = {\n  devClient?: boolean;\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n};\n\nconst printHelp = (): void => {\n  logCommandsTable([['?', 'show all commands']]);\n};\n\nconst div = chalk.dim(`│`);\n\nexport async function shouldOpenDevToolsOnStartupAsync() {\n  return UserSettings.getAsync(\n    'openDevToolsAtStartup',\n    // Defaults to true for new users.\n    // TODO: switch this to false.\n    true\n  );\n}\n\nconst printUsageAsync = async (\n  projectRoot: string,\n  options: Pick<StartOptions, 'webOnly'> = {}\n) => {\n  const { dev } = await ProjectSettings.readAsync(projectRoot);\n  const openDevToolsAtStartup = await shouldOpenDevToolsOnStartupAsync();\n  const devMode = dev ? 'development' : 'production';\n  const currentToggle = openDevToolsAtStartup ? 'enabled' : 'disabled';\n\n  const isMac = process.platform === 'darwin';\n\n  logCommandsTable([\n    [],\n    ['a', `open Android`],\n    ['shift+a', `select a device or emulator`],\n    isMac && ['i', `open iOS simulator`],\n    isMac && ['shift+i', `select a simulator`],\n    ['w', `open web`],\n    [],\n    ['o', `open project code in your editor`],\n    ['c', `show project QR`],\n    ['p', `toggle build mode`, devMode],\n    ['r', `restart bundler`],\n    ['shift+r', `restart and clear cache`],\n    [],\n    ['d', `open developer tools`],\n    ['shift+d', `toggle auto opening developer tools on startup`, currentToggle],\n    !options.webOnly && ['e', `share the app link by email`],\n    [],\n  ]);\n};\n\nconst printBasicUsageAsync = async (options: Pick<StartOptions, 'webOnly'> = {}) => {\n  const isMac = process.platform === 'darwin';\n  const openDevToolsAtStartup = await shouldOpenDevToolsOnStartupAsync();\n  const currentToggle = openDevToolsAtStartup ? 'enabled' : 'disabled';\n\n  logCommandsTable([\n    [],\n    ['a', `open Android`],\n    isMac && ['i', `open iOS simulator`],\n    ['w', `open web`],\n    [],\n    ['d', `open developer tools`],\n    ['shift+d', `toggle auto opening developer tools on startup`, currentToggle],\n    !options.webOnly && ['e', `share the app link by email`],\n    [],\n  ]);\n};\n\nfunction logCommandsTable(ui: (false | string[])[]) {\n  Log.nested(\n    ui\n      .filter(Boolean)\n      // @ts-ignore: filter doesn't work\n      .map(([key, message, status]) => {\n        if (!key) return '';\n        let view = ` ${BLT} `;\n        if (key.length === 1) view += 'Press ';\n        view += `${b(key)} ${div} `;\n        view += message;\n        // let view = ` ${BLT} Press ${b(key)} ${div} ${message}`;\n        if (status) {\n          view += ` ${chalk.dim(`(${i(status)})`)}`;\n        }\n        return view;\n      })\n      .join('\\n')\n  );\n}\n\nconst printServerInfo = async (\n  projectRoot: string,\n  options: Pick<StartOptions, 'webOnly'> = {}\n) => {\n  if (options.webOnly) {\n    Webpack.printConnectionInstructions(projectRoot);\n    printHelp();\n    return;\n  }\n  Log.newLine();\n  const url = await UrlUtils.constructDeepLinkAsync(projectRoot);\n  urlOpts.printQRCode(url);\n  const wrapLength = process.stdout.columns || 80;\n  const item = (text: string): string => ` ${BLT} ` + wrapAnsi(text, wrapLength).trimStart();\n  Log.nested(item(`Waiting on ${u(url)}`));\n  // Log.newLine();\n  // TODO: if dev client, change this message!\n  Log.nested(item(`Scan the QR code above with Expo Go (Android) or the Camera app (iOS)`));\n\n  await printBasicUsageAsync(options);\n  Webpack.printConnectionInstructions(projectRoot);\n  printHelp();\n  Log.newLine();\n};\n\nexport function openDeveloperTools(url: string) {\n  Log.log(`Opening developer tools in the browser...`);\n  if (!openBrowser(url)) {\n    Log.warn(`Unable to open developer tools in the browser`);\n  }\n}\n\nexport async function startAsync(projectRoot: string, options: StartOptions) {\n  const { stdin } = process;\n  const startWaitingForCommand = () => {\n    if (!stdin.setRawMode) {\n      Log.warn(\n        'Non-interactive terminal, keyboard commands are disabled. Please upgrade to Node 12+'\n      );\n      return;\n    }\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n  };\n\n  const stopWaitingForCommand = () => {\n    stdin.removeListener('data', handleKeypress);\n    if (!stdin.setRawMode) {\n      Log.warn(\n        'Non-interactive terminal, keyboard commands are disabled. Please upgrade to Node 12+'\n      );\n      return;\n    }\n    stdin.setRawMode(false);\n    stdin.resume();\n  };\n\n  startWaitingForCommand();\n\n  Prompts.addInteractionListener(({ pause }) => {\n    if (pause) {\n      stopWaitingForCommand();\n    } else {\n      startWaitingForCommand();\n    }\n  });\n\n  UserManager.setInteractiveAuthenticationCallback(async () => {\n    stopWaitingForCommand();\n    try {\n      return await loginOrRegisterIfLoggedOutAsync();\n    } finally {\n      startWaitingForCommand();\n    }\n  });\n\n  await printServerInfo(projectRoot, options);\n\n  async function handleKeypress(key: string) {\n    if (options.webOnly) {\n      switch (key) {\n        case 'A':\n        case 'a':\n          Log.clear();\n          Log.log('Opening the web project in Chrome on Android...');\n          await Android.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'A',\n          });\n          printHelp();\n          break;\n        case 'i':\n        case 'I':\n          Log.clear();\n          Log.log('Opening the web project in Safari on iOS...');\n          await Simulator.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'I',\n            // note(brentvatne): temporarily remove logic for picking the\n            // simulator until we have parity for Android. this also ensures that we\n            // don't interfere with the default user flow until more users have tested\n            // this out.\n            //\n            // If no simulator is booted, then prompt which simulator to use.\n            // (key === 'I' || !(await Simulator.isSimulatorBootedAsync())),\n          });\n          printHelp();\n          break;\n        case 'e':\n          Log.log(chalk.red` ${BLT} Sending a URL is not supported in web-only mode`);\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'A':\n          Log.clear();\n          await Android.openProjectAsync({\n            projectRoot,\n            shouldPrompt: true,\n            devClient: options.devClient ?? false,\n          });\n          printHelp();\n          break;\n        case 'a': {\n          Log.clear();\n          Log.log('Opening on Android...');\n          await Android.openProjectAsync({ projectRoot, devClient: options.devClient ?? false });\n          printHelp();\n          break;\n        }\n        case 'I':\n          Log.clear();\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: true,\n            devClient: options.devClient ?? false,\n          });\n          printHelp();\n          break;\n        case 'i': {\n          Log.clear();\n\n          // note(brentvatne): temporarily remove logic for picking the\n          // simulator until we have parity for Android. this also ensures that we\n          // don't interfere with the default user flow until more users have tested\n          // this out.\n          //\n          // If no simulator is booted, then prompt for which simulator to use.\n          // const shouldPrompt =\n          //   !options.nonInteractive && (key === 'I' || !(await Simulator.isSimulatorBootedAsync()));\n\n          Log.log('Opening on iOS...');\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: false,\n            devClient: options.devClient ?? false,\n          });\n          printHelp();\n          break;\n        }\n        case 'e':\n          await sendEmailAsync(projectRoot);\n          break;\n      }\n    }\n\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        // @ts-ignore: Argument of type '\"SIGINT\"' is not assignable to parameter of type '\"disconnect\"'.\n        process.emit('SIGINT');\n        break;\n      }\n      case CTRL_L: {\n        Log.clear();\n        break;\n      }\n      case '?': {\n        await printUsageAsync(projectRoot, options);\n        break;\n      }\n      case 'w': {\n        Log.log('Attempting to open the project in a web browser...');\n        await Webpack.openAsync(projectRoot);\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'c': {\n        Log.clear();\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'd': {\n        const { devToolsPort } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n        openDeveloperTools(`http://localhost:${devToolsPort}`);\n        printHelp();\n        break;\n      }\n      case 'D': {\n        const enabled = !(await shouldOpenDevToolsOnStartupAsync());\n        await UserSettings.setAsync('openDevToolsAtStartup', enabled);\n        const currentToggle = enabled ? 'enabled' : 'disabled';\n        Log.log(`Auto opening developer tools on startup: ${chalk.bold(currentToggle)}`);\n        logCommandsTable([['d', `open developer tools now`]]);\n        break;\n      }\n      case 'p': {\n        Log.clear();\n        const projectSettings = await ProjectSettings.readAsync(projectRoot);\n        const dev = !projectSettings.dev;\n        await ProjectSettings.setAsync(projectRoot, { dev, minify: !dev });\n        Log.log(\n          `Metro bundler is now running in ${chalk.bold(\n            dev ? 'development' : 'production'\n          )}${chalk.reset(` mode.`)}\nPlease reload the project in Expo Go for the change to take effect.`\n        );\n        printHelp();\n        break;\n      }\n      case 'r':\n      case 'R': {\n        Log.clear();\n        const reset = key === 'R';\n        if (reset) {\n          Log.log('Restarting Metro bundler and clearing cache...');\n        } else {\n          Log.log('Restarting Metro bundler...');\n        }\n        Project.startAsync(projectRoot, { ...options, reset });\n        break;\n      }\n      case 'o':\n        Log.log('Trying to open the project in your editor...');\n        await openInEditorAsync(projectRoot);\n    }\n  }\n}\n\nasync function sendEmailAsync(projectRoot: string): Promise<void> {\n  const lanAddress = await UrlUtils.constructDeepLinkAsync(projectRoot, {\n    hostType: 'lan',\n  });\n  const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n\n  Log.addNewLineIfNone();\n\n  Prompts.pauseInteractions();\n\n  let recipient: string;\n  try {\n    recipient = await promptEmailAsync({\n      message: `Email address ${chalk.dim(`(ESC to cancel)`)}`,\n      initial: defaultRecipient ?? undefined,\n    });\n  } catch {\n    Prompts.resumeInteractions();\n    printHelp();\n    return;\n  }\n\n  Prompts.resumeInteractions();\n\n  Log.log(`Sending ${lanAddress} to ${recipient}...`);\n\n  let sent = false;\n  try {\n    await Exp.sendAsync(recipient, lanAddress);\n    sent = true;\n    Log.log(`Sent link successfully.`);\n  } catch (err) {\n    Log.log(`Could not send link. ${err}`);\n  }\n  printHelp();\n  if (sent) {\n    await UserSettings.setAsync('sendTo', recipient);\n  }\n}\n"],"file":"TerminalUI.js"}
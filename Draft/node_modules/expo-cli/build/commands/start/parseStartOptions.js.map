{"version":3,"sources":["../../../src/commands/start/parseStartOptions.ts"],"names":["hasBooleanArg","rawArgs","argName","includes","getBooleanArg","setBooleanArg","fallback","normalizeOptionsAsync","projectRoot","options","parent","opts","parseRawArguments","cacheOptionsAsync","webOnly","nonInteractive","dev","minify","https","android","ios","web","localhost","lan","tunnel","projectDir","ProjectSettings","setAsync","devClient","scheme","parseStartOptions","exp","startOpts","clear","reset","maxWorkers","target","Log","debug"],"mappings":"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","sourcesContent":["import { ExpoConfig, isLegacyImportsEnabled } from '@expo/config';\nimport { Project, ProjectSettings } from '@expo/xdl';\n\nimport Log from '../../log';\nimport { URLOptions } from '../../urlOpts';\n\nexport type NormalizedOptions = URLOptions & {\n  webOnly?: boolean;\n  dev?: boolean;\n  minify?: boolean;\n  https?: boolean;\n  nonInteractive?: boolean;\n  clear?: boolean;\n  maxWorkers?: number;\n  sendTo?: string;\n  host?: string;\n  lan?: boolean;\n  localhost?: boolean;\n  tunnel?: boolean;\n};\n\nexport type RawStartOptions = NormalizedOptions & {\n  parent?: { nonInteractive: boolean; rawArgs: string[] };\n};\n\nfunction hasBooleanArg(rawArgs: string[], argName: string): boolean {\n  return rawArgs.includes('--' + argName) || rawArgs.includes('--no-' + argName);\n}\n\nfunction getBooleanArg(rawArgs: string[], argName: string): boolean {\n  if (rawArgs.includes('--' + argName)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function setBooleanArg(\n  argName: string,\n  rawArgs: string[],\n  fallback?: boolean\n): boolean | undefined {\n  if (rawArgs.includes(`--${argName}`)) {\n    return true;\n  } else if (rawArgs.includes(`--no-${argName}`)) {\n    return false;\n  } else {\n    return fallback;\n  }\n}\n\n// The main purpose of this function is to take existing options object and\n// support boolean args with as defined in the hasBooleanArg and getBooleanArg\n// functions.\nexport async function normalizeOptionsAsync(\n  projectRoot: string,\n  options: RawStartOptions\n): Promise<NormalizedOptions> {\n  const rawArgs = options.parent?.rawArgs || [];\n\n  const opts = parseRawArguments(options, rawArgs);\n\n  // Side-effect\n  await cacheOptionsAsync(projectRoot, opts);\n\n  return opts;\n}\n\n// The main purpose of this function is to take existing options object and\n// support boolean args with as defined in the hasBooleanArg and getBooleanArg\n// functions.\nexport function parseRawArguments(options: RawStartOptions, rawArgs: string[]): NormalizedOptions {\n  const opts: NormalizedOptions = {\n    ...options, // This is necessary to ensure we don't drop any options\n    webOnly: !!options.webOnly, // This is only ever true in the start:web command\n    nonInteractive: options.parent?.nonInteractive,\n    // setBooleanArg is used to flip the default commander logic which automatically sets a value to `true` if the inverse option isn't provided.\n    // ex: `dev == true` if `--no-dev` is a possible flag, but `--no-dev` was not provided in the command.\n    dev: setBooleanArg('dev', rawArgs, true),\n    minify: setBooleanArg('minify', rawArgs, false),\n    https: setBooleanArg('https', rawArgs, false),\n  };\n\n  if (hasBooleanArg(rawArgs, 'android')) {\n    opts.android = getBooleanArg(rawArgs, 'android');\n  }\n\n  if (hasBooleanArg(rawArgs, 'ios')) {\n    opts.ios = getBooleanArg(rawArgs, 'ios');\n  }\n\n  if (hasBooleanArg(rawArgs, 'web')) {\n    opts.web = getBooleanArg(rawArgs, 'web');\n  }\n\n  if (hasBooleanArg(rawArgs, 'localhost')) {\n    opts.localhost = getBooleanArg(rawArgs, 'localhost');\n  }\n\n  if (hasBooleanArg(rawArgs, 'lan')) {\n    opts.lan = getBooleanArg(rawArgs, 'lan');\n  }\n\n  if (hasBooleanArg(rawArgs, 'tunnel')) {\n    opts.tunnel = getBooleanArg(rawArgs, 'tunnel');\n  }\n\n  return opts;\n}\n\nasync function cacheOptionsAsync(projectDir: string, options: NormalizedOptions): Promise<void> {\n  await ProjectSettings.setAsync(projectDir, {\n    devClient: options.devClient,\n    scheme: options.scheme,\n    dev: options.dev,\n    minify: options.minify,\n    https: options.https,\n  });\n}\n\nexport function parseStartOptions(\n  options: NormalizedOptions,\n  exp: ExpoConfig\n): Project.StartOptions {\n  const startOpts: Project.StartOptions = {};\n\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.nonInteractive) {\n    startOpts.nonInteractive = true;\n  }\n\n  if (options.webOnly) {\n    startOpts.webOnly = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  if (options.devClient) {\n    startOpts.devClient = true;\n  }\n\n  if (isLegacyImportsEnabled(exp)) {\n    // For `expo start`, the default target is 'managed', for both managed *and* bare apps.\n    // See: https://docs.expo.io/bare/using-expo-client\n    startOpts.target = options.devClient ? 'bare' : 'managed';\n    Log.debug('Using target: ', startOpts.target);\n  }\n\n  return startOpts;\n}\n"],"file":"parseStartOptions.js"}
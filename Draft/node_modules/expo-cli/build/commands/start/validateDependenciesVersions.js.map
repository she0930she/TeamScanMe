{"version":3,"sources":["../../../src/commands/start/validateDependenciesVersions.ts"],"names":["validateDependenciesVersionsAsync","projectRoot","exp","pkg","Versions","gteSdkVersion","bundleNativeModulesPath","resolveFrom","silent","Log","warn","chalk","underline","bundledNativeModules","JsonFile","readAsync","bundledNativeModulesNames","Object","keys","projectDependencies","dependencies","modulesToCheck","incorrectDeps","moduleName","expectedRange","actualRange","semver","valid","validRange","intersects","push","length","forEach","inverse"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,iCAAf,CACLC,WADK,EAELC,GAFK,EAGLC,GAHK,EAIU;AACf,MAAI,CAACC,gBAASC,aAAT,CAAuBH,GAAvB,EAA4B,QAA5B,CAAL,EAA4C;AAC1C;AACD;;AAED,QAAMI,uBAAuB,GAAGC,uBAAYC,MAAZ,CAAmBP,WAAnB,EAAgC,gCAAhC,CAAhC;;AACA,MAAI,CAACK,uBAAL,EAA8B;AAC5BG,mBAAIC,IAAJ,CACG,qDAAoDC,iBAAMC,SAAN,CACnD,MADmD,CAEnD,qCAHJ;;AAKA;AACD;;AAED,QAAMC,oBAAoB,GAAG,MAAMC,oBAASC,SAAT,CAAmBT,uBAAnB,CAAnC;AACA,QAAMU,yBAAyB,GAAGC,MAAM,CAACC,IAAP,CAAYL,oBAAZ,CAAlC;AACA,QAAMM,mBAAmB,GAAGF,MAAM,CAACC,IAAP,CAAYf,GAAG,CAACiB,YAAJ,IAAoB,EAAhC,CAA5B;AAEA,QAAMC,cAAc,GAAG,6BAAaL,yBAAb,EAAwCG,mBAAxC,CAAvB;AACA,QAAMG,aAAa,GAAG,EAAtB;;AACA,OAAK,MAAMC,UAAX,IAAyBF,cAAzB,EAAyC;AACvC,UAAMG,aAAa,GAAGX,oBAAoB,CAACU,UAAD,CAA1C;AACA,UAAME,WAAW,GAAGtB,GAAG,CAACiB,YAAJ,CAAiBG,UAAjB,CAApB;;AACA,QACE,CAACG,kBAAOC,KAAP,CAAaF,WAAb,KAA6BC,kBAAOE,UAAP,CAAkBH,WAAlB,CAA9B,KACA,OAAOD,aAAP,KAAyB,QADzB,IAEA,CAACE,kBAAOG,UAAP,CAAkBL,aAAlB,EAAiCC,WAAjC,CAHH,EAIE;AACAH,MAAAA,aAAa,CAACQ,IAAd,CAAmB;AACjBP,QAAAA,UADiB;AAEjBC,QAAAA,aAFiB;AAGjBC,QAAAA;AAHiB,OAAnB;AAKD;AACF;;AACD,MAAIH,aAAa,CAACS,MAAd,GAAuB,CAA3B,EAA8B;AAC5BtB,mBAAIC,IAAJ,CAAS,6EAAT;;AACAY,IAAAA,aAAa,CAACU,OAAd,CAAsB,CAAC;AAAET,MAAAA,UAAF;AAAcC,MAAAA,aAAd;AAA6BC,MAAAA;AAA7B,KAAD,KAAgD;AACpEhB,qBAAIC,IAAJ,CACG,MAAKC,iBAAMC,SAAN,CAAgBW,UAAhB,CAA4B,8BAA6BZ,iBAAMC,SAAN,CAC7DY,aAD6D,CAE7D,gCAA+Bb,iBAAMC,SAAN,CAAgBa,WAAhB,CAA6B,EAHhE;AAKD,KAND;;AAOAhB,mBAAIC,IAAJ,CACE,kGACG,kEAAiEC,iBAAMsB,OAAN,CAChE,iCADgE,CAEhE,EAJN;AAMD;AACF","sourcesContent":["import { ExpoConfig, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport { Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport intersection from 'lodash/intersection';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport Log from '../../log';\n\nexport async function validateDependenciesVersionsAsync(\n  projectRoot: string,\n  exp: ExpoConfig,\n  pkg: PackageJSONConfig\n): Promise<void> {\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const bundleNativeModulesPath = resolveFrom.silent(projectRoot, 'expo/bundledNativeModules.json');\n  if (!bundleNativeModulesPath) {\n    Log.warn(\n      `Your project is in SDK version >= 33.0.0, but the ${chalk.underline(\n        'expo'\n      )} package version seems to be older.`\n    );\n    return;\n  }\n\n  const bundledNativeModules = await JsonFile.readAsync(bundleNativeModulesPath);\n  const bundledNativeModulesNames = Object.keys(bundledNativeModules);\n  const projectDependencies = Object.keys(pkg.dependencies || []);\n\n  const modulesToCheck = intersection(bundledNativeModulesNames, projectDependencies);\n  const incorrectDeps = [];\n  for (const moduleName of modulesToCheck) {\n    const expectedRange = bundledNativeModules[moduleName];\n    const actualRange = pkg.dependencies[moduleName];\n    if (\n      (semver.valid(actualRange) || semver.validRange(actualRange)) &&\n      typeof expectedRange === 'string' &&\n      !semver.intersects(expectedRange, actualRange)\n    ) {\n      incorrectDeps.push({\n        moduleName,\n        expectedRange,\n        actualRange,\n      });\n    }\n  }\n  if (incorrectDeps.length > 0) {\n    Log.warn('Some dependencies are incompatible with the installed expo package version:');\n    incorrectDeps.forEach(({ moduleName, expectedRange, actualRange }) => {\n      Log.warn(\n        ` - ${chalk.underline(moduleName)} - expected version range: ${chalk.underline(\n          expectedRange\n        )} - actual version installed: ${chalk.underline(actualRange)}`\n      );\n    });\n    Log.warn(\n      'Your project may not work correctly until you install the correct versions of the packages.\\n' +\n        `To install the correct versions of these packages, please run: ${chalk.inverse(\n          'expo install [package-name ...]'\n        )}`\n    );\n  }\n}\n"],"file":"validateDependenciesVersions.js"}
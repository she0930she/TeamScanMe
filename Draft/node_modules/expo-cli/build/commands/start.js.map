{"version":3,"sources":["../../src/commands/start.ts"],"names":["action","projectRoot","options","Log","log","chalk","gray","exp","pkg","getConfig","skipSDKVersionRequirement","webOnly","urlOpts","optsAsync","rootPath","path","resolve","tryOpeningDevToolsAsync","Versions","gteSdkVersion","ensureTypeScriptSetupAsync","validateDependenciesVersionsAsync","assertProjectHasExpoExtensionFilesAsync","startOptions","parseStartOptions","Project","startAsync","url","UrlUtils","constructDeepLinkAsync","recipient","sendTo","getRecipient","sendUrlAsync","handleMobileOptsAsync","isTerminalUIEnabled","nonInteractive","isDetached","TerminalUI","newLine","printQRCode","underline","nested","dim","program","command","alias","description","helpGroup","option","allowOffline","asyncActionProjectDir","normalizedOptions"],"mappings":"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","sourcesContent":["import { getConfig, isLegacyImportsEnabled } from '@expo/config';\nimport { Project, UrlUtils, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport Log from '../log';\nimport * as sendTo from '../sendTo';\nimport urlOpts from '../urlOpts';\nimport * as TerminalUI from './start/TerminalUI';\nimport { installExitHooks } from './start/installExitHooks';\nimport { tryOpeningDevToolsAsync } from './start/openDevTools';\nimport {\n  NormalizedOptions,\n  normalizeOptionsAsync,\n  parseStartOptions,\n  RawStartOptions,\n} from './start/parseStartOptions';\nimport { validateDependenciesVersionsAsync } from './start/validateDependenciesVersions';\nimport { assertProjectHasExpoExtensionFilesAsync } from './utils/deprecatedExtensionWarnings';\nimport { profileMethod } from './utils/profileMethod';\nimport { ensureTypeScriptSetupAsync } from './utils/typescript/ensureTypeScriptSetup';\n\nasync function action(projectRoot: string, options: NormalizedOptions): Promise<void> {\n  Log.log(chalk.gray(`Starting project at ${projectRoot}`));\n\n  // Add clean up hooks\n  installExitHooks(projectRoot);\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot, {\n    skipSDKVersionRequirement: options.webOnly,\n  });\n\n  // Assert various random things\n  // TODO: split up this method\n  await profileMethod(urlOpts.optsAsync)(projectRoot, options);\n\n  // TODO: This is useless on mac, check if useless on win32\n  const rootPath = path.resolve(projectRoot);\n\n  // Optionally open the developer tools UI.\n  await profileMethod(tryOpeningDevToolsAsync)(rootPath, {\n    exp,\n    options,\n  });\n\n  if (Versions.gteSdkVersion(exp, '34.0.0')) {\n    await profileMethod(ensureTypeScriptSetupAsync)(projectRoot);\n  }\n\n  if (!options.webOnly) {\n    // TODO: only validate dependencies if starting in managed workflow\n    await profileMethod(validateDependenciesVersionsAsync)(projectRoot, exp, pkg);\n    // Warn about expo extensions.\n    if (!isLegacyImportsEnabled(exp)) {\n      // Adds a few seconds in basic projects so we should\n      // drop this in favor of the upgrade version as soon as possible.\n      await profileMethod(assertProjectHasExpoExtensionFilesAsync)(projectRoot);\n    }\n  }\n\n  const startOptions = profileMethod(parseStartOptions)(options, exp);\n\n  await profileMethod(Project.startAsync)(rootPath, { ...startOptions, exp });\n\n  // Send to option...\n  const url = await profileMethod(\n    UrlUtils.constructDeepLinkAsync,\n    'UrlUtils.constructDeepLinkAsync'\n  )(projectRoot);\n  const recipient = await profileMethod(sendTo.getRecipient)(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  // Open project on devices.\n  await profileMethod(urlOpts.handleMobileOptsAsync)(projectRoot, options);\n\n  // Present the Terminal UI.\n  const isTerminalUIEnabled = !options.nonInteractive && !exp.isDetached;\n\n  if (isTerminalUIEnabled) {\n    await profileMethod(TerminalUI.startAsync, 'TerminalUI.startAsync')(projectRoot, startOptions);\n  } else {\n    if (!exp.isDetached) {\n      Log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    Log.log(`Your native app is running at ${chalk.underline(url)}`);\n  }\n\n  // Final note about closing the server.\n  if (!options.webOnly) {\n    Log.nested(`Logs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  } else {\n    Log.nested(\n      `\\nLogs for your project will appear in the browser console. ${chalk.dim(\n        `Press Ctrl+C to exit.`\n      )}`\n    );\n  }\n}\n\nexport default (program: any) => {\n  program\n    .command('start [path]')\n    .alias('r')\n    .description('Start a local dev server for the app')\n    .helpGroup('core')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectRoot: string, options: RawStartOptions): Promise<void> => {\n        const normalizedOptions = await normalizeOptionsAsync(projectRoot, options);\n        return await action(projectRoot, normalizedOptions);\n      }\n    );\n\n  program\n    .command('start:web [path]')\n    .alias('web')\n    .description('Start a Webpack dev server for the web app')\n    .helpGroup('core')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectRoot: string, options: RawStartOptions): Promise<void> => {\n        const normalizedOptions = await normalizeOptionsAsync(projectRoot, {\n          ...options,\n          webOnly: true,\n        });\n        return await action(projectRoot, normalizedOptions);\n      }\n    );\n};\n"],"file":"start.js"}
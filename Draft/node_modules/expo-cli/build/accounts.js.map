{"version":3,"sources":["../src/accounts.ts"],"names":["UserManager","initialize","UserSecondFactorDeviceMethod","loginOrRegisterAsync","Log","warn","process","env","EXPO_CLI_USERNAME","EXPO_CLI_PASSWORD","login","username","password","program","nonInteractive","CommandError","name","question","type","message","choices","title","value","action","openRegistrationInBrowser","newLine","log","chalk","bold","SilentError","loginOrRegisterIfLoggedOutAsync","user","getCurrentUserOnlyAsync","options","getCurrentUserAsync","accessToken","parent","green","_usernamePasswordAuth","otp","_promptForOTPAsync","cancelBehavior","enterMessage","otpQuestion","_promptForBackupOTPAsync","secondFactorDevices","nonPrimarySecondFactorDevices","filter","device","is_primary","length","hasAuthenticatorSecondFactorDevice","find","method","AUTHENTICATOR","smsNonPrimarySecondFactorDevices","SMS","authenticatorChoiceSentinel","cancelChoiceSentinel","deviceChoices","map","idx","sms_phone_number","push","selectedValue","apiAnonymous","ApiV2","clientForUser","postAsync","secondFactorDeviceID","id","_retryUsernamePasswordAuthWithOTPAsync","metadata","smsAutomaticallySent","undefined","primaryDevice","nested","loginAsync","questions","format","val","trim","validate","nonEmptyInput","answers","data","e","ApiV2Error","code","Error","REGISTRATION_URL","spinner","start","opened","succeed","fail"],"mappings":"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","sourcesContent":["import { ApiV2, User, UserManager } from '@expo/xdl';\nimport { ApiV2Error } from '@expo/xdl/build/ApiV2';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport ora from 'ora';\nimport openBrowser from 'react-dev-utils/openBrowser';\n\nimport CommandError, { SilentError } from './CommandError';\nimport { assert } from './assert';\nimport Log from './log';\nimport promptNew, { confirmAsync, Question as NewQuestion, selectAsync } from './prompts';\nimport { nonEmptyInput } from './validators';\n\nUserManager.initialize();\n\ntype CommandOptions = {\n  username?: string;\n  password?: string;\n  otp?: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport enum UserSecondFactorDeviceMethod {\n  AUTHENTICATOR = 'authenticator',\n  SMS = 'sms',\n}\n\nexport type SecondFactorDevice = {\n  id: string;\n  method: UserSecondFactorDeviceMethod;\n  sms_phone_number: string | null;\n  is_primary: boolean;\n};\n\nexport async function loginOrRegisterAsync(): Promise<User> {\n  Log.warn('An Expo user account is required to proceed.');\n\n  // Always try to auto-login when these variables are set, even in non-interactive mode\n  if (process.env.EXPO_CLI_USERNAME && process.env.EXPO_CLI_PASSWORD) {\n    return login({\n      username: process.env.EXPO_CLI_USERNAME,\n      password: process.env.EXPO_CLI_PASSWORD,\n    });\n  }\n\n  if (program.nonInteractive) {\n    throw new CommandError(\n      'NOT_LOGGED_IN',\n      `Not logged in. Use \\`${program.name()} login -u username -p password\\` to log in.`\n    );\n  }\n\n  const question: NewQuestion = {\n    type: 'select',\n    name: 'action',\n    message: 'How would you like to authenticate?',\n    choices: [\n      {\n        title: 'Make a new Expo account',\n        value: 'register',\n      },\n      {\n        title: 'Log in with an existing Expo account',\n        value: 'existingUser',\n      },\n      {\n        title: 'Cancel',\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const { action } = await promptNew(question);\n\n  if (action === 'register') {\n    openRegistrationInBrowser();\n    Log.newLine();\n    Log.log(\n      `Log in with ${chalk.bold(\n        'expo login'\n      )} after you have created your account through the website.`\n    );\n    throw new SilentError();\n  } else if (action === 'existingUser') {\n    return login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function loginOrRegisterIfLoggedOutAsync(): Promise<User> {\n  const user = await UserManager.getCurrentUserOnlyAsync();\n  if (user) {\n    return user;\n  }\n  return await loginOrRegisterAsync();\n}\n\nexport async function login(options: CommandOptions): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync();\n  if (user?.accessToken) {\n    throw new CommandError(\n      'ACCESS_TOKEN_ERROR',\n      'Please remove the EXPO_TOKEN environment var to login with a different user.'\n    );\n  }\n\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive) {\n    if (user) {\n      const action = await confirmAsync({\n        message: `You are already logged in as ${chalk.green(user.username)}. Log in as new user?`,\n      });\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return user as User;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && process.env.EXPO_CLI_PASSWORD) {\n    return _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD, options.otp);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\"\n    );\n  }\n}\n\n/**\n * Prompt for an OTP with the option to cancel the question by answering empty (pressing return key).\n */\nasync function _promptForOTPAsync(cancelBehavior: 'cancel' | 'menu'): Promise<string | null> {\n  const enterMessage =\n    cancelBehavior === 'cancel'\n      ? `press ${Log.chalk.bold('Enter')} to cancel`\n      : `press ${Log.chalk.bold('Enter')} for more options`;\n  const otpQuestion: NewQuestion = {\n    type: 'text',\n    name: 'otp',\n    message: `One-time password or backup code (${enterMessage}):`,\n  };\n\n  const { otp } = await promptNew(otpQuestion);\n  if (!otp) {\n    return null;\n  }\n\n  return otp;\n}\n\n/**\n * Prompt for user to choose a backup OTP method. If selected method is SMS, a request\n * for a new OTP will be sent to that method. Then, prompt for the OTP, and retry the user login.\n */\nasync function _promptForBackupOTPAsync(\n  username: string,\n  password: string,\n  secondFactorDevices: SecondFactorDevice[]\n): Promise<string | null> {\n  const nonPrimarySecondFactorDevices = secondFactorDevices.filter(device => !device.is_primary);\n\n  if (nonPrimarySecondFactorDevices.length === 0) {\n    throw new CommandError(\n      'LOGIN_CANCELLED',\n      'No other second-factor devices set up. Ensure you have set up and certified a backup device.'\n    );\n  }\n\n  const hasAuthenticatorSecondFactorDevice = nonPrimarySecondFactorDevices.find(\n    device => device.method === UserSecondFactorDeviceMethod.AUTHENTICATOR\n  );\n\n  const smsNonPrimarySecondFactorDevices = nonPrimarySecondFactorDevices.filter(\n    device => device.method === UserSecondFactorDeviceMethod.SMS\n  );\n\n  const authenticatorChoiceSentinel = -1;\n  const cancelChoiceSentinel = -2;\n\n  const deviceChoices = smsNonPrimarySecondFactorDevices.map((device, idx) => ({\n    title: device.sms_phone_number!,\n    value: idx,\n  }));\n\n  if (hasAuthenticatorSecondFactorDevice) {\n    deviceChoices.push({\n      title: 'Authenticator',\n      value: authenticatorChoiceSentinel,\n    });\n  }\n\n  deviceChoices.push({\n    title: 'Cancel',\n    value: cancelChoiceSentinel,\n  });\n\n  const question = {\n    message: 'Select a second-factor device:',\n    choices: deviceChoices,\n  };\n\n  const selectedValue = await selectAsync(question);\n  if (selectedValue === cancelChoiceSentinel) {\n    return null;\n  } else if (selectedValue === authenticatorChoiceSentinel) {\n    return await _promptForOTPAsync('cancel');\n  }\n\n  const device = smsNonPrimarySecondFactorDevices[selectedValue];\n\n  const apiAnonymous = ApiV2.clientForUser();\n  await apiAnonymous.postAsync('auth/send-sms-otp', {\n    username,\n    password,\n    secondFactorDeviceID: device.id,\n  });\n\n  return await _promptForOTPAsync('cancel');\n}\n\n/**\n * Handle the special case error indicating that a second-factor is required for\n * authentication.\n *\n * There are three cases we need to handle:\n * 1. User's primary second-factor device was SMS, OTP was automatically sent by the server to that\n *    device already. In this case we should just prompt for the SMS OTP (or backup code), which the\n *    user should be receiving shortly. We should give the user a way to cancel and the prompt and move\n *    to case 3 below.\n * 2. User's primary second-factor device is authenticator. In this case we should prompt for authenticator\n *    OTP (or backup code) and also give the user a way to cancel and move to case 3 below.\n * 3. User doesn't have a primary device or doesn't have access to their primary device. In this case\n *    we should show a picker of the SMS devices that they can have an OTP code sent to, and when\n *    the user picks one we show a prompt() for the sent OTP.\n */\nexport async function _retryUsernamePasswordAuthWithOTPAsync(\n  username: string,\n  password: string,\n  metadata: {\n    secondFactorDevices?: SecondFactorDevice[];\n    smsAutomaticallySent?: boolean;\n  }\n): Promise<User> {\n  const { secondFactorDevices, smsAutomaticallySent } = metadata;\n  assert(\n    secondFactorDevices !== undefined && smsAutomaticallySent !== undefined,\n    `Malformed OTP error metadata: ${metadata}`\n  );\n\n  const primaryDevice = secondFactorDevices.find(device => device.is_primary);\n  let otp: string | null = null;\n\n  if (smsAutomaticallySent) {\n    assert(primaryDevice, 'OTP should only automatically be sent when there is a primary device');\n    Log.nested(\n      `One-time password was sent to the phone number ending in ${primaryDevice.sms_phone_number}.`\n    );\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  if (primaryDevice?.method === UserSecondFactorDeviceMethod.AUTHENTICATOR) {\n    Log.nested('One-time password from authenticator required.');\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  // user bailed on case 1 or 2, wants to move to case 3\n  if (!otp) {\n    otp = await _promptForBackupOTPAsync(username, password, secondFactorDevices);\n  }\n\n  if (!otp) {\n    throw new CommandError('LOGIN_CANCELLED', 'Cancelled login');\n  }\n\n  return await UserManager.loginAsync('user-pass', {\n    username,\n    password,\n    otp,\n  });\n}\n\nasync function _usernamePasswordAuth(\n  username?: string,\n  password?: string,\n  otp?: string\n): Promise<User> {\n  const questions: NewQuestion[] = [];\n  if (!username) {\n    questions.push({\n      type: 'text',\n      name: 'username',\n      message: 'Username/Email Address:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  const answers = await promptNew(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n    otp: otp || answers.otp,\n  };\n\n  let user: User;\n  try {\n    user = await UserManager.loginAsync('user-pass', data);\n  } catch (e) {\n    if (e instanceof ApiV2Error && e.code === 'ONE_TIME_PASSWORD_REQUIRED') {\n      user = await _retryUsernamePasswordAuthWithOTPAsync(\n        data.username,\n        data.password,\n        e.metadata as any\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  if (user) {\n    Log.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport const REGISTRATION_URL = `https://expo.io/signup`;\n\nexport function openRegistrationInBrowser() {\n  const spinner = ora(`Opening ${REGISTRATION_URL}...`).start();\n  const opened = openBrowser(REGISTRATION_URL);\n\n  if (opened) {\n    spinner.succeed(`Opened ${REGISTRATION_URL} in your web browser.`);\n  } else {\n    spinner.fail(\n      `Unable to open a web browser. Please open your browser and navigate to ${REGISTRATION_URL}.`\n    );\n  }\n}\n"],"file":"accounts.js"}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.home = home;
exports.isDebug = isDebug;
exports.isStaging = isStaging;
exports.isLocal = isLocal;
exports.maySkipManifestValidation = maySkipManifestValidation;
exports.shouldUseDevServer = shouldUseDevServer;

function _getenv() {
  const data = _interopRequireDefault(require("getenv"));

  _getenv = function () {
    return data;
  };

  return data;
}

function _os() {
  const data = _interopRequireDefault(require("os"));

  _os = function () {
    return data;
  };

  return data;
}

function Versions() {
  const data = _interopRequireWildcard(require("./Versions"));

  Versions = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function home() {
  return _os().default.homedir();
}

function isDebug() {
  return _getenv().default.boolish('EXPO_DEBUG', false);
}

function isStaging() {
  return _getenv().default.boolish('EXPO_STAGING', false);
}

function isLocal() {
  return _getenv().default.boolish('EXPO_LOCAL', false);
}

function maySkipManifestValidation() {
  return !!_getenv().default.string('EXPO_SKIP_MANIFEST_VALIDATION_TOKEN');
}
/**
 * Returns true if we should use Metro using its JS APIs via @expo/dev-server (the modern and fast
 * way), false if we should fall back to spawning it as a subprocess (supported for backwards
 * compatibility with SDK39 and older).
 */


function shouldUseDevServer(exp) {
  return Versions().gteSdkVersion(exp, '40.0.0') || _getenv().default.boolish('EXPO_USE_DEV_SERVER', false);
}
//# sourceMappingURL=__sourcemaps__/Env.js.map

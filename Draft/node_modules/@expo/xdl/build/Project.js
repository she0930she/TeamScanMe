"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setOptionsAsync = setOptionsAsync;
exports.currentStatus = currentStatus;
Object.defineProperty(exports, "startTunnelsAsync", {
  enumerable: true,
  get: function () {
    return _ngrok().startTunnelsAsync;
  }
});
Object.defineProperty(exports, "stopTunnelsAsync", {
  enumerable: true,
  get: function () {
    return _ngrok().stopTunnelsAsync;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _startDevServerAsync().StartOptions;
  }
});
Object.defineProperty(exports, "startExpoServerAsync", {
  enumerable: true,
  get: function () {
    return _startLegacyExpoServerAsync().startExpoServerAsync;
  }
});
Object.defineProperty(exports, "startReactNativeServerAsync", {
  enumerable: true,
  get: function () {
    return _startLegacyReactNativeServerAsync().startReactNativeServerAsync;
  }
});
Object.defineProperty(exports, "stopReactNativeServerAsync", {
  enumerable: true,
  get: function () {
    return _startLegacyReactNativeServerAsync().stopReactNativeServerAsync;
  }
});
Object.defineProperty(exports, "startAsync", {
  enumerable: true,
  get: function () {
    return _startAsync().startAsync;
  }
});
Object.defineProperty(exports, "stopAsync", {
  enumerable: true,
  get: function () {
    return _startAsync().stopAsync;
  }
});
Object.defineProperty(exports, "PublishedProjectResult", {
  enumerable: true,
  get: function () {
    return _publishAsync().PublishedProjectResult;
  }
});
Object.defineProperty(exports, "publishAsync", {
  enumerable: true,
  get: function () {
    return _publishAsync().publishAsync;
  }
});
Object.defineProperty(exports, "exportAppAsync", {
  enumerable: true,
  get: function () {
    return _exportAppAsync().exportAppAsync;
  }
});
Object.defineProperty(exports, "runHook", {
  enumerable: true,
  get: function () {
    return _runHook().runHook;
  }
});
Object.defineProperty(exports, "mergeAppDistributions", {
  enumerable: true,
  get: function () {
    return _mergeAppDistributions().mergeAppDistributions;
  }
});

function ProjectSettings() {
  const data = _interopRequireWildcard(require("./ProjectSettings"));

  ProjectSettings = function () {
    return data;
  };

  return data;
}

function _XDLError() {
  const data = _interopRequireDefault(require("./XDLError"));

  _XDLError = function () {
    return data;
  };

  return data;
}

function _errors() {
  const data = require("./project/errors");

  _errors = function () {
    return data;
  };

  return data;
}

function _ngrok() {
  const data = require("./start/ngrok");

  _ngrok = function () {
    return data;
  };

  return data;
}

function _startDevServerAsync() {
  const data = require("./start/startDevServerAsync");

  _startDevServerAsync = function () {
    return data;
  };

  return data;
}

function _startLegacyExpoServerAsync() {
  const data = require("./start/startLegacyExpoServerAsync");

  _startLegacyExpoServerAsync = function () {
    return data;
  };

  return data;
}

function _startLegacyReactNativeServerAsync() {
  const data = require("./start/startLegacyReactNativeServerAsync");

  _startLegacyReactNativeServerAsync = function () {
    return data;
  };

  return data;
}

function _startAsync() {
  const data = require("./start/startAsync");

  _startAsync = function () {
    return data;
  };

  return data;
}

function _publishAsync() {
  const data = require("./project/publishAsync");

  _publishAsync = function () {
    return data;
  };

  return data;
}

function _exportAppAsync() {
  const data = require("./project/exportAppAsync");

  _exportAppAsync = function () {
    return data;
  };

  return data;
}

function _runHook() {
  const data = require("./project/runHook");

  _runHook = function () {
    return data;
  };

  return data;
}

function _mergeAppDistributions() {
  const data = require("./project/mergeAppDistributions");

  _mergeAppDistributions = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @deprecated Use `ProjectSettings.setPackagerInfoAsync`
 * @param projectRoot
 * @param options
 */
async function setOptionsAsync(projectRoot, options) {
  (0, _errors().assertValidProjectRoot)(projectRoot); // Check to make sure all options are valid

  if (options.packagerPort != null && !Number.isInteger(options.packagerPort)) {
    throw new (_XDLError().default)('INVALID_OPTIONS', 'packagerPort must be an integer');
  }

  await ProjectSettings().setPackagerInfoAsync(projectRoot, options);
}
/**
 * @deprecated `ProjectSettings.getCurrentStatusAsync`
 * @param projectRoot
 */


async function currentStatus(projectRoot) {
  return ProjectSettings().getCurrentStatusAsync(projectRoot);
}
//# sourceMappingURL=__sourcemaps__/Project.js.map

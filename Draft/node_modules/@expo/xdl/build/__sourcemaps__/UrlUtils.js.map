{"version":3,"sources":["UrlUtils.ts"],"names":["constructBundleUrlAsync","projectRoot","opts","requestHostname","constructUrlAsync","constructDeepLinkAsync","devClient","ProjectSettings","getPackagerOptsAsync","constructDevClientUrlAsync","constructManifestUrlAsync","scheme","XDLError","protocol","resolveProtocol","urlType","manifestUrl","encodeURIComponent","constructHostUriAsync","urlString","urlObj","url","parse","slashes","format","constructLogUrlAsync","baseUrl","constructUrlWithExtensionAsync","entryPoint","ext","metroQueryOptions","defaultOpts","dev","minify","bundleUrl","hostType","mainModulePath","stripJSExtension","queryParams","constructBundleQueryParams","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","exp","constructBundleQueryParamsWithConfig","hot","strict","Versions","gteSdkVersion","QueryString","stringify","supportsAssetPlugins","usesAssetPluginsQueryParam","lteSdkVersion","pluginModule","assetPlugin","includeAssetFileHashes","constructWebAppUrlAsync","options","packagerInfo","readPackagerInfoAsync","webpackServerPort","https","readAsync","host","ip","address","assertValidOptions","schema","joi","object","keys","boolean","optional","string","allow","any","valid","lanType","urlRandomness","error","validate","toString","ensureOptionsAsync","optionsWithDefaults","detach","sdkVersion","schemes","Array","isArray","filter","firstScheme","incomingOpts","isPackager","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","Config","offline","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","ProjectUtils","logWarning","clearNotification","pnu","url_","joinURLComponents","createRedirectURL","validPort","validProtocol","replace","randomIdentifier","length","alphabet","result","i","j","Math","floor","random","c","substr","sevenDigitIdentifier","randomIdentifierForUser","username","someRandomness","join","domainify","s","toLowerCase","isHttps","isURL","protocols","requireProtocol","URL","parsed","map","x","includes","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAYO,eAAeA,uBAAf,CACLC,WADK,EAELC,IAFK,EAGLC,eAHK,EAIL;AACA,SAAO,MAAMC,iBAAiB,CAACH,WAAD,EAAcC,IAAd,EAAoB,IAApB,EAA0BC,eAA1B,CAA9B;AACD;;AAEM,eAAeE,sBAAf,CACLJ,WADK,EAELC,IAFK,EAGLC,eAHK,EAIL;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAgB,MAAMC,eAAe,GAACC,oBAAhB,CAAqCP,WAArC,CAA5B;;AAEA,MAAIK,SAAJ,EAAe;AACb,WAAOG,0BAA0B,CAACR,WAAD,EAAcC,IAAd,EAAoBC,eAApB,CAAjC;AACD,GAFD,MAEO;AACL,WAAOO,yBAAyB,CAACT,WAAD,EAAcC,IAAd,EAAoBC,eAApB,CAAhC;AACD;AACF;;AAEM,eAAeO,yBAAf,CACLT,WADK,EAELC,IAFK,EAGLC,eAHK,EAIL;AACA,SAAO,MAAMC,iBAAiB,CAACH,WAAD,EAAcC,IAAd,aAAcA,IAAd,cAAcA,IAAd,GAAsB,IAAtB,EAA4B,KAA5B,EAAmCC,eAAnC,CAA9B;AACD;;AAEM,eAAeM,0BAAf,CACLR,WADK,EAELC,IAFK,EAGLC,eAHK,EAIL;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAa,MAAMJ,eAAe,GAACC,oBAAhB,CAAqCP,WAArC,CAAzB;;AACA,MAAI,CAACU,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EAA2C;AACzC,UAAM,KAAIC,mBAAJ,EAAa,sBAAb,EAAqC,4CAArC,CAAN;AACD;;AACD,QAAMC,QAAQ,GAAGC,eAAe,CAACb,WAAD,EAAc;AAAEU,IAAAA,MAAF;AAAUI,IAAAA,OAAO,EAAE;AAAnB,GAAd,CAAhC;AACA,QAAMC,WAAW,GAAG,MAAMN,yBAAyB,CACjDT,WADiD,EAEjD,EAAE,GAAGC,IAAL;AAAWa,IAAAA,OAAO,EAAE;AAApB,GAFiD,EAGjDZ,eAHiD,CAAnD;AAKA,SAAQ,GAAEU,QAAS,mCAAkCI,kBAAkB,CAACD,WAAD,CAAc,EAArF;AACD,C,CAED;;;AACO,eAAeE,qBAAf,CACLjB,WADK,EAELE,eAFK,EAGY;AACjB,QAAMgB,SAAS,GAAG,MAAMf,iBAAiB,CAACH,WAAD,EAAc,IAAd,EAAoB,KAApB,EAA2BE,eAA3B,CAAzC,CADiB,CAEjB;;AACA,QAAMiB,MAAM,GAAGC,eAAIC,KAAJ,CAAUH,SAAV,CAAf;;AACAC,EAAAA,MAAM,CAACP,QAAP,GAAkB,EAAlB;AACAO,EAAAA,MAAM,CAACG,OAAP,GAAiB,KAAjB;AACA,SAAOF,eAAIG,MAAJ,CAAWJ,MAAX,CAAP;AACD;;AAEM,eAAeK,oBAAf,CACLxB,WADK,EAELE,eAFK,EAGY;AACjB,QAAMuB,OAAO,GAAG,MAAMtB,iBAAiB,CAACH,WAAD,EAAc;AAAEc,IAAAA,OAAO,EAAE;AAAX,GAAd,EAAmC,KAAnC,EAA0CZ,eAA1C,CAAvC;AACA,SAAQ,GAAEuB,OAAQ,OAAlB;AACD;;AAEM,eAAeC,8BAAf,CACL1B,WADK,EAEL2B,UAFK,EAGLC,GAHK,EAIL1B,eAJK,EAKL2B,iBALK,EAML;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE,KADa;AAElBC,IAAAA,MAAM,EAAE;AAFU,GAApB;AAIAH,EAAAA,iBAAiB,GAAGA,iBAAiB,IAAIC,WAAzC;AACA,MAAIG,SAAS,GAAG,MAAMlC,uBAAuB,CAC3CC,WAD2C,EAE3C;AACEkC,IAAAA,QAAQ,EAAE,WADZ;AAEEpB,IAAAA,OAAO,EAAE;AAFX,GAF2C,EAM3CZ,eAN2C,CAA7C;AASA,QAAMiC,cAAc,GAAGC,gBAAgB,CAACT,UAAD,CAAvC;AACAM,EAAAA,SAAS,IAAK,IAAGE,cAAe,IAAGP,GAAI,EAAvC;AAEA,QAAMS,WAAW,GAAGC,0BAA0B,CAACtC,WAAD,EAAc6B,iBAAd,CAA9C;AACA,SAAQ,GAAEI,SAAU,IAAGI,WAAY,EAAnC;AACD;;AAEM,eAAeE,wBAAf,CACLvC,WADK,EAEL2B,UAFK,EAGLzB,eAHK,EAIL2B,iBAJK,EAKY;AACjB,SAAO,MAAMH,8BAA8B,CACzC1B,WADyC,EAEzC2B,UAFyC,EAGzC,QAHyC,EAIzCzB,eAJyC,EAKzC2B,iBALyC,CAA3C;AAOD;;AAEM,eAAeW,0BAAf,CACLxC,WADK,EAEL2B,UAFK,EAGLzB,eAHK,EAIY;AACjB,SAAO,MAAMwB,8BAA8B,CAAC1B,WAAD,EAAc2B,UAAd,EAA0B,KAA1B,EAAiCzB,eAAjC,CAA3C;AACD;;AAEM,eAAeuC,uBAAf,CACLzC,WADK,EAEL2B,UAFK,EAGLzB,eAHK,EAIY;AACjB,SAAO,MAAMwB,8BAA8B,CAAC1B,WAAD,EAAc2B,UAAd,EAA0B,QAA1B,EAAoCzB,eAApC,CAA3C;AACD;;AAEM,eAAewC,0BAAf,CACL1C,WADK,EAELE,eAFK,EAGY;AACjB,SAAO,MAAMC,iBAAiB,CAC5BH,WAD4B,EAE5B;AACEc,IAAAA,OAAO,EAAE;AADX,GAF4B,EAK5B,IAL4B,EAM5BZ,eAN4B,CAA9B;AAQD;;AAEM,SAASoC,0BAAT,CAAoCtC,WAApC,EAAyDC,IAAzD,EAA0F;AAC/F,QAAM;AAAE0C,IAAAA;AAAF,MAAU,yBAAU3C,WAAV,CAAhB;AACA,SAAO4C,oCAAoC,CAAC5C,WAAD,EAAcC,IAAd,EAAoB0C,GAApB,CAA3C;AACD;;AAEM,SAASC,oCAAT,CACL5C,WADK,EAELC,IAFK,EAGL0C,GAHK,EAIG;AACR,QAAMN,WAA6C,GAAG;AACpDN,IAAAA,GAAG,EAAE,CAAC,CAAC9B,IAAI,CAAC8B,GADwC;AAEpDc,IAAAA,GAAG,EAAE;AAF+C,GAAtD;;AAKA,MAAI,YAAY5C,IAAhB,EAAsB;AACpBoC,IAAAA,WAAW,CAACS,MAAZ,GAAqB,CAAC,CAAC7C,IAAI,CAAC6C,MAA5B;AACD;;AAED,MAAI,YAAY7C,IAAhB,EAAsB;AACpB;AACAoC,IAAAA,WAAW,CAACL,MAAZ,GAAqB,CAAC,CAAC/B,IAAI,CAAC+B,MAA5B;AACD,GAbO,CAeR;;;AACA,MAAIe,QAAQ,GAACC,aAAT,CAAuBL,GAAvB,EAA4B,QAA5B,CAAJ,EAA2C;AACzC,WAAOM,uBAAYC,SAAZ,CAAsBb,WAAtB,CAAP;AACD,GAlBO,CAoBR;AAEA;AACA;;;AACA,QAAMc,oBAAoB,GAAGJ,QAAQ,GAACC,aAAT,CAAuBL,GAAvB,EAA4B,QAA5B,CAA7B;AACA,QAAMS,0BAA0B,GAAGD,oBAAoB,IAAIJ,QAAQ,GAACM,aAAT,CAAuBV,GAAvB,EAA4B,QAA5B,CAA3D;;AACA,MAAIS,0BAAJ,EAAgC;AAC9B;AACA,UAAME,YAAY,GAAG,4BAAYtD,WAAZ,EAAyB,2BAAzB,CAArB;AACAqC,IAAAA,WAAW,CAACkB,WAAZ,GAA0BvC,kBAAkB,CAACsC,YAAD,CAA5C;AACD,GAJD,MAIO,IAAI,CAACH,oBAAL,EAA2B;AAChC;AACA;AACAd,IAAAA,WAAW,CAACmB,sBAAZ,GAAqC,IAArC;AACD;;AAED,SAAOP,uBAAYC,SAAZ,CAAsBb,WAAtB,CAAP;AACD;;AAEM,eAAeoB,uBAAf,CACLzD,WADK,EAEL0D,OAAsD,GAAG,EAFpD,EAGmB;AAAA;;AACxB,QAAMC,YAAY,GAAG,MAAMrD,eAAe,GAACsD,qBAAhB,CAAsC5D,WAAtC,CAA3B;;AACA,MAAI,CAAC2D,YAAY,CAACE,iBAAlB,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,KAAF;AAAS5B,IAAAA;AAAT,MAAsB,MAAM5B,eAAe,GAACyD,SAAhB,CAA0B/D,WAA1B,CAAlC;AACA,QAAMgE,IAAI,GAAG,sBAACN,OAAO,CAACxB,QAAT,iEAAqBA,QAArB,MAAmC,WAAnC,GAAiD,WAAjD,GAA+D+B,cAAGC,OAAH,EAA5E;AAEA,MAAIpD,OAAO,GAAG,MAAd;;AACA,MAAIgD,KAAK,KAAK,IAAd,EAAoB;AAClBhD,IAAAA,OAAO,GAAG,OAAV;AACD;;AAED,SAAQ,GAAEA,OAAQ,MAAKkD,IAAK,IAAGL,YAAY,CAACE,iBAAkB,EAA9D;AACD;;AAED,SAASM,kBAAT,CAA4BlE,IAA5B,EAAmE;AACjE,QAAMmE,MAAM,GAAGC,eAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/BlE,IAAAA,SAAS,EAAEgE,eAAIG,OAAJ,GAAcC,QAAd,EADoB;AAE/B/D,IAAAA,MAAM,EAAE2D,eAAIK,MAAJ,GAAaD,QAAb,GAAwBE,KAAxB,CAA8B,IAA9B,CAFuB;AAG/B;AACA7D,IAAAA,OAAO,EAAEuD,eAAIO,GAAJ,GAAUC,KAAV,CAAgB,KAAhB,EAAuB,MAAvB,EAA+B,UAA/B,EAA2C,aAA3C,EAA0DF,KAA1D,CAAgE,IAAhE,CAJsB;AAK/BG,IAAAA,OAAO,EAAET,eAAIO,GAAJ,GAAUC,KAAV,CAAgB,IAAhB,EAAsB,UAAtB,CALsB;AAM/B3C,IAAAA,QAAQ,EAAEmC,eAAIO,GAAJ,GAAUC,KAAV,CAAgB,WAAhB,EAA6B,KAA7B,EAAoC,QAApC,CANqB;AAO/B9C,IAAAA,GAAG,EAAEsC,eAAIG,OAAJ,EAP0B;AAQ/B1B,IAAAA,MAAM,EAAEuB,eAAIG,OAAJ,EARuB;AAS/BxC,IAAAA,MAAM,EAAEqC,eAAIG,OAAJ,EATuB;AAU/BV,IAAAA,KAAK,EAAEO,eAAIG,OAAJ,GAAcC,QAAd,EAVwB;AAW/BM,IAAAA,aAAa,EAAEV,eAAIK,MAAJ,GAAaD,QAAb,GAAwBE,KAAxB,CAA8B,IAA9B;AAXgB,GAAlB,CAAf;;AAcA,QAAM;AAAEK,IAAAA;AAAF,MAAYZ,MAAM,CAACa,QAAP,CAAgBhF,IAAhB,CAAlB;;AACA,MAAI+E,KAAJ,EAAW;AACT,UAAM,KAAIrE,mBAAJ,EAAa,iBAAb,EAAgCqE,KAAK,CAACE,QAAN,EAAhC,CAAN;AACD;;AAED,SAAOjF,IAAP;AACD;;AAED,eAAekF,kBAAf,CACEnF,WADF,EAEEC,IAFF,EAGuB;AACrB,MAAIA,IAAJ,EAAU;AACRkE,IAAAA,kBAAkB,CAAClE,IAAD,CAAlB;AACD;;AAED,QAAM6B,WAAW,GAAG,MAAMxB,eAAe,GAACC,oBAAhB,CAAqCP,WAArC,CAA1B;;AACA,MAAI,CAACC,IAAL,EAAW;AACT,WAAO;AAAEa,MAAAA,OAAO,EAAE,IAAX;AAAiB,SAAGgB;AAApB,KAAP;AACD;;AACD,QAAMsD,mBAAmB,GAAG,EAAE,GAAGtD,WAAL;AAAkB,OAAG7B;AAArB,GAA5B;AACA,SAAOkE,kBAAkB,CAACiB,mBAAD,CAAzB;AACD;;AAED,SAASvE,eAAT,CACEb,WADF,EAEE;AAAEc,EAAAA,OAAF;AAAW,KAAG4C;AAAd,CAFF,EAGiB;AACf,MAAI5C,OAAO,KAAK,MAAhB,EAAwB;AACtB,WAAO,MAAP;AACD,GAFD,MAEO,IAAIA,OAAO,KAAK,aAAhB,EAA+B;AACpC,WAAO,IAAP;AACD,GAFM,MAEA,IAAIA,OAAO,KAAK,QAAhB,EAA0B;AAC/B,WAAO4C,OAAO,CAAChD,MAAf;AACD;;AACD,MAAIE,QAAQ,GAAG,KAAf;AAEA,QAAM;AAAE+B,IAAAA;AAAF,MAAU,yBAAU3C,WAAV,CAAhB,CAVe,CAYf;;AACA,QAAM;AAAEU,IAAAA,MAAF;AAAU2E,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAAiC3C,GAAvC;;AAEA,MAAI0C,MAAJ,EAAY;AACV;AACA,UAAME,OAAO,GAAG,CAACC,KAAK,CAACC,OAAN,CAAc/E,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAAlC,EAA4CgF,MAA5C,CACbhF,MAAD,IAAiB,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,CAAC,CAACA,MADnC,CAAhB,CAFU,CAKV;;AACA,UAAMiF,WAAW,GAAGJ,OAAO,CAAC,CAAD,CAA3B;;AACA,QAAII,WAAW,IAAI5C,QAAQ,GAACC,aAAT,CAAuB;AAAEsC,MAAAA;AAAF,KAAvB,EAAuC,QAAvC,CAAnB,EAAqE;AACnE1E,MAAAA,QAAQ,GAAG+E,WAAX;AACD,KAFD,MAEO,IAAIN,MAAM,CAAC3E,MAAX,EAAmB;AACxB;AACA;AACAE,MAAAA,QAAQ,GAAGyE,MAAM,CAAC3E,MAAlB;AACD;AACF;;AAED,SAAOE,QAAP;AACD;;AAEM,eAAeT,iBAAf,CACLH,WADK,EAEL4F,YAFK,EAGLC,UAHK,EAIL3F,eAJK,EAKY;AACjB,QAAMD,IAAI,GAAG,MAAMkF,kBAAkB,CAACnF,WAAD,EAAc4F,YAAd,CAArC;AAEA,QAAMjC,YAAY,GAAG,MAAMrD,eAAe,GAACsD,qBAAhB,CAAsC5D,WAAtC,CAA3B;AAEA,MAAIY,QAAQ,GAAGC,eAAe,CAACb,WAAD,EAAcC,IAAd,CAA9B;AAEA,MAAI6F,QAAJ;AACA,MAAIC,IAAJ;AAEA,QAAMC,QAAQ,GAAGH,UAAU,GACvBI,OAAO,CAACC,GAAR,CAAYC,uBADW,GAEvBF,OAAO,CAACC,GAAR,CAAYE,uBAFhB;;AAGA,MAAIJ,QAAJ,EAAc;AACZ,UAAMK,cAAc,GAAGjF,eAAIC,KAAJ,CAAU2E,QAAV,CAAvB;;AACAF,IAAAA,QAAQ,GAAGO,cAAc,CAACP,QAA1B;AACAC,IAAAA,IAAI,GAAGM,cAAc,CAACN,IAAtB;;AACA,QAAIM,cAAc,CAACzF,QAAf,KAA4B,QAAhC,EAA0C;AACxC,UAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvBA,QAAAA,QAAQ,GAAG,OAAX;AACD;;AACD,UAAI,CAACmF,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,KAAP;AACD;AACF;AACF,GAZD,MAYO,IAAI9F,IAAI,CAACiC,QAAL,KAAkB,WAAlB,IAAiChC,eAAe,KAAK,WAAzD,EAAsE;AAC3E4F,IAAAA,QAAQ,GAAG,WAAX;AACAC,IAAAA,IAAI,GAAGF,UAAU,GAAGlC,YAAY,CAAC2C,YAAhB,GAA+B3C,YAAY,CAAC4C,cAA7D;AACD,GAHM,MAGA,IAAItG,IAAI,CAACiC,QAAL,KAAkB,KAAlB,IAA2BsE,kBAAOC,OAAtC,EAA+C;AACpD,QAAIR,OAAO,CAACC,GAAR,CAAYQ,sBAAhB,EAAwC;AACtCZ,MAAAA,QAAQ,GAAGG,OAAO,CAACC,GAAR,CAAYQ,sBAAZ,CAAmCC,IAAnC,EAAX;AACD,KAFD,MAEO,IAAIV,OAAO,CAACC,GAAR,CAAYU,8BAAhB,EAAgD;AACrDd,MAAAA,QAAQ,GAAGG,OAAO,CAACC,GAAR,CAAYU,8BAAZ,CAA2CD,IAA3C,EAAX;AACD,KAFM,MAEA,IAAI1G,IAAI,CAAC6E,OAAL,KAAiB,IAArB,EAA2B;AAChC,UAAI5E,eAAJ,EAAqB;AACnB4F,QAAAA,QAAQ,GAAG5F,eAAX;AACD,OAFD,MAEO;AACL4F,QAAAA,QAAQ,GAAG7B,cAAGC,OAAH,EAAX;AACD;AACF,KANM,MAMA;AACL;AACA4B,MAAAA,QAAQ,GAAGe,cAAGf,QAAH,EAAX;AACD;;AACDC,IAAAA,IAAI,GAAGF,UAAU,GAAGlC,YAAY,CAAC2C,YAAhB,GAA+B3C,YAAY,CAAC4C,cAA7D;AACD,GAhBM,MAgBA;AACL,UAAMO,QAAQ,GAAGjB,UAAU,GAAGlC,YAAY,CAACoD,gBAAhB,GAAmCpD,YAAY,CAACqD,kBAA3E;;AACA,QAAI,CAACF,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAArC,EAA+C;AAC7C;AACA;AACAG,MAAAA,YAAY,GAACC,UAAb,CACElH,WADF,EAEE,MAFF,EAGE,4EAHF,EAIE,sBAJF;AAMA,aAAOG,iBAAiB,CACtBH,WADsB,EAEtB,EAAE,GAAGC,IAAL;AAAWiC,QAAAA,QAAQ,EAAE;AAArB,OAFsB,EAGtB2D,UAHsB,EAItB3F,eAJsB,CAAxB;AAMD,KAfD,MAeO;AACL+G,MAAAA,YAAY,GAACE,iBAAb,CAA+BnH,WAA/B,EAA4C,sBAA5C;;AACA,YAAMoH,GAAG,GAAGhG,eAAIC,KAAJ,CAAUyF,QAAV,CAAZ;;AACAhB,MAAAA,QAAQ,GAAGsB,GAAG,CAACtB,QAAf;AACAC,MAAAA,IAAI,GAAGqB,GAAG,CAACrB,IAAX;AACD;AACF;;AAED,QAAMsB,IAAI,GAAGC,iBAAiB,CAAC;AAAE1G,IAAAA,QAAF;AAAYkF,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAAD,CAA9B;;AAEA,MAAI9F,IAAI,CAACa,OAAL,KAAiB,UAArB,EAAiC;AAC/B,WAAOyG,iBAAiB,CAACF,IAAD,CAAxB;AACD;;AAED,SAAOA,IAAP;AACD;;AAED,SAASE,iBAAT,CAA2BnG,GAA3B,EAAgD;AAC9C,SAAQ,8BAA6BJ,kBAAkB,CAACI,GAAD,CAAM,EAA7D;AACD;;AAED,SAASkG,iBAAT,CAA2B;AACzB1G,EAAAA,QADyB;AAEzBkF,EAAAA,QAFyB;AAGzBC,EAAAA;AAHyB,CAA3B,EAQW;AACT,yBAAOD,QAAP,EAAiB,8BAAjB,EADS,CAET;;AACA,QAAM0B,SAAS,GAAGzB,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAW,IAA1B;AACA,QAAM0B,aAAa,GAAG7G,QAAQ,GAAI,GAAEA,QAAS,KAAf,GAAsB,EAApD;AAEA,SAAQ,GAAE6G,aAAc,GAAE3B,QAAS,IAAG0B,SAAU,EAAhD;AACD;;AAEM,SAASpF,gBAAT,CAA0BT,UAA1B,EAAsD;AAC3D,SAAOA,UAAU,CAAC+F,OAAX,CAAmB,OAAnB,EAA4B,EAA5B,CAAP;AACD;;AAEM,SAASC,gBAAT,CAA0BC,MAAc,GAAG,CAA3C,EAAsD;AAC3D,QAAMC,QAAQ,GAAG,kCAAjB;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,QAAQ,CAACD,MAApC,CAAV;AACA,UAAMQ,CAAC,GAAGP,QAAQ,CAACQ,MAAT,CAAgBL,CAAhB,EAAmB,CAAnB,CAAV;AACAF,IAAAA,MAAM,IAAIM,CAAV;AACD;;AACD,SAAON,MAAP;AACD;;AAEM,SAASQ,oBAAT,GAAwC;AAC7C,SAAQ,GAAEX,gBAAgB,CAAC,CAAD,CAAI,IAAGA,gBAAgB,CAAC,CAAD,CAAI,EAArD;AACD;;AAEM,SAASY,uBAAT,CAAiCC,QAAjC,EAA2D;AAChE,SAAQ,GAAEA,QAAS,IAAGb,gBAAgB,CAAC,CAAD,CAAI,IAAGA,gBAAgB,CAAC,CAAD,CAAI,EAAjE;AACD;;AAEM,SAASc,cAAT,GAAkC;AACvC,SAAO,CAACd,gBAAgB,CAAC,CAAD,CAAjB,EAAsBA,gBAAgB,CAAC,CAAD,CAAtC,EAA2Ce,IAA3C,CAAgD,GAAhD,CAAP;AACD;;AAEM,SAASC,SAAT,CAAmBC,CAAnB,EAAsC;AAC3C,SAAOA,CAAC,CACLC,WADI,GAEJnB,OAFI,CAEI,aAFJ,EAEmB,GAFnB,EAGJA,OAHI,CAGI,KAHJ,EAGW,EAHX,EAIJA,OAJI,CAII,KAJJ,EAIW,EAJX,CAAP;AAKD;;AAEM,SAASoB,OAAT,CAAiB5H,SAAjB,EAA6C;AAClD,SAAO6H,KAAK,CAAC7H,SAAD,EAAY;AAAE8H,IAAAA,SAAS,EAAE,CAAC,OAAD;AAAb,GAAZ,CAAZ;AACD;;AAEM,SAASD,KAAT,CACL7H,SADK,EAEL;AAAE8H,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAFK,EAGL;AACA,MAAI;AACF;AACA,SAAI7H,eAAI8H,GAAR,EAAYhI,SAAZ;;AACA,UAAMiI,MAAM,GAAG/H,eAAIC,KAAJ,CAAUH,SAAV,CAAf;;AACA,QAAI,CAACiI,MAAM,CAACvI,QAAR,IAAoB,CAACqI,eAAzB,EAA0C;AACxC,aAAO,IAAP;AACD;;AACD,WAAOD,SAAS,GACZG,MAAM,CAACvI,QAAP,GACEoI,SAAS,CAACI,GAAV,CAAcC,CAAC,IAAK,GAAEA,CAAC,CAACR,WAAF,EAAgB,GAAtC,EAA0CS,QAA1C,CAAmDH,MAAM,CAACvI,QAA1D,CADF,GAEE,KAHU,GAIZ,IAJJ;AAKD,GAZD,CAYE,OAAO2I,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport joi from '@hapi/joi';\nimport assert from 'assert';\nimport os from 'os';\nimport QueryString from 'querystring';\nimport resolveFrom from 'resolve-from';\nimport url from 'url';\n\nimport Config from './Config';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\nimport ip from './ip';\nimport * as ProjectUtils from './project/ProjectUtils';\n\ninterface URLOptions extends Omit<ProjectSettings.ProjectSettings, 'urlRandomness'> {\n  urlType: null | 'exp' | 'http' | 'no-protocol' | 'redirect' | 'custom';\n}\n\ninterface MetroQueryOptions {\n  dev?: boolean;\n  strict?: boolean;\n  minify?: boolean;\n}\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructDeepLinkAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  const { devClient } = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n\n  if (devClient) {\n    return constructDevClientUrlAsync(projectRoot, opts, requestHostname);\n  } else {\n    return constructManifestUrlAsync(projectRoot, opts, requestHostname);\n  }\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts ?? null, false, requestHostname);\n}\n\nexport async function constructDevClientUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  const { scheme } = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!scheme || typeof scheme !== 'string') {\n    throw new XDLError('NO_DEV_CLIENT_SCHEME', 'No scheme specified for development client');\n  }\n  const protocol = resolveProtocol(projectRoot, { scheme, urlType: 'custom' });\n  const manifestUrl = await constructManifestUrlAsync(\n    projectRoot,\n    { ...opts, urlType: 'http' },\n    requestHostname\n  );\n  return `${protocol}://expo-development-client/?url=${encodeURIComponent(manifestUrl)}`;\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  const urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  metroQueryOptions = metroQueryOptions || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  const mainModulePath = stripJSExtension(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  const queryParams = constructBundleQueryParams(projectRoot, metroQueryOptions);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    metroQueryOptions\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport function constructBundleQueryParams(projectRoot: string, opts: MetroQueryOptions): string {\n  const { exp } = getConfig(projectRoot);\n  return constructBundleQueryParamsWithConfig(projectRoot, opts, exp);\n}\n\nexport function constructBundleQueryParamsWithConfig(\n  projectRoot: string,\n  opts: MetroQueryOptions,\n  exp: Pick<ExpoConfig, 'sdkVersion'>\n): string {\n  const queryParams: Record<string, boolean | string> = {\n    dev: !!opts.dev,\n    hot: false,\n  };\n\n  if ('strict' in opts) {\n    queryParams.strict = !!opts.strict;\n  }\n\n  if ('minify' in opts) {\n    // TODO: Maybe default this to true if dev is false\n    queryParams.minify = !!opts.minify;\n  }\n\n  // No special requirements after SDK 33 (Jun 5 2019)\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    return QueryString.stringify(queryParams);\n  }\n\n  // TODO: Remove this ...\n\n  // SDK11 to SDK32 require us to inject hashAssetFiles through the params, but this is not\n  // needed with SDK33+\n  const supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  const usesAssetPluginsQueryParam = supportsAssetPlugins && Versions.lteSdkVersion(exp, '32.0.0');\n  if (usesAssetPluginsQueryParam) {\n    // Use an absolute path here so that we can not worry about symlinks/relative requires\n    const pluginModule = resolveFrom(projectRoot, 'expo/tools/hashAssetFiles');\n    queryParams.assetPlugin = encodeURIComponent(pluginModule);\n  } else if (!supportsAssetPlugins) {\n    // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n    // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n    queryParams.includeAssetFileHashes = true;\n  }\n\n  return QueryString.stringify(queryParams);\n}\n\nexport async function constructWebAppUrlAsync(\n  projectRoot: string,\n  options: { hostType?: 'localhost' | 'lan' | 'tunnel' } = {}\n): Promise<string | null> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n\n  const { https, hostType } = await ProjectSettings.readAsync(projectRoot);\n  const host = (options.hostType ?? hostType) === 'localhost' ? 'localhost' : ip.address();\n\n  let urlType = 'http';\n  if (https === true) {\n    urlType = 'https';\n  }\n\n  return `${urlType}://${host}:${packagerInfo.webpackServerPort}`;\n}\n\nfunction assertValidOptions(opts: Partial<URLOptions>): URLOptions {\n  const schema = joi.object().keys({\n    devClient: joi.boolean().optional(),\n    scheme: joi.string().optional().allow(null),\n    // Replaced by `scheme`\n    urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol').allow(null),\n    lanType: joi.any().valid('ip', 'hostname'),\n    hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n    dev: joi.boolean(),\n    strict: joi.boolean(),\n    minify: joi.boolean(),\n    https: joi.boolean().optional(),\n    urlRandomness: joi.string().optional().allow(null),\n  });\n\n  const { error } = schema.validate(opts);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n\n  return opts as URLOptions;\n}\n\nasync function ensureOptionsAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions> | null\n): Promise<URLOptions> {\n  if (opts) {\n    assertValidOptions(opts);\n  }\n\n  const defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    return { urlType: null, ...defaultOpts };\n  }\n  const optionsWithDefaults = { ...defaultOpts, ...opts };\n  return assertValidOptions(optionsWithDefaults);\n}\n\nfunction resolveProtocol(\n  projectRoot: string,\n  { urlType, ...options }: Pick<URLOptions, 'urlType' | 'scheme'>\n): string | null {\n  if (urlType === 'http') {\n    return 'http';\n  } else if (urlType === 'no-protocol') {\n    return null;\n  } else if (urlType === 'custom') {\n    return options.scheme;\n  }\n  let protocol = 'exp';\n\n  const { exp } = getConfig(projectRoot);\n\n  // We only use these values from the config\n  const { scheme, detach, sdkVersion } = exp;\n\n  if (detach) {\n    // Normalize schemes and filter invalid schemes.\n    const schemes = (Array.isArray(scheme) ? scheme : [scheme]).filter(\n      (scheme: any) => typeof scheme === 'string' && !!scheme\n    );\n    // Get the first valid scheme.\n    const firstScheme = schemes[0];\n    if (firstScheme && Versions.gteSdkVersion({ sdkVersion }, '27.0.0')) {\n      protocol = firstScheme;\n    } else if (detach.scheme) {\n      // must keep this fallback in place for older projects\n      // and those detached with an older version of xdl\n      protocol = detach.scheme;\n    }\n  }\n\n  return protocol;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  incomingOpts: Partial<URLOptions> | null,\n  isPackager: boolean,\n  requestHostname?: string\n): Promise<string> {\n  const opts = await ensureOptionsAsync(projectRoot, incomingOpts);\n\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol = resolveProtocol(projectRoot, opts);\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    const ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl || typeof ngrokUrl !== 'string') {\n      // TODO: if you start with --tunnel flag then this warning will always\n      // show up right before the tunnel starts...\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found (it might not be ready yet), falling back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      const pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  const url_ = joinURLComponents({ protocol, hostname, port });\n\n  if (opts.urlType === 'redirect') {\n    return createRedirectURL(url_);\n  }\n\n  return url_;\n}\n\nfunction createRedirectURL(url: string): string {\n  return `https://exp.host/--/to-exp/${encodeURIComponent(url)}`;\n}\n\nfunction joinURLComponents({\n  protocol,\n  hostname,\n  port,\n}: {\n  protocol?: string | null;\n  hostname?: string | null;\n  port?: string | number | null;\n}): string {\n  assert(hostname, 'hostname cannot be inferred.');\n  // Android HMR breaks without this port 80\n  const validPort = port ?? '80';\n  const validProtocol = protocol ? `${protocol}://` : '';\n\n  return `${validProtocol}${hostname}:${validPort}`;\n}\n\nexport function stripJSExtension(entryPoint: string): string {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6): string {\n  const alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    const j = Math.floor(Math.random() * alphabet.length);\n    const c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier(): string {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string): string {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness(): string {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string): string {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function isHttps(urlString: string): boolean {\n  return isURL(urlString, { protocols: ['https'] });\n}\n\nexport function isURL(\n  urlString: string,\n  { protocols, requireProtocol }: { protocols?: string[]; requireProtocol?: boolean }\n) {\n  try {\n    // eslint-disable-next-line\n    new url.URL(urlString);\n    const parsed = url.parse(urlString);\n    if (!parsed.protocol && !requireProtocol) {\n      return true;\n    }\n    return protocols\n      ? parsed.protocol\n        ? protocols.map(x => `${x.toLowerCase()}:`).includes(parsed.protocol)\n        : false\n      : true;\n  } catch (err) {\n    return false;\n  }\n}\n"],"file":"../UrlUtils.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
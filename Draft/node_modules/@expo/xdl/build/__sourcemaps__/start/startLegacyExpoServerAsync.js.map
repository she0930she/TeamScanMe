{"version":3,"sources":["start/startLegacyExpoServerAsync.ts"],"names":["_isIgnorableBugReportingExtraData","body","length","_isAppRegistryStartupMessage","test","_handleDeviceLogs","projectRoot","deviceId","deviceName","logs","i","log","level","args","map","obj","JSON","stringify","e","toString","logLevel","ProjectUtils","getLogger","tag","groupDepth","shouldHide","includesStack","startExpoServerAsync","stopExpoServerAsync","app","use","express","json","limit","urlencoded","extended","ConnectionStatus","isOffline","Doctor","validateWithoutNetworkAsync","validateWithNetworkAsync","FATAL","Error","manifestHandler","get","post","req","res","logError","stack","send","server","close","expRc","expoServerPort","manifestPort","ProjectSettings","setPackagerInfoAsync","listen","info","address","host","port","logDebug","packagerInfo","readPackagerInfoAsync","axios","request","method","url"],"mappings":"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","sourcesContent":["import { readExpRcAsync } from '@expo/config';\nimport axios from 'axios';\nimport express from 'express';\nimport { AddressInfo } from 'net';\n\nimport * as ConnectionStatus from '../ConnectionStatus';\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as Doctor from '../project/Doctor';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport { assertValidProjectRoot } from '../project/errors';\nimport { getManifestHandler } from './ManifestHandler';\nimport { getFreePortAsync } from './getFreePortAsync';\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nfunction _isIgnorableBugReportingExtraData(body: any[]) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body: any[]) {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    const log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    ProjectUtils.getLogger(projectRoot)[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\n\nexport async function startExpoServerAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  const app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if (\n    (ConnectionStatus.isOffline()\n      ? await Doctor.validateWithoutNetworkAsync(projectRoot)\n      : await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL\n  ) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  }\n  // Serve the manifest.\n  const manifestHandler = getManifestHandler(projectRoot);\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      const deviceId = req.get('Device-Id');\n      const deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  const expRc = await readExpRcAsync(projectRoot);\n  const expoServerPort = expRc.manifestPort ? expRc.manifestPort : await getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    const info = server.address() as AddressInfo;\n    const host = info.address;\n    const port = info.port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n}\n\nexport async function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.request({\n        method: 'post',\n        url: `http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`,\n      });\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n"],"file":"../../start/startLegacyExpoServerAsync.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
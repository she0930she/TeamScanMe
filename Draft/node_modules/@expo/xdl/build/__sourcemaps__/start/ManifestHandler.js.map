{"version":3,"sources":["start/ManifestHandler.ts"],"names":["_cachedSignedManifest","manifestString","signedManifest","blacklistedEnvironmentVariables","Set","shouldExposeEnvironmentVariableInManifest","key","has","toUpperCase","startsWith","stripPort","host","URL","hostname","getPackagerOptionsAsync","projectRoot","projectSettings","ProjectSettings","readAsync","bundleUrlPackagerOpts","JSON","parse","stringify","urlType","hostType","getBundleUrlAsync","platform","mainModuleName","queryParams","UrlUtils","constructBundleQueryParams","path","encodeURI","encodeURIComponent","constructBundleUrlAsync","getPlatformFromRequest","headers","toString","getManifestHandler","req","res","Doctor","validateWithNetworkAsync","catch","error","ProjectUtils","logError","exp","hostInfo","getManifestResponseFromHeadersAsync","sdkVersion","setHeader","end","Analytics","logEvent","developerTool","Config","e","stack","statusCode","acceptSignature","getManifestResponseAsync","projectConfig","manifest","entryPoint","stripJSExtension","createHostInfoAsync","xde","developer","tool","packagerOpts","Versions","lteSdkVersion","env","getManifestEnvironment","bundleUrl","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","resolver","match","getManifestStringAsync","code","owner","addSigningDisabledWarning","chalk","bold","offline","seen","reason","logWarning","Object","keys","process","reduce","prev","hostUUID","currentSession","UserManager","getSessionAsync","id","ANONYMOUS_USERNAME","slug","getUnsignedManifestString","getSignedManifestStringAsync","UserSettings","anonymousIdentifier","server","serverVersion","require","version","serverDriver","serverOS","os","serverOSVersion","release","user","ensureLoggedInAsync","response","ApiV2","clientForUser","postAsync","args","remoteUsername","getCurrentUsernameAsync","remotePackageName","unsignedManifest","signature"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, ExpoConfig, getConfig } from '@expo/config';\nimport { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport express from 'express';\nimport http from 'http';\nimport os from 'os';\nimport { URL } from 'url';\n\nimport Analytics from '../Analytics';\nimport ApiV2 from '../ApiV2';\nimport Config from '../Config';\nimport { resolveGoogleServicesFile, resolveManifestAssets } from '../ProjectAssets';\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as UrlUtils from '../UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from '../User';\nimport UserSettings from '../UserSettings';\nimport * as Versions from '../Versions';\nimport { learnMore } from '../logs/TerminalLink';\nimport * as Doctor from '../project/Doctor';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport { resolveEntryPoint } from '../tools/resolveEntryPoint';\n\ninterface HostInfo {\n  host: string;\n  server: 'xdl';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\ntype PackagerOptions = ProjectSettings.ProjectSettings;\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nconst _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nconst blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nfunction stripPort(host: string | undefined): string | undefined {\n  if (!host) {\n    return host;\n  }\n  return new URL('/', `http://${host}`).hostname;\n}\n\nasync function getPackagerOptionsAsync(\n  projectRoot: string\n): Promise<[PackagerOptions, PackagerOptions]> {\n  // Get packager opts and then copy into bundleUrlPackagerOpts\n  const projectSettings = await ProjectSettings.readAsync(projectRoot);\n  const bundleUrlPackagerOpts = JSON.parse(JSON.stringify(projectSettings));\n  bundleUrlPackagerOpts.urlType = 'http';\n  if (bundleUrlPackagerOpts.hostType === 'redirect') {\n    bundleUrlPackagerOpts.hostType = 'tunnel';\n  }\n  return [projectSettings, bundleUrlPackagerOpts];\n}\n\nasync function getBundleUrlAsync({\n  projectRoot,\n  platform,\n  projectSettings,\n  bundleUrlPackagerOpts,\n  mainModuleName,\n  hostname,\n}: {\n  platform: string;\n  hostname?: string;\n  mainModuleName: string;\n  projectRoot: string;\n  projectSettings: PackagerOptions;\n  bundleUrlPackagerOpts: PackagerOptions;\n}): Promise<string> {\n  const queryParams = UrlUtils.constructBundleQueryParams(projectRoot, projectSettings);\n\n  const path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n    platform\n  )}&${queryParams}`;\n\n  return (\n    (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, hostname)) + path\n  );\n}\n\nfunction getPlatformFromRequest(headers: http.IncomingHttpHeaders): string {\n  return (headers['exponent-platform'] || 'ios').toString();\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse\n  ) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot).catch(error => {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          `Error: could not load config json at ${projectRoot}: ${error.toString()}`,\n          'doctor-config-json-not-read'\n        );\n      });\n\n      const { manifestString, exp, hostInfo } = await getManifestResponseFromHeadersAsync({\n        projectRoot,\n        headers: req.headers,\n      });\n      const sdkVersion = exp.sdkVersion ?? null;\n\n      // Send the response\n      res.setHeader('Exponent-Server', JSON.stringify(hostInfo));\n      // End the request\n      res.end(manifestString);\n\n      // Log analytics\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n        sdkVersion,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n\nasync function getManifestResponseFromHeadersAsync({\n  projectRoot,\n  headers,\n}: {\n  projectRoot: string;\n  headers: http.IncomingHttpHeaders;\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read from headers\n  const platform = getPlatformFromRequest(headers);\n  const acceptSignature = headers['exponent-accept-signature'];\n  return getManifestResponseAsync({ projectRoot, host: headers.host, platform, acceptSignature });\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  host,\n  platform,\n  acceptSignature,\n}: {\n  projectRoot: string;\n  platform: string;\n  host?: string;\n  acceptSignature?: string | string[];\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read the config\n  const projectConfig = getConfig(projectRoot);\n  const manifest = projectConfig.exp as ExpoAppManifest;\n  // Read from headers\n  const hostname = stripPort(host);\n\n  // Get project entry point and initial module\n  const entryPoint = resolveEntryPoint(projectRoot, platform, projectConfig);\n  const mainModuleName = UrlUtils.stripJSExtension(entryPoint);\n  // Gather packager and host info\n  const hostInfo = await createHostInfoAsync();\n  const [projectSettings, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n  // Mutate the manifest\n  manifest.xde = true; // deprecated\n  manifest.developer = {\n    tool: Config.developerTool,\n    projectRoot,\n  };\n  manifest.packagerOpts = projectSettings;\n  manifest.mainModuleName = mainModuleName;\n  // Adding the env variables to the Expo manifest is unsafe.\n  // This feature is deprecated in SDK 41 forward.\n  if (manifest.sdkVersion && Versions.lteSdkVersion(manifest, '40.0.0')) {\n    manifest.env = getManifestEnvironment();\n  }\n  // Add URLs to the manifest\n  manifest.bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    projectSettings,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n  manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, hostname);\n  manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, hostname);\n  manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n  // Resolve all assets and set them on the manifest as URLs\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: manifest as ExpoAppManifest,\n    async resolver(path) {\n      return manifest.bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n    },\n  });\n  // The server normally inserts this but if we're offline we'll do it here\n  await resolveGoogleServicesFile(projectRoot, manifest);\n\n  // Create the final string\n  let manifestString;\n  try {\n    manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n  } catch (error) {\n    if (error.code === 'UNAUTHORIZED_ERROR' && manifest.owner) {\n      // Don't have permissions for siging, warn and enable offline mode.\n      addSigningDisabledWarning(\n        projectRoot,\n        `This project belongs to ${chalk.bold(\n          `@${manifest.owner}`\n        )} and you have not been granted the appropriate permissions.\\n` +\n          `Please request access from an admin of @${manifest.owner} or change the \"owner\" field to an account you belong to.\\n` +\n          learnMore('https://docs.expo.io/versions/latest/config/app/#owner')\n      );\n      Config.offline = true;\n      manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n    } else if (error.code === 'ENOTFOUND') {\n      // Got a DNS error, i.e. can't access exp.host, warn and enable offline mode.\n      addSigningDisabledWarning(\n        projectRoot,\n        `Could not reach Expo servers, please check if you can access ${\n          error.hostname || 'exp.host'\n        }.`\n      );\n      Config.offline = true;\n      manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n    } else {\n      throw error;\n    }\n  }\n\n  return {\n    manifestString,\n    exp: manifest,\n    hostInfo,\n  };\n}\n\nconst addSigningDisabledWarning = (() => {\n  let seen = false;\n  return (projectRoot: string, reason: string) => {\n    if (!seen) {\n      seen = true;\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `${reason}\\nFalling back to offline mode.`,\n        'signing-disabled'\n      );\n    }\n  };\n})();\n\nfunction getManifestEnvironment(): Record<string, any> {\n  return Object.keys(process.env).reduce<Record<string, any>>((prev, key) => {\n    if (shouldExposeEnvironmentVariableInManifest(key)) {\n      prev[key] = process.env[key];\n    }\n    return prev;\n  }, {});\n}\n\nasync function getManifestStringAsync(\n  manifest: ExpoAppManifest,\n  hostUUID: string,\n  acceptSignature?: string | string[]\n): Promise<string> {\n  const currentSession = await UserManager.getSessionAsync();\n  if (!currentSession || Config.offline) {\n    manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n  }\n  if (!acceptSignature) {\n    return JSON.stringify(manifest);\n  } else if (!currentSession || Config.offline) {\n    return getUnsignedManifestString(manifest);\n  } else {\n    return await getSignedManifestStringAsync(manifest, currentSession);\n  }\n}\n\nasync function createHostInfoAsync(): Promise<HostInfo> {\n  const host = await UserSettings.anonymousIdentifier();\n\n  return {\n    host,\n    server: 'xdl',\n    serverVersion: require('@expo/xdl/package.json').version,\n    serverDriver: Config.developerTool,\n    serverOS: os.platform(),\n    serverOSVersion: os.release(),\n  };\n}\n\nexport async function getSignedManifestStringAsync(\n  manifest: Partial<ExpoAppManifest>,\n  // NOTE: we currently ignore the currentSession that is passed in, see the note below about analytics.\n  currentSession: { sessionSecret?: string; accessToken?: string }\n) {\n  const manifestString = JSON.stringify(manifest);\n  if (_cachedSignedManifest.manifestString === manifestString) {\n    return _cachedSignedManifest.signedManifest;\n  }\n  // WARNING: Removing the following line will regress analytics, see: https://github.com/expo/expo-cli/pull/2357\n  // TODO: make this more obvious from code\n  const user = await UserManager.ensureLoggedInAsync();\n  const { response } = await ApiV2.clientForUser(user).postAsync('manifest/sign', {\n    args: {\n      remoteUsername: manifest.owner ?? (await UserManager.getCurrentUsernameAsync()),\n      remotePackageName: manifest.slug,\n    },\n    manifest: manifest as JSONObject,\n  });\n  _cachedSignedManifest.manifestString = manifestString;\n  _cachedSignedManifest.signedManifest = response;\n  return response;\n}\n\nexport function getUnsignedManifestString(manifest: ExpoConfig) {\n  const unsignedManifest = {\n    manifestString: JSON.stringify(manifest),\n    signature: 'UNSIGNED',\n  };\n  return JSON.stringify(unsignedManifest);\n}\n"],"file":"../../start/ManifestHandler.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
{"version":3,"sources":["start/startAsync.ts"],"names":["serverInstance","startAsync","projectRoot","exp","options","verbose","Analytics","logEvent","developerTool","Config","sdkVersion","webOnly","Webpack","restartAsync","DevSession","startSession","devClient","hostType","ProjectSettings","readAsync","offline","e","ProjectUtils","logDebug","message","stopInternalAsync","stopSession","Promise","all","stopAsync","resolve","reject","close","error","Android","maybeStopAdbDaemonAsync","forceQuitAsync","packagerPid","ngrokPid","readPackagerInfoAsync","process","kill","setPackagerInfoAsync","expoServerPort","packagerPort","expoServerNgrokUrl","packagerNgrokUrl","webpackServerPort","result","race","setTimeout"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { Server } from 'http';\n\nimport Analytics from '../Analytics';\nimport * as Android from '../Android';\nimport Config from '../Config';\nimport * as DevSession from '../DevSession';\nimport { shouldUseDevServer } from '../Env';\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as Webpack from '../Webpack';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport { assertValidProjectRoot } from '../project/errors';\nimport { startTunnelsAsync, stopTunnelsAsync } from './ngrok';\nimport { startDevServerAsync, StartOptions } from './startDevServerAsync';\nimport { startExpoServerAsync, stopExpoServerAsync } from './startLegacyExpoServerAsync';\nimport {\n  startReactNativeServerAsync,\n  stopReactNativeServerAsync,\n} from './startLegacyReactNativeServerAsync';\n\nlet serverInstance: Server | null = null;\n\nexport async function startAsync(\n  projectRoot: string,\n  { exp = getConfig(projectRoot).exp, ...options }: StartOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else if (shouldUseDevServer(exp) || options.devClient) {\n    serverInstance = await startDevServerAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'native');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!Config.offline && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n\n  await Promise.all([\n    Webpack.stopAsync(projectRoot),\n    new Promise<void>((resolve, reject) => {\n      if (serverInstance) {\n        serverInstance.close(error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      }\n    }),\n    stopExpoServerAsync(projectRoot),\n    stopReactNativeServerAsync(projectRoot),\n    async () => {\n      if (!Config.offline) {\n        try {\n          await stopTunnelsAsync(projectRoot);\n        } catch (e) {\n          ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n        }\n      }\n    },\n    await Android.maybeStopAdbDaemonAsync(),\n  ]);\n}\n\nasync function forceQuitAsync(projectRoot: string) {\n  // find RN packager and ngrok pids, attempt to kill them manually\n  const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerPid) {\n    try {\n      process.kill(packagerPid);\n    } catch (e) {}\n  }\n  if (ngrokPid) {\n    try {\n      process.kill(ngrokPid);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n    packagerPort: null,\n    packagerPid: null,\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n    webpackServerPort: null,\n  });\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  try {\n    const result = await Promise.race([\n      stopInternalAsync(projectRoot),\n      new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n    ]);\n    if (result === 'stopFailed') {\n      await forceQuitAsync(projectRoot);\n    }\n  } catch (error) {\n    await forceQuitAsync(projectRoot);\n    throw error;\n  }\n}\n"],"file":"../../start/startAsync.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
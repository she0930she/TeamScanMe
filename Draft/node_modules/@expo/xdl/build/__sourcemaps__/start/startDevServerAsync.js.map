{"version":3,"sources":["start/startDevServerAsync.ts"],"names":["startDevServerAsync","projectRoot","startOptions","port","devClient","Number","process","env","RCT_METRO_PORT","ProjectSettings","setPackagerInfoAsync","expoServerPort","packagerPort","options","logger","ProjectUtils","getLogger","target","reset","resetCache","maxWorkers","server","middleware","use"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAYO,eAAeA,mBAAf,CAAmCC,WAAnC,EAAwDC,YAAxD,EAAoF;AACzF,wCAAuBD,WAAvB;AAEA,QAAME,IAAI,GAAGD,YAAY,CAACE,SAAb,GACTC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAb,CAAN,IAAsC,IAD7B,GAET,MAAM,0CAAiB,KAAjB,CAFV;AAGA,QAAMC,eAAe,GAACC,oBAAhB,CAAqCT,WAArC,EAAkD;AACtDU,IAAAA,cAAc,EAAER,IADsC;AAEtDS,IAAAA,YAAY,EAAET;AAFwC,GAAlD,CAAN;AAKA,QAAMU,OAA8B,GAAG;AACrCV,IAAAA,IADqC;AAErCW,IAAAA,MAAM,EAAEC,YAAY,GAACC,SAAb,CAAuBf,WAAvB,CAF6B;AAGrC;AACAgB,IAAAA,MAAM,EAAEf,YAAY,CAACe;AAJgB,GAAvC;;AAMA,MAAIf,YAAY,CAACgB,KAAjB,EAAwB;AACtBL,IAAAA,OAAO,CAACM,UAAR,GAAqB,IAArB;AACD;;AACD,MAAIjB,YAAY,CAACkB,UAAb,IAA2B,IAA/B,EAAqC;AACnCP,IAAAA,OAAO,CAACO,UAAR,GAAqBlB,YAAY,CAACkB,UAAlC;AACD;;AAED,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyB,MAAM,yCAAuBrB,WAAvB,EAAoCY,OAApC,CAArC;AACAS,EAAAA,UAAU,CAACC,GAAX,CAAe,2CAAmBtB,WAAnB,CAAf;AACA,SAAOoB,MAAP;AACD","sourcesContent":["import { ProjectTarget } from '@expo/config';\nimport { MetroDevServerOptions, runMetroDevServerAsync } from '@expo/dev-server';\n\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport { assertValidProjectRoot } from '../project/errors';\nimport { getManifestHandler } from './ManifestHandler';\nimport { getFreePortAsync } from './getFreePortAsync';\n\nexport type StartOptions = {\n  devClient?: boolean;\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n};\n\nexport async function startDevServerAsync(projectRoot: string, startOptions: StartOptions) {\n  assertValidProjectRoot(projectRoot);\n\n  const port = startOptions.devClient\n    ? Number(process.env.RCT_METRO_PORT) || 8081\n    : await getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: port,\n    packagerPort: port,\n  });\n\n  const options: MetroDevServerOptions = {\n    port,\n    logger: ProjectUtils.getLogger(projectRoot),\n    // @deprecated\n    target: startOptions.target,\n  };\n  if (startOptions.reset) {\n    options.resetCache = true;\n  }\n  if (startOptions.maxWorkers != null) {\n    options.maxWorkers = startOptions.maxWorkers;\n  }\n\n  const { server, middleware } = await runMetroDevServerAsync(projectRoot, options);\n  middleware.use(getManifestHandler(projectRoot));\n  return server;\n}\n"],"file":"../../start/startDevServerAsync.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
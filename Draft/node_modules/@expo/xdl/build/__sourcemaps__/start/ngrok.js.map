{"version":3,"sources":["start/ngrok.ts"],"names":["getNgrokConfigPath","path","join","UserSettings","dotExpoHomeDirectory","getProjectRandomnessAsync","projectRoot","ps","ProjectSettings","readAsync","randomness","urlRandomness","resetProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","connectToNgrokAsync","ngrok","args","hostnameAsync","ngrokPid","attempts","ngrokConnectAsync","connect","ngrokKillAsync","kill","configPath","hostname","url","e","message","XDLError","toString","JSON","stringify","error_code","process","Logger","logDebug","TUNNEL_TIMEOUT","startTunnelsAsync","options","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","packagerInfo","readPackagerInfoAsync","packagerPort","expoServerPort","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","parse","base","expRc","startedTunnelsSuccessfully","Promise","race","Error","expoServerNgrokUrl","authtoken","Config","authToken","port","proto","manifestTunnelRandomness","domainify","domain","packagerNgrokUrl","setPackagerInfoAsync","pid","logWithLevel","tag","_expoEventType","addListener","status","logError","shouldPrompt","catch","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync"],"mappings":"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","sourcesContent":["import { readExpRcAsync } from '@expo/config';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport * as Android from '../Android';\nimport Config from '../Config';\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as UrlUtils from '../UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from '../User';\nimport UserSettings from '../UserSettings';\nimport XDLError from '../XDLError';\nimport * as Logger from '../project/ProjectUtils';\nimport { assertValidProjectRoot } from '../project/errors';\nimport { delayAsync } from '../utils/delayAsync';\nimport { NgrokOptions, resolveNgrokAsync } from './resolveNgrok';\n\nfunction getNgrokConfigPath() {\n  return path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n}\n\nasync function getProjectRandomnessAsync(projectRoot: string) {\n  const ps = await ProjectSettings.readAsync(projectRoot);\n  const randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nasync function resetProjectRandomnessAsync(projectRoot: string) {\n  const randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nasync function connectToNgrokAsync(\n  projectRoot: string,\n  ngrok: any,\n  args: NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  const ngrokConnectAsync = promisify(ngrok.connect);\n  const ngrokKillAsync = promisify(ngrok.kill);\n\n  try {\n    const configPath = getNgrokConfigPath();\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            Logger.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return connectToNgrokAsync(projectRoot, ngrok, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nexport async function startTunnelsAsync(\n  projectRoot: string,\n  options: { autoInstall?: boolean } = {}\n): Promise<void> {\n  const ngrok = await resolveNgrokAsync(projectRoot, options);\n\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    Logger.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  const packageShortName = path.parse(projectRoot).base;\n  const expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      const expoServerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        ngrok,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      const packagerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        ngrok,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      Logger.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          Logger.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          Logger.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const ngrok = await resolveNgrokAsync(projectRoot, { shouldPrompt: false }).catch(() => null);\n  if (!ngrok) {\n    return;\n  }\n  const ngrokKillAsync = promisify(ngrok.kill);\n\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const ngrokProcess = ngrok.process();\n  const ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      Logger.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`);\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n"],"file":"../../start/ngrok.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
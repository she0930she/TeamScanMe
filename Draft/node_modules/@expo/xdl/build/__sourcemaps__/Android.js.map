{"version":3,"sources":["Android.ts"],"names":["_lastUrl","_isAdbOwner","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","INSTALL_WARNING_TIMEOUT","EMULATOR_MAX_WAIT_TIMEOUT","whichEmulator","process","env","ANDROID_HOME","whichADB","getEmulatorsAsync","stdout","split","os","EOL","filter","Boolean","map","name","type","isBooted","isAuthorized","getAbdNameForEmulatorIdAsync","emulatorId","getAdbOutputAsync","shift","getAllAvailableDevicesAsync","bootedDevices","getAttachedDevicesAsync","data","connectedNames","offlineEmulators","includes","allDevices","concat","length","genymotionMessage","Error","isBootAnimationCompleteAsync","pid","output","adbPidArgs","match","startEmulatorAsync","device","Logger","global","info","emulatorProcess","child_process","spawn","stdio","detached","unref","Promise","resolve","reject","waitTimer","setInterval","connected","find","stopWaiting","maxTimer","setTimeout","manualCommand","stopWaitingAndReject","clearTimeout","clearInterval","message","on","splitItems","trim","replace","attachedDevices","slice","line","props","devicePromises","deviceInfo","modelItem","all","isPlatformSupported","platform","adbAlreadyRunning","adb","result","lines","stderr","e","errorMessage","startsWith","substring","args","Binaries","addToPathAsync","alreadyRunning","_isDeviceAuthorizedAsync","isInstalledAsync","androidPackage","packages","i","_isExpoInstalledAsync","ensureDevClientInstalledAsync","applicationId","getExpoVersionAsync","regex","regexMatch","exec","isClientOutdatedAsync","sdkVersion","versions","Versions","versionsAsync","clientForSdk","getClientForSDK","latestVersionForSdk","version","androidVersion","installedVersion","semver","lt","_apkCacheDirectory","dotExpoHomeDirectory","UserSettings","dir","path","join","fs","mkdirpSync","downloadApkAsync","url","downloadProgressCallback","androidUrl","filename","parse","apkPath","pathExists","Api","downloadAsync","undefined","installExpoAsync","bar","ProgressBar","total","width","warningTimer","setWarningTimer","notifications","code","NotificationCode","START_LOADING","progress","tick","STOP_LOADING","isDeviceBootedAsync","devices","uninstallExpoAsync","isInstalled","error","upgradeExpoAsync","options","attemptToStartEmulatorOrAssertAsync","_openUrlAsync","openClient","indexOf","openProject","logUnauthorized","warn","chalk","bold","dim","hasPromptedToUpgrade","openUrlAsync","isDetached","devClient","exp","projectRoot","bootedDevice","installedExpo","clientApplicationId","AndroidConfig","Package","getApplicationIdAsync","Paths","getAppBuildGradle","shouldInstall","promptKey","confirm","Prompts","confirmAsync","initial","androidClient","underline","Analytics","logEvent","sdkVersionString","sdkVersionsAsync","androidClientUrl","androidClientVersion","openProjectAsync","shouldPrompt","startAdbReverseAsync","projectUrl","UrlUtils","constructDeepLinkAsync","skipSDKVersionRequirement","promptForDeviceAsync","success","openWebProjectAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","port","adbReverse","stopAdbReverseAsync","adbReverseRemove","debug","push","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","projectDir","gteSdkVersion","splashScreenMode","android","splash","resizeMode","generalSplashImagePath","image","italic","generalSplashImage","androidSplash","androidSplashImages","imageRelativePath","splashImage","height","expectedWidth","expectedHeight","sizeMatches","some","maybeStopAdbDaemonAsync","nameStyleForDevice","isActive","text","gray","pauseInteractions","value","limit","choices","item","format","title","suggest","input","RegExp","choice","test","resumeInteractions"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, readExpRcAsync } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport fs from 'fs-extra';\nimport trim from 'lodash/trim';\nimport os from 'os';\nimport path from 'path';\nimport ProgressBar from 'progress';\nimport prompts from 'prompts';\nimport semver from 'semver';\n\nimport Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Prompts from './Prompts';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport { getUrlAsync as getWebpackUrlAsync } from './Webpack';\nimport { learnMore } from './logs/TerminalLink';\nimport { getImageDimensionsAsync } from './tools/ImageUtils';\n\ntype Device = {\n  pid?: string;\n  name: string;\n  type: 'emulator' | 'device';\n  isBooted: boolean;\n  isAuthorized: boolean;\n};\n\nlet _lastUrl: string | null = null;\nlet _isAdbOwner: boolean | null = null;\n\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nconst INSTALL_WARNING_TIMEOUT = 60 * 1000;\n\nconst EMULATOR_MAX_WAIT_TIMEOUT = 60 * 1000 * 3;\n\nfunction whichEmulator(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/emulator/emulator`;\n  }\n  return 'emulator';\n}\n\nfunction whichADB(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/platform-tools/adb`;\n  }\n  return 'adb';\n}\n\n/**\n * Returns a list of emulator names.\n */\nasync function getEmulatorsAsync(): Promise<Device[]> {\n  try {\n    const { stdout } = await spawnAsync(whichEmulator(), ['-list-avds']);\n    return stdout\n      .split(os.EOL)\n      .filter(Boolean)\n      .map(name => ({\n        name,\n        type: 'emulator',\n        // unsure from this\n        isBooted: false,\n        isAuthorized: true,\n      }));\n  } catch {\n    return [];\n  }\n}\n\n/**\n * Return the Emulator name for an emulator ID, this can be used to determine if an emulator is booted.\n *\n * @param emulatorId a value like `emulator-5554` from `abd devices`\n */\nasync function getAbdNameForEmulatorIdAsync(emulatorId: string): Promise<string | null> {\n  return (\n    trim(await getAdbOutputAsync(['-s', emulatorId, 'emu', 'avd', 'name']))\n      .split(/\\r?\\n/)\n      .shift() ?? null\n  );\n}\n\nexport async function getAllAvailableDevicesAsync(): Promise<Device[]> {\n  const bootedDevices = await getAttachedDevicesAsync();\n\n  const data = await getEmulatorsAsync();\n  const connectedNames = bootedDevices.map(({ name }) => name);\n\n  const offlineEmulators = data\n    .filter(({ name }) => !connectedNames.includes(name))\n    .map(({ name, type }) => {\n      return {\n        name,\n        type,\n        isBooted: false,\n        // TODO: Are emulators always authorized?\n        isAuthorized: true,\n      };\n    });\n\n  const allDevices = bootedDevices.concat(offlineEmulators);\n\n  if (!allDevices.length) {\n    const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n    throw new Error(\n      `No Android connected device found, and no emulators could be started automatically.\\nPlease connect a device or create an emulator (https://docs.expo.io/workflow/android-studio-emulator).\\nThen follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  return allDevices;\n}\n\n/**\n * Returns true when a device's splash screen animation has stopped.\n * This can be used to detect when a device is fully booted and ready to use.\n *\n * @param pid\n */\nasync function isBootAnimationCompleteAsync(pid?: string): Promise<boolean> {\n  try {\n    const output = await getAdbOutputAsync(\n      adbPidArgs(pid, 'shell', 'getprop', 'init.svc.bootanim')\n    );\n    return !!output.match(/stopped/);\n  } catch {\n    return false;\n  }\n}\n\nasync function startEmulatorAsync(device: Device): Promise<Device> {\n  Logger.global.info(`\\u203A Attempting to open emulator: ${device.name}`);\n\n  // Start a process to open an emulator\n  const emulatorProcess = child_process.spawn(\n    whichEmulator(),\n    [\n      `@${device.name}`,\n      // disable animation for faster boot -- this might make it harder to detect if it mounted properly tho\n      //'-no-boot-anim'\n      // '-google-maps-key' -- TODO: Use from config\n    ],\n    {\n      stdio: 'ignore',\n      detached: true,\n    }\n  );\n\n  emulatorProcess.unref();\n\n  return new Promise<Device>((resolve, reject) => {\n    const waitTimer = setInterval(async () => {\n      const bootedDevices = await getAttachedDevicesAsync();\n      const connected = bootedDevices.find(({ name }) => name === device.name);\n      if (connected) {\n        const isBooted = await isBootAnimationCompleteAsync(connected.pid);\n        if (isBooted) {\n          stopWaiting();\n          resolve(connected);\n        }\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const maxTimer = setTimeout(() => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `It took too long to start the Android emulator: ${device.name}. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    }, EMULATOR_MAX_WAIT_TIMEOUT);\n\n    const stopWaiting = () => {\n      clearTimeout(maxTimer);\n      clearInterval(waitTimer);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      stopWaiting();\n      reject(new Error(message));\n      clearInterval(waitTimer);\n    };\n\n    emulatorProcess.on('error', ({ message }) => stopWaitingAndReject(message));\n\n    emulatorProcess.on('exit', () => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `The emulator (${device.name}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    });\n  });\n}\n\n// TODO: This is very expensive for some operations.\nexport async function getAttachedDevicesAsync(): Promise<Device[]> {\n  const output = await getAdbOutputAsync(['devices', '-l']);\n\n  const splitItems = output.trim().replace(/\\n$/, '').split(os.EOL);\n  // First line is `\"List of devices attached\"`, remove it\n  // @ts-ignore: todo\n  const attachedDevices: {\n    props: string[];\n    type: Device['type'];\n    isAuthorized: Device['isAuthorized'];\n  }[] = splitItems\n    .slice(1, splitItems.length)\n    .map(line => {\n      // unauthorized: ['FA8251A00719', 'unauthorized', 'usb:338690048X', 'transport_id:5']\n      // authorized: ['FA8251A00719', 'device', 'usb:336592896X', 'product:walleye', 'model:Pixel_2', 'device:walleye', 'transport_id:4']\n      // emulator: ['emulator-5554', 'offline', 'transport_id:1']\n      const props = line.split(' ').filter(Boolean);\n\n      const isAuthorized = props[1] !== 'unauthorized';\n      const type = line.includes('emulator') ? 'emulator' : 'device';\n      return { props, type, isAuthorized };\n    })\n    .filter(({ props: [pid] }) => !!pid);\n\n  const devicePromises = attachedDevices.map<Promise<Device>>(async props => {\n    const {\n      type,\n      props: [pid, ...deviceInfo],\n      isAuthorized,\n    } = props;\n\n    let name: string | null = null;\n\n    if (type === 'device') {\n      if (isAuthorized) {\n        // Possibly formatted like `model:Pixel_2`\n        // Transform to `Pixel_2`\n        const modelItem = deviceInfo.find(info => info.includes('model:'));\n        if (modelItem) {\n          name = modelItem.replace('model:', '');\n        }\n      }\n      // unauthorized devices don't have a name available to read\n      if (!name) {\n        // Device FA8251A00719\n        name = `Device ${pid}`;\n      }\n    } else {\n      // Given an emulator pid, get the emulator name which can be used to start the emulator later.\n      name = (await getAbdNameForEmulatorIdAsync(pid)) ?? '';\n    }\n\n    return {\n      pid,\n      name,\n      type,\n      isAuthorized,\n      isBooted: true,\n    };\n  });\n\n  return Promise.all(devicePromises);\n}\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function adbAlreadyRunning(adb: string): Promise<boolean> {\n  try {\n    const result = await spawnAsync(adb, ['start-server']);\n    const lines = trim(result.stderr).split(/\\r?\\n/);\n    return lines.includes('* daemon started successfully') === false;\n  } catch (e) {\n    let errorMessage = trim(e.stderr || e.stdout);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  try {\n    const result = await spawnAsync(adb, args);\n    return result.stdout;\n  } catch (e) {\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nasync function _isDeviceAuthorizedAsync(device: Device): Promise<boolean> {\n  // TODO: Get the latest version of the device in case isAuthorized changes.\n  return device.isAuthorized;\n}\n\nasync function isInstalledAsync(device: Device, androidPackage: string): Promise<boolean> {\n  const packages = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'pm', 'list', 'packages', androidPackage)\n  );\n\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === `package:${androidPackage}`) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync(device: Device) {\n  return await isInstalledAsync(device, 'host.exp.exponent');\n}\n\nasync function ensureDevClientInstalledAsync(device: Device, applicationId: string): Promise<void> {\n  if (!(await isInstalledAsync(device, applicationId))) {\n    throw new Error(\n      `The development client (${applicationId}) for this project is not installed. ` +\n        `Please build and install the client on the simulator first.\\n${learnMore(\n          'https://docs.expo.io/clients/distribution-for-android/'\n        )}`\n    );\n  }\n}\n\nasync function getExpoVersionAsync(device: Device): Promise<string | null> {\n  const info = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'dumpsys', 'package', 'host.exp.exponent')\n  );\n\n  const regex = /versionName=([0-9.]+)/;\n  const regexMatch = regex.exec(info);\n  if (!regexMatch || regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function isClientOutdatedAsync(device: Device, sdkVersion?: string): Promise<boolean> {\n  const versions = await Versions.versionsAsync();\n  const clientForSdk = await getClientForSDK(sdkVersion);\n  const latestVersionForSdk = clientForSdk?.version ?? versions.androidVersion;\n  const installedVersion = await getExpoVersionAsync(device);\n  return !installedVersion || semver.lt(installedVersion, latestVersionForSdk);\n}\n\nfunction _apkCacheDirectory() {\n  const dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  const dir = path.join(dotExpoHomeDirectory, 'android-apk-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function downloadApkAsync(\n  url?: string,\n  downloadProgressCallback?: (roundedProgress: number) => void\n) {\n  if (!url) {\n    const versions = await Versions.versionsAsync();\n    url = versions.androidUrl;\n  }\n\n  const filename = path.parse(url).name;\n  const apkPath = path.join(_apkCacheDirectory(), `${filename}.apk`);\n\n  if (await fs.pathExists(apkPath)) {\n    return apkPath;\n  }\n\n  await Api.downloadAsync(url, apkPath, undefined, downloadProgressCallback);\n  return apkPath;\n}\n\nexport async function installExpoAsync({\n  device,\n  url,\n  version,\n}: {\n  device: Device;\n  url?: string;\n  version?: string;\n}) {\n  const bar = new ProgressBar('Downloading the Expo Go app [:bar] :percent :etas', {\n    total: 100,\n    width: 64,\n  });\n\n  let warningTimer: NodeJS.Timeout;\n  const setWarningTimer = () => {\n    if (warningTimer) {\n      clearTimeout(warningTimer);\n    }\n    return setTimeout(() => {\n      Logger.global.info('');\n      Logger.global.info(\n        'This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.io/tools'\n      );\n    }, INSTALL_WARNING_TIMEOUT);\n  };\n\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  warningTimer = setWarningTimer();\n  const path = await downloadApkAsync(url, progress => bar.tick(1, progress));\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  if (version) {\n    Logger.global.info(`Installing Expo client ${version} on device`);\n  } else {\n    Logger.global.info(`Installing Expo client on device`);\n  }\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  warningTimer = setWarningTimer();\n  const result = await getAdbOutputAsync(adbPidArgs(device.pid, 'install', path));\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  clearTimeout(warningTimer);\n  return result;\n}\n\nexport async function isDeviceBootedAsync({\n  name,\n}: { name?: string } = {}): Promise<Device | null> {\n  const devices = await getAttachedDevicesAsync();\n\n  if (!name) {\n    return devices[0] ?? null;\n  }\n\n  return devices.find(device => device.name === name) ?? null;\n}\n\nexport async function uninstallExpoAsync(device: Device): Promise<string | undefined> {\n  Logger.global.info('Uninstalling Expo client from Android device.');\n\n  // we need to check if its installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n  const isInstalled = await _isExpoInstalledAsync(device);\n  if (!isInstalled) {\n    return;\n  }\n\n  try {\n    return await getAdbOutputAsync(adbPidArgs(device.pid, 'uninstall', 'host.exp.exponent'));\n  } catch (e) {\n    Logger.global.error(\n      'Could not uninstall Expo client from your device, please uninstall Expo client manually and try again.'\n    );\n    throw e;\n  }\n}\n\nexport async function upgradeExpoAsync(options?: {\n  url?: string;\n  version?: string;\n}): Promise<boolean> {\n  const { url, version } = options || {};\n\n  try {\n    const devices = await getAttachedDevicesAsync();\n    if (!devices.length) {\n      throw new Error('no devices connected');\n    }\n\n    const device = await attemptToStartEmulatorOrAssertAsync(devices[0]);\n    if (!device) {\n      return false;\n    }\n\n    await uninstallExpoAsync(device);\n    await installExpoAsync({ device, url, version });\n    if (_lastUrl) {\n      Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\nasync function _openUrlAsync({\n  pid,\n  url,\n  applicationId,\n}: {\n  pid: string;\n  url: string;\n  applicationId: string;\n}) {\n  // NOTE(brentvatne): temporary workaround! launch expo client first, then\n  // launch the project!\n  // https://github.com/expo/expo/issues/7772\n  // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n  const openClient = await getAdbOutputAsync(\n    adbPidArgs(\n      pid,\n      'shell',\n      'monkey',\n      '-p',\n      applicationId,\n      '-c',\n      'android.intent.category.LAUNCHER',\n      '1'\n    )\n  );\n  if (openClient.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openClient.substring(openClient.indexOf('Error: ')));\n  }\n\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(pid, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url)\n  );\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  return openProject;\n}\n\nasync function attemptToStartEmulatorOrAssertAsync(device: Device): Promise<Device | null> {\n  // TODO: Add a light-weight method for checking since a device could disconnect.\n\n  if (!(await isDeviceBootedAsync(device))) {\n    device = await startEmulatorAsync(device);\n  }\n\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nfunction logUnauthorized(device: Device) {\n  Logger.global.warn(\n    `\\nThis computer is not authorized for developing on ${chalk.bold(device.name)}. ${chalk.dim(\n      learnMore('https://expo.fyi/authorize-android-device')\n    )}`\n  );\n}\n\n// Keep a list of simulator UDIDs so we can prevent asking multiple times if a user wants to upgrade.\n// This can prevent annoying interactions when they don't want to upgrade for whatever reason.\nconst hasPromptedToUpgrade: Record<string, boolean> = {};\n\nasync function openUrlAsync({\n  url,\n  device,\n  isDetached = false,\n  sdkVersion,\n  devClient = false,\n  exp,\n  projectRoot,\n}: {\n  url: string;\n  isDetached?: boolean;\n  device: Device;\n  sdkVersion?: string;\n  devClient?: boolean;\n  exp?: ExpoConfig;\n  projectRoot: string;\n}): Promise<void> {\n  try {\n    const bootedDevice = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!bootedDevice) {\n      return;\n    }\n    device = bootedDevice;\n\n    let installedExpo = false;\n    let clientApplicationId = 'host.exp.exponent';\n    if (devClient) {\n      const applicationId = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n      if (!applicationId) {\n        // TODO(ville): possibly need to compare Gradle project with app.json/config.ts\n        // and show a helpful error message, if there's a mismatch.\n        throw new Error(\n          `Could not find applicationId in ${AndroidConfig.Paths.getAppBuildGradle(projectRoot)}`\n        );\n      } else {\n        clientApplicationId = applicationId;\n      }\n      await ensureDevClientInstalledAsync(device, clientApplicationId);\n    } else if (!isDetached) {\n      let shouldInstall = !(await _isExpoInstalledAsync(device));\n      const promptKey = device.pid ?? 'unknown';\n      if (\n        !shouldInstall &&\n        !hasPromptedToUpgrade[promptKey] &&\n        (await isClientOutdatedAsync(device, sdkVersion))\n      ) {\n        // Only prompt once per device, per run.\n        hasPromptedToUpgrade[promptKey] = true;\n        const confirm = await Prompts.confirmAsync({\n          initial: true,\n          message: `Expo client on ${device.name} (${device.type}) is outdated, would you like to upgrade?`,\n        });\n        if (confirm) {\n          await uninstallExpoAsync(device);\n          shouldInstall = true;\n        }\n      }\n\n      if (shouldInstall) {\n        const androidClient = await getClientForSDK(sdkVersion);\n        await installExpoAsync({ device, ...androidClient });\n        installedExpo = true;\n      }\n\n      _lastUrl = url;\n      // _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening ${chalk.underline(url)} on ${chalk.bold(device.name)}`);\n\n    try {\n      await _openUrlAsync({ pid: device.pid!, url, applicationId: clientApplicationId });\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    if (device.type === 'emulator') {\n      // TODO: Bring the emulator window to the front.\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nasync function getClientForSDK(sdkVersionString?: string) {\n  if (!sdkVersionString) {\n    return null;\n  }\n\n  const sdkVersion = (await Versions.sdkVersionsAsync())[sdkVersionString];\n  return {\n    url: sdkVersion.androidClientUrl,\n    version: sdkVersion.androidClientVersion,\n  };\n}\n\nexport async function openProjectAsync({\n  projectRoot,\n  shouldPrompt,\n  devClient = false,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n  devClient?: boolean;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await UrlUtils.constructDeepLinkAsync(projectRoot);\n    const { exp } = getConfig(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n\n    const devices = await getAllAvailableDevicesAsync();\n    let device: Device | null = devices[0];\n    if (shouldPrompt) {\n      device = await promptForDeviceAsync(devices);\n    }\n    if (!device) {\n      return { success: false, error: 'escaped' };\n    }\n\n    await openUrlAsync({\n      url: projectUrl,\n      device,\n      isDetached: !!exp.isDetached,\n      sdkVersion: exp.sdkVersion,\n      devClient,\n      exp,\n      projectRoot,\n    });\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync({\n  projectRoot,\n  shouldPrompt,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await getWebpackUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    const devices = await getAllAvailableDevicesAsync();\n    let device: Device | null = devices[0];\n    if (shouldPrompt) {\n      device = await promptForDeviceAsync(devices);\n    }\n    if (!device) {\n      return { success: false, error: 'escaped' };\n    }\n\n    await openUrlAsync({ url: projectUrl, device, isDetached: true, projectRoot });\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't open the web project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      if (!(await adbReverse({ device, port }))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      await adbReverseRemove({ device, port });\n    }\n  }\n}\n\nasync function adbReverse({ device, port }: { device: Device; port: number }): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', `tcp:${port}`, `tcp:${port}`));\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove({\n  device,\n  port,\n}: {\n  device: Device;\n  port: number;\n}): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', '--remove', `tcp:${port}`));\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nfunction adbPidArgs(pid: Device['pid'], ...options: string[]): string[] {\n  const args = [];\n  if (pid) {\n    args.push('-s', pid);\n  }\n  return args.concat(options);\n}\n\ntype DPIConstraint = {\n  dpi: 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\n  sizeMultiplier: number;\n};\n\nconst splashScreenDPIConstraints: readonly DPIConstraint[] = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectDir - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectDir: string): Promise<void> {\n  const { exp } = getConfig(projectDir);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode = exp.android?.splash?.resizeMode ?? exp.splash?.resizeMode ?? 'contain';\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = exp.splash?.image;\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await getImageDimensionsAsync(projectDir, generalSplashImagePath);\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = exp.android?.splash;\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = androidSplash?.[dpi];\n    if (imageRelativePath) {\n      const splashImage = await getImageDimensionsAsync(projectDir, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.io/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n    return;\n  }\n\n  if (androidSplashImages.some(({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.io/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n  }\n}\n\nexport async function maybeStopAdbDaemonAsync() {\n  if (_isAdbOwner !== true) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['kill-server']);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction nameStyleForDevice(device: Device) {\n  const isActive = device.isBooted;\n  if (!isActive) {\n    // Use no style changes for a disconnected device that is available to be opened.\n    return (text: string) => text;\n  }\n  // A device that is connected and ready to be used should be bolded to match iOS.\n  if (device.isAuthorized) {\n    return chalk.bold;\n  }\n  // Devices that are unauthorized and connected cannot be used, but they are connected so gray them out.\n  return (text: string) => chalk.bold(chalk.gray(text));\n}\n\nasync function promptForDeviceAsync(devices: Device[]): Promise<Device | null> {\n  // TODO: provide an option to add or download more simulators\n\n  // Pause interactions on the TerminalUI\n  Prompts.pauseInteractions();\n\n  const { value } = await prompts({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a device/emulator',\n    choices: devices.map(item => {\n      const format = nameStyleForDevice(item);\n      const type = item.isAuthorized ? item.type : 'unauthorized';\n      return {\n        title: `${format(item.name)} ${chalk.dim(`(${type})`)}`,\n        value: item.name,\n      };\n    }),\n    suggest: (input: any, choices: any) => {\n      const regex = new RegExp(input, 'i');\n      return choices.filter((choice: any) => regex.test(choice.title));\n    },\n  });\n\n  // Resume interactions on the TerminalUI\n  Prompts.resumeInteractions();\n\n  const device = value ? devices.find(({ name }) => name === value)! : null;\n\n  if (device?.isAuthorized === false) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n"],"file":"../Android.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
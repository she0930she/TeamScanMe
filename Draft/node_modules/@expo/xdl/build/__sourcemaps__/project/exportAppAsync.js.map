{"version":3,"sources":["project/exportAppAsync.ts"],"names":["bundlePlatforms","exportAppAsync","projectRoot","publicUrl","assetUrl","outputDir","options","experimentalBundle","absoluteOutputDir","path","resolve","process","cwd","defaultTarget","target","publishOptions","console","log","assetPathToWrite","join","fs","ensureDir","bundlesPathToWrite","exp","pkg","hooks","bundles","dev","isDev","useDevServer","iosBundle","ios","code","androidBundle","android","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","relativeBundlePaths","logger","global","info","assets","hostedUrl","assetPath","fileMetadata","forEach","platform","asset","fileHashes","map","hash","ext","type","bundle","metadata","version","bundler","writeFileSync","JSON","stringify","dumpAssetmap","assetmap","iosSourceMap","androidSourceMap","dumpSourcemap","iosMapName","iosMapPath","androidMapName","androidMapPath","semver","lt","sdkVersion","truncateLastNLines","appendFile","debugHtml","validPostExportHooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","releaseId","uuid","v4","hashIds","HashIds","v1","revisionId","encode","now","developer","tool","slug","XDLError","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","androidManifest","bundleUrl","dependencies","Object","keys","iosManifest","hookOptions","url","msg","quiet","hook","file","e","warn","stack","EmbeddedAssets","configureAsync","iosManifestUrl","androidManifestUrl","filePath","n","lines","readLastLines","read","to_vanquish","length","size","stat","truncate"],"mappings":"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","sourcesContent":["import { getDefaultTarget } from '@expo/config';\nimport assert from 'assert';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport path from 'path';\nimport readLastLines from 'read-last-lines';\nimport semver from 'semver';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\n\nimport * as EmbeddedAssets from '../EmbeddedAssets';\nimport { isDebug, shouldUseDevServer } from '../Env';\nimport logger from '../Logger';\nimport { Asset, exportAssetsAsync } from '../ProjectAssets';\nimport UserManager, { ANONYMOUS_USERNAME } from '../User';\nimport XDLError from '../XDLError';\nimport { writeArtifactSafelyAsync } from '../tools/ArtifactUtils';\nimport { getPublishExpConfigAsync, PublishOptions } from './getPublishExpConfigAsync';\nimport { buildPublishBundlesAsync } from './publishAsync';\nimport { prepareHooks, runHook } from './runHook';\n\nconst bundlePlatforms: BundlePlatform[] = ['android', 'ios'];\n\ntype BundlePlatform = 'android' | 'ios';\n\ntype PlatformMetadata = { bundle: string; assets: { path: string; ext: string }[] };\n\ntype FileMetadata = {\n  [key in BundlePlatform]: PlatformMetadata;\n};\n\ntype Metadata = {\n  version: 0;\n  bundler: 'metro';\n  fileMetadata: FileMetadata;\n};\n\n/**\n * If the `eas` flag is true, the stucture of the outputDir will be:\n├── assets\n│   └── *\n├── bundles\n│   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n│   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n└── metadata.json\n\n * If the `eas` flag is not true, then this function is for self hosting \n * and the outputDir will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: PublishOptions;\n  } = {},\n  experimentalBundle: boolean\n): Promise<void> {\n  const absoluteOutputDir = path.resolve(process.cwd(), outputDir);\n  const defaultTarget = getDefaultTarget(projectRoot);\n  const target = options.publishOptions?.target ?? defaultTarget;\n\n  if (isDebug()) {\n    console.log();\n    console.log('Export Assets:');\n    console.log(`- Asset target: ${target}`);\n    console.log();\n  }\n\n  // build the bundles\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { exp, pkg, hooks } = await getPublishExpConfigAsync(\n    projectRoot,\n    options.publishOptions || {}\n  );\n\n  const bundles = await buildPublishBundlesAsync(projectRoot, options.publishOptions, {\n    dev: options.isDev,\n    useDevServer: shouldUseDevServer(exp),\n  });\n  const iosBundle = bundles.ios.code;\n  const androidBundle = bundles.android.code;\n\n  const iosBundleHash = crypto.createHash('md5').update(iosBundle).digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(absoluteOutputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto.createHash('md5').update(androidBundle).digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(absoluteOutputDir, 'bundles', androidBundleUrl);\n\n  const relativeBundlePaths = {\n    android: path.join('bundles', androidBundleUrl),\n    ios: path.join('bundles', iosBundleUrl),\n  };\n\n  await writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n\n  logger.global.info('Finished saving JS Bundles.');\n\n  const { assets } = await exportAssetsAsync({\n    projectRoot,\n    exp,\n    hostedUrl: publicUrl,\n    assetPath: 'assets',\n    outputDir: absoluteOutputDir,\n    bundles,\n    experimentalBundle,\n  });\n\n  if (experimentalBundle) {\n    // Build metadata.json\n    const fileMetadata: {\n      [key in BundlePlatform]: Partial<PlatformMetadata>;\n    } = { android: {}, ios: {} };\n    bundlePlatforms.forEach(platform => {\n      fileMetadata[platform].assets = [];\n      bundles[platform].assets.forEach((asset: { type: string; fileHashes: string[] }) => {\n        fileMetadata[platform].assets = [\n          ...fileMetadata[platform].assets!,\n          ...asset.fileHashes.map(hash => {\n            return { path: path.join('assets', hash), ext: asset.type };\n          }),\n        ];\n      });\n      fileMetadata[platform].bundle = relativeBundlePaths[platform];\n    });\n    const metadata: Metadata = {\n      version: 0,\n      bundler: 'metro',\n      fileMetadata: fileMetadata as FileMetadata,\n    };\n\n    fs.writeFileSync(path.resolve(outputDir, 'metadata.json'), JSON.stringify(metadata));\n  }\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n\n    const assetmap: { [hash: string]: Asset } = {};\n\n    assets.forEach((asset: Asset) => {\n      assetmap[asset.hash] = asset;\n    });\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  const iosSourceMap = bundles.ios.map;\n  const androidSourceMap = bundles.android.map;\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(absoluteOutputDir, 'bundles', iosMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(absoluteOutputDir, 'bundles', androidMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    if (target === 'managed' && semver.lt(exp.sdkVersion, '40.0.0')) {\n      // Remove original mapping to incorrect sourcemap paths\n      // In SDK 40+ and bare projects, we no longer need to do this.\n      logger.global.info('Configuring source maps');\n      await truncateLastNLines(iosJsPath, 1);\n      await truncateLastNLines(androidJsPath, 1);\n    }\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n      <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n      <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n      Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n      You can see a red coloured folder containing the original source code from your bundle.\n      `;\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n\n  // Skip the hooks and manifest creation if building for EAS.\n  if (!experimentalBundle) {\n    const validPostExportHooks = prepareHooks(hooks, 'postExport', projectRoot);\n\n    // Add assetUrl to manifest\n    exp.assetUrlOverride = assetUrl;\n\n    exp.publishedTime = new Date().toISOString();\n    exp.commitTime = new Date().toISOString();\n    exp.releaseId = uuid.v4();\n\n    // generate revisionId and id the same way www does\n    const hashIds = new HashIds(uuid.v1(), 10);\n    exp.revisionId = hashIds.encode(Date.now());\n\n    if (options.isDev) {\n      exp.developer = {\n        tool: 'exp',\n      };\n    }\n\n    if (!exp.slug) {\n      throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n    }\n\n    let username = await UserManager.getCurrentUsernameAsync();\n\n    if (!username) {\n      username = ANONYMOUS_USERNAME;\n    }\n\n    exp.id = `@${username}/${exp.slug}`;\n\n    // save the android manifest\n    const androidManifest = {\n      ...exp,\n      bundleUrl: urljoin(publicUrl, 'bundles', androidBundleUrl),\n      platform: 'android',\n      dependencies: Object.keys(pkg.dependencies),\n    };\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'android-index.json'),\n      JSON.stringify(androidManifest)\n    );\n\n    // save the ios manifest\n    const iosManifest = {\n      ...exp,\n      bundleUrl: urljoin(publicUrl, 'bundles', iosBundleUrl),\n      platform: 'ios',\n      dependencies: Object.keys(pkg.dependencies),\n    };\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'ios-index.json'),\n      JSON.stringify(iosManifest)\n    );\n\n    assert(androidManifest!, 'should have been assigned');\n    assert(iosManifest!, 'should have been assigned');\n    const hookOptions = {\n      url: null,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (const hook of validPostExportHooks) {\n      logger.global.info(`Running postExport hook: ${hook.file}`);\n\n      try {\n        runHook(hook, hookOptions);\n      } catch (e) {\n        logger.global.warn(`Warning: postExport hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    // configure embedded assets for expo-updates or ExpoKit\n    await EmbeddedAssets.configureAsync({\n      projectRoot,\n      pkg,\n      exp,\n      iosManifestUrl: urljoin(publicUrl, 'ios-index.json'),\n      iosManifest,\n      iosBundle,\n      iosSourceMap,\n      androidManifestUrl: urljoin(publicUrl, 'android-index.json'),\n      androidManifest,\n      androidBundle,\n      androidSourceMap,\n      target,\n    });\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n"],"file":"../../project/exportAppAsync.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
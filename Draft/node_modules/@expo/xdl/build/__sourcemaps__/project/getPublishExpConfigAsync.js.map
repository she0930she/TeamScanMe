{"version":3,"sources":["project/getPublishExpConfigAsync.ts"],"names":["getPublishExpConfigAsync","projectRoot","options","releaseChannel","XDLError","exp","privateExp","hooks","pkg","isPublicConfig","sdkVersion","locales","ExponentTools","getResolvedLocalesAsync"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAUO,eAAeA,wBAAf,CACLC,WADK,EAELC,OAFK,EAOJ;AACD,MAAIA,OAAO,CAACC,cAAR,IAA0B,IAA1B,IAAkC,OAAOD,OAAO,CAACC,cAAf,KAAkC,QAAxE,EAAkF;AAChF,UAAM,KAAIC,mBAAJ,EAAa,iBAAb,EAAgC,iCAAhC,CAAN;AACD;;AACDF,EAAAA,OAAO,CAACC,cAAR,GAAyBD,OAAO,CAACC,cAAR,IAA0B,SAAnD,CAJC,CAMD;;AACA,QAAM;AAAEE,IAAAA,GAAG,EAAEC;AAAP,MAAsB,yBAAUL,WAAV,CAA5B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAYD,UAAlB;AACA,QAAM;AAAED,IAAAA,GAAF;AAAOG,IAAAA;AAAP,MAAe,yBAAUP,WAAV,EAAuB;AAAEQ,IAAAA,cAAc,EAAE;AAAlB,GAAvB,CAArB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,GAAvB,CAXC,CAaD;;AACA,MAAIK,UAAU,KAAK,aAAf,IAAgC,CAAC,uCAArC,EAAkE;AAChE,UAAM,KAAIN,mBAAJ,EAAa,iBAAb,EAAgC,6CAAhC,CAAN;AACD;;AACDC,EAAAA,GAAG,CAACM,OAAJ,GAAc,MAAMC,aAAa,GAACC,uBAAd,CAAsCZ,WAAtC,EAAmDI,GAAnD,CAApB;AACA,SAAO;AACLA,IAAAA,GAAG,EAAE,EACH,GAAGA,GADA;AAEHK,MAAAA,UAAU,EAAEA;AAFT,KADA;AAKLF,IAAAA,GALK;AAMLD,IAAAA;AANK,GAAP;AAQD","sourcesContent":["import {\n  ExpoAppManifest,\n  ExpoConfig,\n  getConfig,\n  PackageJSONConfig,\n  ProjectTarget,\n} from '@expo/config';\n\nimport { maySkipManifestValidation } from '../Env';\nimport XDLError from '../XDLError';\nimport * as ExponentTools from '../detach/ExponentTools';\n\nexport type PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n  resetCache?: boolean;\n  maxWorkers?: number;\n  quiet?: boolean;\n};\n\nexport async function getPublishExpConfigAsync(\n  projectRoot: string,\n  options: Pick<PublishOptions, 'releaseChannel'>\n): Promise<{\n  exp: ExpoAppManifest;\n  pkg: PackageJSONConfig;\n  hooks: ExpoConfig['hooks'];\n}> {\n  if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');\n  }\n  options.releaseChannel = options.releaseChannel || 'default';\n\n  // Verify that exp/app.json and package.json exist\n  const { exp: privateExp } = getConfig(projectRoot);\n  const { hooks } = privateExp;\n  const { exp, pkg } = getConfig(projectRoot, { isPublicConfig: true });\n\n  const { sdkVersion } = exp;\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(projectRoot, exp);\n  return {\n    exp: {\n      ...exp,\n      sdkVersion: sdkVersion!,\n    },\n    pkg,\n    hooks,\n  };\n}\n"],"file":"../../project/getPublishExpConfigAsync.js","sourceRoot":"/@expo/xdl@59.0.24/src"}
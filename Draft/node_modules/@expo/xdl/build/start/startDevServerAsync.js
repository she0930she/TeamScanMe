"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startDevServerAsync = startDevServerAsync;

function _devServer() {
  const data = require("@expo/dev-server");

  _devServer = function () {
    return data;
  };

  return data;
}

function ProjectSettings() {
  const data = _interopRequireWildcard(require("../ProjectSettings"));

  ProjectSettings = function () {
    return data;
  };

  return data;
}

function ProjectUtils() {
  const data = _interopRequireWildcard(require("../project/ProjectUtils"));

  ProjectUtils = function () {
    return data;
  };

  return data;
}

function _errors() {
  const data = require("../project/errors");

  _errors = function () {
    return data;
  };

  return data;
}

function _ManifestHandler() {
  const data = require("./ManifestHandler");

  _ManifestHandler = function () {
    return data;
  };

  return data;
}

function _getFreePortAsync() {
  const data = require("./getFreePortAsync");

  _getFreePortAsync = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function startDevServerAsync(projectRoot, startOptions) {
  (0, _errors().assertValidProjectRoot)(projectRoot);
  const port = startOptions.devClient ? Number(process.env.RCT_METRO_PORT) || 8081 : await (0, _getFreePortAsync().getFreePortAsync)(19000);
  await ProjectSettings().setPackagerInfoAsync(projectRoot, {
    expoServerPort: port,
    packagerPort: port
  });
  const options = {
    port,
    logger: ProjectUtils().getLogger(projectRoot),
    // @deprecated
    target: startOptions.target
  };

  if (startOptions.reset) {
    options.resetCache = true;
  }

  if (startOptions.maxWorkers != null) {
    options.maxWorkers = startOptions.maxWorkers;
  }

  const {
    server,
    middleware
  } = await (0, _devServer().runMetroDevServerAsync)(projectRoot, options);
  middleware.use((0, _ManifestHandler().getManifestHandler)(projectRoot));
  return server;
}
//# sourceMappingURL=../__sourcemaps__/start/startDevServerAsync.js.map
